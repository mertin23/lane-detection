{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Finding Lane Lines on the Road** \n",
    "***\n",
    "In this project, you will use the tools you learned about in the lesson to identify lane lines on the road.  You can develop your pipeline on a series of individual images, and later apply the result to a video stream (really just a series of images). Check out the video clip \"raw-lines-example.mp4\" (also contained in this repository) to see what the output should look like after using the helper functions below. \n",
    "\n",
    "Once you have a result that looks roughly like \"raw-lines-example.mp4\", you'll need to get creative and try to average and/or extrapolate the line segments you've detected to map out the full extent of the lane lines.  You can see an example of the result you're going for in the video \"P1_example.mp4\".  Ultimately, you would like to draw just one line for the left side of the lane, and one for the right.\n",
    "\n",
    "---\n",
    "Let's have a look at our first image called 'test_images/solidWhiteRight.jpg'.  Run the 2 cells below (hit Shift-Enter or the \"play\" button above) to display the image.\n",
    "\n",
    "**Note** If, at any point, you encounter frozen display windows or other confounding issues, you can always start again with a clean slate by going to the \"Kernel\" menu above and selecting \"Restart & Clear Output\".\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The tools you have are color selection, region of interest selection, grayscaling, Gaussian smoothing, Canny Edge Detection and Hough Tranform line detection.  You  are also free to explore and try other techniques that were not presented in the lesson.  Your goal is piece together a pipeline to detect the line segments in the image, then average/extrapolate them and draw them onto the image for display (as below).  Once you have a working pipeline, try it out on the video stream below.**\n",
    "\n",
    "---\n",
    "\n",
    "<figure>\n",
    " <img src=\"line-segments-example.jpg\" width=\"380\" alt=\"Combined Image\" />\n",
    " <figcaption>\n",
    " <p></p> \n",
    " <p style=\"text-align: center;\"> Your output should look something like this (above) after detecting line segments using the helper functions below </p> \n",
    " </figcaption>\n",
    "</figure>\n",
    " <p></p> \n",
    "<figure>\n",
    " <img src=\"laneLines_thirdPass.jpg\" width=\"380\" alt=\"Combined Image\" />\n",
    " <figcaption>\n",
    " <p></p> \n",
    " <p style=\"text-align: center;\"> Your goal is to connect/average/extrapolate line segments to get output like this</p> \n",
    " </figcaption>\n",
    "</figure>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#importing some useful packages\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "import numpy as np\n",
    "import cv2\n",
    "import math\n",
    "import os\n",
    "from moviepy.editor import VideoFileClip\n",
    "from IPython.display import HTML\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x115f9bef0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n3w9Nf8lqkgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115f47cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#reading in an image\n",
    "\n",
    "image = mpimg.imread('test_images/solidWhiteCurve.jpg')\n",
    "#printing out some stats and plotting\n",
    "print('This image is:', type(image), 'with dimesions:', image.shape)\n",
    "plt.imshow(process_image(image))  #call as plt.imshow(gray, cmap='gray') to show a grayscaled image\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Some OpenCV functions (beyond those introduced in the lesson) that might be useful for this project are:**\n",
    "\n",
    "`cv2.inRange()` for color selection  \n",
    "`cv2.fillPoly()` for regions selection  \n",
    "`cv2.line()` to draw lines on an image given endpoints  \n",
    "`cv2.addWeighted()` to coadd / overlay two images\n",
    "`cv2.cvtColor()` to grayscale or change color\n",
    "`cv2.imwrite()` to output images to file  \n",
    "`cv2.bitwise_and()` to apply a mask to an image\n",
    "\n",
    "**Check out the OpenCV documentation to learn about these and discover even more awesome functionality!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below are some helper functions to help get you started. They should look familiar from the lesson!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def process_image(image):\n",
    "    # NOTE: The output you return should be a color image (3 channel) for processing video below\n",
    "    # TODO: put your pipeline here,\n",
    "    # you should return the final output (image with lines are drawn on lanes)\n",
    "\n",
    " \n",
    "    print('This image is:', type(image), 'with dimesions:', image.shape)\n",
    "    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "\n",
    "    kernel_size = 5\n",
    "    blur_gray = gaussian_blur(gray, kernel_size)\n",
    "\n",
    "    edges = cv2.Canny(blur_gray,50,150)\n",
    "\n",
    "    imshape = image.shape\n",
    "    vertices = np.array([[(0,imshape[0]),(450, 325), (490, 325), (imshape[1],imshape[0])]], dtype=np.int32)\n",
    "    roi = region_of_interest(edges,vertices)\n",
    "    rho = 2# distance resolution in pixels of the Hough grid\n",
    "    theta = np.pi/180 # angular resolution in radians of the Hough grid\n",
    "    threshold = 15    # minimum number of votes (intersections in Hough grid cell)\n",
    "    min_line_length = 10 #minimum number of pixels making up a line\n",
    "    max_line_gap = 40    # maximum gap in pixels between connectable line segments\n",
    "\n",
    "\n",
    "    line_image = hough_lines(roi, rho, theta, threshold, min_line_length, max_line_gap)\n",
    "\n",
    "    result = cv2.addWeighted(image, 0.8, line_image, 1, 0) \n",
    "    return result\n",
    "\n",
    "\n",
    "def grayscale(img):\n",
    "    \"\"\"Applies the Grayscale transform\n",
    "    This will return an image with only one color channel\n",
    "    but NOTE: to see the returned image as grayscale\n",
    "    you should call plt.imshow(gray, cmap='gray')\"\"\"\n",
    "    return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n",
    "    # Or use BGR2GRAY if you read an image with cv2.imread()\n",
    "    # return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "    \n",
    "def canny(img, low_threshold, high_threshold):\n",
    "    \"\"\"Applies the Canny transform\"\"\"\n",
    "    return cv2.Canny(img, low_threshold, high_threshold)\n",
    "\n",
    "def gaussian_blur(img, kernel_size):\n",
    "    \"\"\"Applies a Gaussian Noise kernel\"\"\"\n",
    "    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)\n",
    "\n",
    "def region_of_interest(img, vertices):\n",
    "    \"\"\"\n",
    "    Applies an image mask.\n",
    "    \n",
    "    Only keeps the region of the image defined by the polygon\n",
    "    formed from `vertices`. The rest of the image is set to black.\n",
    "    \"\"\"\n",
    "    #defining a blank mask to start with\n",
    "    mask = np.zeros_like(img)   \n",
    "    \n",
    "    #defining a 3 channel or 1 channel color to fill the mask with depending on the input image\n",
    "    if len(img.shape) > 2:\n",
    "        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image\n",
    "        ignore_mask_color = (255,) * channel_count\n",
    "    else:\n",
    "        ignore_mask_color = 255\n",
    "        \n",
    "    #filling pixels inside the polygon defined by \"vertices\" with the fill color    \n",
    "    cv2.fillPoly(mask, vertices, ignore_mask_color)\n",
    "    \n",
    "    #returning the image only where mask pixels are nonzero\n",
    "    masked_image = cv2.bitwise_and(img, mask)\n",
    "    return masked_image\n",
    "\n",
    "\n",
    "def draw_lines(img, lines, color=[255, 0, 0], thickness=10):\n",
    "    \"\"\"\n",
    "    NOTE: this is the function you might want to use as a starting point once you want to \n",
    "    average/extrapolate the line segments you detect to map out the full\n",
    "    extent of the lane (going from the result shown in raw-lines-example.mp4\n",
    "    to that shown in P1_example.mp4).  \n",
    "    \n",
    "    Think about things like separating line segments by their \n",
    "    slope ((y2-y1)/(x2-x1)) to decide which segments are part of the left\n",
    "    line vs. the right line.  Then, you can average the position of each of \n",
    "    the lines and extrapolate to the top and bottom of the lane.\n",
    "    \n",
    "    This function draws `lines` with `color` and `thickness`.    \n",
    "    Lines are drawn on the image inplace (mutates the image).\n",
    "    If you want to make the lines semi-transparent, think about combining\n",
    "    this function with the weighted_img() function below\n",
    "    \"\"\"\n",
    "    \n",
    "    x1LeftAvg = 0\n",
    "    x2LeftAvg = 0\n",
    "    y1LeftAvg = 0\n",
    "    y2LeftAvg = 0\n",
    "    x1RightAvg = 0\n",
    "    x2RightAvg = 0\n",
    "    y1RightAvg = 0\n",
    "    y2RightAvg = 0\n",
    "    countL = 0\n",
    "    countR = 0\n",
    "    for line in lines:\n",
    "        for x1,y1,x2,y2 in line:\n",
    "            angle = np.arctan2(y2-y1, x2-x1) * 180 / np.pi;\n",
    "            if np.absolute(angle) < 29:\n",
    "                continue\n",
    "            if np.absolute(angle) > 39:\n",
    "                continue\n",
    "            found = 1\n",
    "            if angle > 0:\n",
    "                x1RightAvg += x1\n",
    "                x2RightAvg +=x2\n",
    "                y1RightAvg +=y1\n",
    "                y2RightAvg +=y2\n",
    "                countR+=1\n",
    "            else:\n",
    "                x1LeftAvg += x1\n",
    "                x2LeftAvg +=x2\n",
    "                y1LeftAvg +=y1\n",
    "                y2LeftAvg +=y2\n",
    "                countL+=1\n",
    "    if countR ==0:\n",
    "        return\n",
    "    if countL ==0:\n",
    "        return\n",
    "    x1RightAvg = int(x1RightAvg/countR)\n",
    "    x2RightAvg =int(x2RightAvg/countR)\n",
    "    y1RightAvg =int(y1RightAvg/countR)\n",
    "    y2RightAvg =int(y2RightAvg/countR)\n",
    "    x1LeftAvg = int(x1LeftAvg/countL)\n",
    "    x2LeftAvg =int(x2LeftAvg/countL)\n",
    "    y1LeftAvg =int(y1LeftAvg/countL)\n",
    "    y2LeftAvg =int(y2LeftAvg/countL)\n",
    " \n",
    "    if found ==1 :\n",
    "        angleAvgR = np.arctan2(y2RightAvg-y1RightAvg,x2RightAvg-x1RightAvg)\n",
    "        angleAvgL = np.arctan2(y2LeftAvg-y1LeftAvg,x2LeftAvg-x1LeftAvg)\n",
    "        hL = img.shape[0] - y2LeftAvg\n",
    "        hR = img.shape[0] - y1RightAvg\n",
    "        distAvgL = hL/(np.tan(np.absolute(angleAvgL)))\n",
    "        distAvgR = hR/(np.tan(np.absolute(angleAvgR)))\n",
    "        lenLeft = int(np.sin(np.absolute(angleAvgL)) * 350)\n",
    "        lenRight = int(np.sin(np.absolute(angleAvgR)) * 350)\n",
    "        latLeft = int(np.cos(np.absolute(angleAvgL)) * 350)\n",
    "        latRight = int(np.cos(np.absolute(angleAvgR)) * 350)\n",
    "        xleft =  int(x2LeftAvg - distAvgL)\n",
    "        bottom= int(img.shape[0])\n",
    "        xright = int(x1RightAvg + distAvgR)\n",
    "        xL = latLeft + xleft\n",
    "        yL = bottom - lenLeft\n",
    "        xR = xright - latRight\n",
    "        yR = bottom - lenRight\n",
    "        xLA = int(x2LeftAvg - distAvgL)\n",
    "        xRA = int(x1RightAvg +distAvgR)\n",
    "        cv2.line(img, (xLA, bottom), (xL, yL), color, thickness)\n",
    "        cv2.line(img, (xRA, bottom), (xR, yR), color, thickness)\n",
    "  \n",
    "        \n",
    "        #cv2.line(img, (xright, yleft), (x1Left, y1Left), color, thickness)\n",
    "        #cv2.line(img, (xleft, yleft), (x2Right, y2Right), color, thickness)\n",
    "\n",
    "def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):\n",
    "    \"\"\"\n",
    "    `img` should be the output of a Canny transform.\n",
    "        \n",
    "    Returns an image with hough lines drawn.\n",
    "    \"\"\"\n",
    "    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)\n",
    "    line_img = np.zeros((*img.shape, 3), dtype=np.uint8)\n",
    "    draw_lines(line_img, lines)\n",
    "    return line_img\n",
    "\n",
    "# Python 3 has support for cool math symbols.\n",
    "\n",
    "def weighted_img(img, initial_img, α=0.8, β=1., λ=0.):\n",
    "    \"\"\"\n",
    "    `img` is the output of the hough_lines(), An image with lines drawn on it.\n",
    "    Should be a blank image (all black) with lines drawn on it.\n",
    "    \n",
    "    `initial_img` should be the image before any processing.\n",
    "    \n",
    "    The result image is computed as follows:\n",
    "    \n",
    "    initial_img * α + img * β + λ\n",
    "    NOTE: initial_img and img must be the same shape!\n",
    "    \"\"\"\n",
    "    return cv2.addWeighted(initial_img, α, img, β, λ)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test on Images\n",
    "\n",
    "Now you should build your pipeline to work on the images in the directory \"test_images\"  \n",
    "**You should make sure your pipeline works well on these images before you try the videos.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['solidWhiteCurve.jpg',\n",
       " 'solidWhiteRight.jpg',\n",
       " 'solidYellowCurve.jpg',\n",
       " 'solidYellowCurve2.jpg',\n",
       " 'solidYellowLeft.jpg',\n",
       " 'whiteCarLaneSwitch.jpg']"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.listdir(\"test_images/\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "run your solution on all test_images and make copies into the test_images directory)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test on Videos\n",
    "\n",
    "You know what's cooler than drawing lanes over images? Drawing lanes over video!\n",
    "\n",
    "We can test our solution on two provided videos:\n",
    "\n",
    "`solidWhiteRight.mp4`\n",
    "\n",
    "`solidYellowLeft.mp4`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Import everything needed to edit/save/watch video clips\n",
    "from moviepy.editor import VideoFileClip\n",
    "from IPython.display import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try the one with the solid white lane on the right first ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "[MoviePy] >>>> Building video white.mp4\n",
      "[MoviePy] Writing video white.mp4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  5%|▌         | 12/222 [00:00<00:01, 117.60it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 18%|█▊        | 40/222 [00:00<00:01, 124.26it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 27%|██▋       | 59/222 [00:00<00:01, 99.07it/s] "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 35%|███▍      | 77/222 [00:00<00:01, 89.70it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 43%|████▎     | 96/222 [00:00<00:01, 88.06it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 52%|█████▏    | 116/222 [00:01<00:01, 89.24it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\r",
      " 56%|█████▋    | 125/222 [00:01<00:01, 78.14it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 64%|██████▍   | 143/222 [00:01<00:01, 78.75it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 72%|███████▏  | 160/222 [00:01<00:00, 73.77it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 79%|███████▉  | 176/222 [00:02<00:00, 71.71it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 87%|████████▋ | 193/222 [00:02<00:00, 76.97it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 95%|█████████▍| 210/222 [00:02<00:00, 80.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████▉| 221/222 [00:02<00:00, 85.27it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "[MoviePy] Done.\n",
      "[MoviePy] >>>> Video ready: white.mp4 \n",
      "\n",
      "CPU times: user 2.08 s, sys: 601 ms, total: 2.68 s\n",
      "Wall time: 3 s\n"
     ]
    }
   ],
   "source": [
    "white_output = 'white.mp4'\n",
    "clip1 = VideoFileClip(\"solidWhiteRight.mp4\")\n",
    "white_clip = clip1.fl_image(process_image) #NOTE: this function expects color images!!\n",
    "%time white_clip.write_videofile(white_output, audio=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Play the video inline, or if you prefer find the video in your filesystem (should be in the same directory) and play it in your video player of choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<video wid|th=\"960\" height=\"540\" controls>\n",
       "  <source src=\"white.mp4\">\n",
       "</video>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HTML(\"\"\"\n",
    "<video wid|th=\"960\" height=\"540\" controls>\n",
    "  <source src=\"{0}\">\n",
    "</video>\n",
    "\"\"\".format(white_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**At this point, if you were successful you probably have the Hough line segments drawn onto the road, but what about identifying the full extent of the lane and marking it clearly as in the example video (P1_example.mp4)?  Think about defining a line to run the full length of the visible lane based on the line segments you identified with the Hough Transform.  Modify your draw_lines function accordingly and try re-running your pipeline.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now for the one with the solid yellow lane on the left. This one's more tricky!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:py.warnings:/Users/mcurban/anaconda/lib/python3.5/site-packages/moviepy/audio/io/readers.py:123: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future\n",
      "  self.nchannels))\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "[MoviePy] >>>> Building video yellow.mp4\n",
      "[MoviePy] Writing video yellow.mp4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "  0%|          | 0/682 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  1%|▏         | 10/682 [00:00<00:07, 91.87it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "  3%|▎         | 21/682 [00:00<00:06, 96.07it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  5%|▍         | 31/682 [00:00<00:06, 96.94it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  6%|▌         | 42/682 [00:00<00:06, 98.54it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  7%|▋         | 50/682 [00:00<00:07, 79.35it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  9%|▊         | 58/682 [00:00<00:08, 75.78it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 10%|▉         | 66/682 [00:00<00:08, 76.83it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 11%|█         | 74/682 [00:00<00:07, 76.48it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 12%|█▏        | 82/682 [00:01<00:08, 72.69it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 13%|█▎        | 90/682 [00:01<00:08, 65.91it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 14%|█▍        | 97/682 [00:01<00:09, 64.54it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 15%|█▌        | 104/682 [00:01<00:08, 65.45it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 16%|█▋        | 112/682 [00:01<00:08, 66.41it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 18%|█▊        | 121/682 [00:01<00:07, 70.98it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 19%|█▉        | 129/682 [00:01<00:07, 72.31it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 20%|██        | 137/682 [00:01<00:07, 71.73it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 21%|██▏       | 145/682 [00:01<00:07, 70.74it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 22%|██▏       | 153/682 [00:02<00:07, 71.81it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 24%|██▎       | 161/682 [00:02<00:07, 73.37it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 25%|██▍       | 169/682 [00:02<00:06, 74.70it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 26%|██▌       | 178/682 [00:02<00:06, 77.54it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 27%|██▋       | 187/682 [00:02<00:06, 78.62it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 29%|██▊       | 195/682 [00:02<00:06, 78.24it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 30%|██▉       | 203/682 [00:02<00:06, 78.63it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 31%|███       | 211/682 [00:02<00:05, 78.89it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 32%|███▏      | 220/682 [00:02<00:05, 80.09it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 34%|███▎      | 229/682 [00:02<00:05, 80.00it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 35%|███▍      | 238/682 [00:03<00:05, 74.97it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 36%|███▌      | 246/682 [00:03<00:05, 74.84it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 37%|███▋      | 254/682 [00:03<00:05, 76.18it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 39%|███▊      | 263/682 [00:03<00:05, 77.44it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 40%|███▉      | 271/682 [00:03<00:05, 77.69it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 41%|████      | 280/682 [00:03<00:05, 78.95it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 42%|████▏     | 288/682 [00:03<00:05, 78.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 43%|████▎     | 296/682 [00:03<00:04, 78.47it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 45%|████▍     | 306/682 [00:03<00:04, 80.98it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 46%|████▌     | 315/682 [00:04<00:04, 79.50it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 48%|████▊     | 324/682 [00:04<00:04, 80.81it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 49%|████▉     | 333/682 [00:04<00:04, 79.24it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 50%|█████     | 341/682 [00:04<00:04, 79.30it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 51%|█████     | 349/682 [00:04<00:04, 79.09it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 52%|█████▏    | 357/682 [00:04<00:04, 79.23it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 54%|█████▎    | 365/682 [00:04<00:04, 79.10it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 55%|█████▍    | 373/682 [00:04<00:03, 78.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 56%|█████▌    | 381/682 [00:04<00:03, 78.69it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 57%|█████▋    | 389/682 [00:05<00:03, 78.49it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 58%|█████▊    | 397/682 [00:05<00:03, 76.89it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 60%|█████▉    | 406/682 [00:05<00:03, 78.10it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 61%|██████    | 414/682 [00:05<00:03, 75.75it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 62%|██████▏   | 423/682 [00:05<00:03, 77.91it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 63%|██████▎   | 431/682 [00:05<00:03, 76.45it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 65%|██████▍   | 440/682 [00:05<00:03, 78.19it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 66%|██████▌   | 448/682 [00:05<00:03, 77.78it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 67%|██████▋   | 456/682 [00:05<00:02, 78.17it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 68%|██████▊   | 464/682 [00:06<00:02, 78.65it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 69%|██████▉   | 472/682 [00:06<00:02, 78.17it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 71%|███████   | 481/682 [00:06<00:02, 79.21it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 72%|███████▏  | 489/682 [00:06<00:02, 77.49it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 73%|███████▎  | 498/682 [00:06<00:02, 77.94it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 74%|███████▍  | 506/682 [00:06<00:02, 76.12it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 75%|███████▌  | 514/682 [00:06<00:02, 75.44it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 77%|███████▋  | 522/682 [00:06<00:02, 74.67it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 78%|███████▊  | 530/682 [00:06<00:02, 75.30it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 79%|███████▉  | 538/682 [00:06<00:01, 74.80it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 80%|████████  | 546/682 [00:07<00:01, 76.15it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 81%|████████▏ | 555/682 [00:07<00:01, 77.67it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 83%|████████▎ | 563/682 [00:07<00:01, 75.84it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 84%|████████▎ | 571/682 [00:07<00:01, 74.63it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 85%|████████▍ | 579/682 [00:07<00:01, 73.93it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 86%|████████▌ | 587/682 [00:07<00:01, 72.17it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 87%|████████▋ | 595/682 [00:07<00:01, 74.31it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 88%|████████▊ | 603/682 [00:07<00:01, 74.02it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 90%|████████▉ | 611/682 [00:07<00:00, 75.61it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 91%|█████████ | 619/682 [00:08<00:00, 75.23it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 92%|█████████▏| 627/682 [00:08<00:00, 75.35it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 93%|█████████▎| 635/682 [00:08<00:00, 76.21it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 94%|█████████▍| 643/682 [00:08<00:00, 76.76it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 95%|█████████▌| 651/682 [00:08<00:00, 75.25it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 97%|█████████▋| 659/682 [00:08<00:00, 76.28it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 98%|█████████▊| 667/682 [00:08<00:00, 75.21it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 99%|█████████▉| 675/682 [00:08<00:00, 75.38it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "100%|█████████▉| 681/682 [00:08<00:00, 76.73it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (540, 960, 3)\n",
      "[MoviePy] Done.\n",
      "[MoviePy] >>>> Video ready: yellow.mp4 \n",
      "\n",
      "CPU times: user 6.68 s, sys: 2.35 s, total: 9.03 s\n",
      "Wall time: 9.29 s\n"
     ]
    }
   ],
   "source": [
    "yellow_output = 'yellow.mp4'\n",
    "clip2 = VideoFileClip('solidYellowLeft.mp4')\n",
    "yellow_clip = clip2.fl_image(process_image)\n",
    "%time yellow_clip.write_videofile(yellow_output, audio=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<video width=\"960\" height=\"540\" controls>\n",
       "  <source src=\"yellow.mp4\">\n",
       "</video>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 319,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HTML(\"\"\"\n",
    "<video width=\"960\" height=\"540\" controls>\n",
    "  <source src=\"{0}\">\n",
    "</video>\n",
    "\"\"\".format(yellow_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reflections\n",
    "\n",
    "Congratulations on finding the lane lines!  As the final step in this project, we would like you to share your thoughts on your lane finding pipeline... specifically, how could you imagine making your algorithm better / more robust?  Where will your current algorithm be likely to fail?\n",
    "\n",
    "Please add your thoughts below,  and if you're up for making your pipeline more robust, be sure to scroll down and check out the optional challenge video below!\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# My reflections:\n",
    "\n",
    "I think my algorithm works pretty well, but there are some cases where it will fail, like in the challenge video.\n",
    "The issue appears when there are other lines that are included in the average/extrapolate which they shouldn't:\n",
    "They meet my angle criteria, but they are in a different zone. Now if those lines/shapes are near the lines that I should detect, that doesn't affect the algorithm too much(like in the solid yellow left video), but still it could be improved.\n",
    "One way to improve is to select only those lines that when extrapolated with others form a line with a similar angle from the defined criteria.\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Submission\n",
    "\n",
    "If you're satisfied with your video outputs it's time to submit!  Submit this ipython notebook for review.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Optional Challenge\n",
    "\n",
    "Try your lane finding pipeline on the video below.  Does it still work?  Can you figure out a way to make it more robust?  If you're up for the challenge, modify your pipeline so it works with this video and submit it along with the rest of your project!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:py.warnings:/Users/mcurban/anaconda/lib/python3.5/site-packages/moviepy/audio/io/readers.py:123: VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future\n",
      "  self.nchannels))\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 774 0\n",
      "tempsfdvdvdfv 1817 1\n",
      "tempsfdvdvdfv 2560 2\n",
      "tempsfdvdvdfv 3379 3\n",
      "tempsfdvdvdfv 4401 4\n",
      "tempsfdvdvdfv 5144 5\n",
      "tempsfdvdvdfv 6217 6\n",
      "tempsfdvdvdfv 7038 7\n",
      "tempsfdvdvdfv 7710 8\n",
      "tempsfdvdvdfv 8806 9\n",
      "tempsfdvdvdfv 9255 10\n",
      "tempsfdvdvdfv 10073 11\n",
      "tempsfdvdvdfv 10562 12\n",
      "tempsfdvdvdfv 11233 13\n",
      "tempsfdvdvdfv 11954 14\n",
      "tempsfdvdvdfv 12994 15\n",
      "tempsfdvdvdfv 13521 16\n",
      "tempsfdvdvdfv 14174 17\n",
      "tempsfdvdvdfv 14854 18\n",
      "avg 19 10 705 781 464 512 370 455 602 545\n",
      "left [[754, 479, 774, 491], [930, 580, 1043, 647], [646, 408, 743, 466], [722, 454, 819, 517], [913, 579, 1022, 647], [641, 401, 743, 465], [995, 629, 1073, 677], [674, 417, 821, 520], [630, 407, 672, 432], [976, 608, 1096, 675], [399, 371, 449, 401], [723, 456, 818, 520], [402, 378, 489, 430], [630, 409, 671, 433], [688, 426, 721, 448], [988, 625, 1040, 658], [414, 379, 527, 455], [629, 405, 653, 420], [645, 405, 680, 427]]\n",
      "right [[281, 685, 441, 569], [253, 686, 504, 517], [557, 484, 673, 417], [476, 544, 636, 440], [453, 562, 524, 505], [419, 586, 437, 572], [335, 598, 351, 587], [338, 600, 355, 588], [333, 600, 355, 587], [257, 684, 279, 670]]\n",
      "[MoviePy] >>>> Building video extra.mp4\n",
      "[MoviePy] Writing video extra.mp4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "  0%|          | 0/251 [00:00<?, ?it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  2%|▏         | 5/251 [00:00<00:05, 45.52it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 774 0\n",
      "tempsfdvdvdfv 1817 1\n",
      "tempsfdvdvdfv 2560 2\n",
      "tempsfdvdvdfv 3379 3\n",
      "tempsfdvdvdfv 4401 4\n",
      "tempsfdvdvdfv 5144 5\n",
      "tempsfdvdvdfv 6217 6\n",
      "tempsfdvdvdfv 7038 7\n",
      "tempsfdvdvdfv 7710 8\n",
      "tempsfdvdvdfv 8806 9\n",
      "tempsfdvdvdfv 9255 10\n",
      "tempsfdvdvdfv 10073 11\n",
      "tempsfdvdvdfv 10562 12\n",
      "tempsfdvdvdfv 11233 13\n",
      "tempsfdvdvdfv 11954 14\n",
      "tempsfdvdvdfv 12994 15\n",
      "tempsfdvdvdfv 13521 16\n",
      "tempsfdvdvdfv 14174 17\n",
      "tempsfdvdvdfv 14854 18\n",
      "avg 19 10 705 781 464 512 370 455 602 545\n",
      "left [[754, 479, 774, 491], [930, 580, 1043, 647], [646, 408, 743, 466], [722, 454, 819, 517], [913, 579, 1022, 647], [641, 401, 743, 465], [995, 629, 1073, 677], [674, 417, 821, 520], [630, 407, 672, 432], [976, 608, 1096, 675], [399, 371, 449, 401], [723, 456, 818, 520], [402, 378, 489, 430], [630, 409, 671, 433], [688, 426, 721, 448], [988, 625, 1040, 658], [414, 379, 527, 455], [629, 405, 653, 420], [645, 405, 680, 427]]\n",
      "right [[281, 685, 441, 569], [253, 686, 504, 517], [557, 484, 673, 417], [476, 544, 636, 440], [453, 562, 524, 505], [419, 586, 437, 572], [335, 598, 351, 587], [338, 600, 355, 588], [333, 600, 355, 587], [257, 684, 279, 670]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 671 0\n",
      "tempsfdvdvdfv 1340 1\n",
      "tempsfdvdvdfv 2412 2\n",
      "tempsfdvdvdfv 3504 3\n",
      "tempsfdvdvdfv 4569 4\n",
      "tempsfdvdvdfv 5243 5\n",
      "tempsfdvdvdfv 6020 6\n",
      "tempsfdvdvdfv 6807 7\n",
      "tempsfdvdvdfv 7850 8\n",
      "tempsfdvdvdfv 8941 9\n",
      "tempsfdvdvdfv 9726 10\n",
      "tempsfdvdvdfv 10226 11\n",
      "tempsfdvdvdfv 11007 12\n",
      "tempsfdvdvdfv 11793 13\n",
      "tempsfdvdvdfv 12511 14\n",
      "tempsfdvdvdfv 13124 15\n",
      "tempsfdvdvdfv 13792 16\n",
      "tempsfdvdvdfv 14783 17\n",
      "tempsfdvdvdfv 15222 18\n",
      "tempsfdvdvdfv 15902 19\n",
      "tempsfdvdvdfv 16689 20\n",
      "tempsfdvdvdfv 17206 21\n",
      "tempsfdvdvdfv 18225 22\n",
      "tempsfdvdvdfv 19009 23\n",
      "avg 24 22 740 792 477 511 443 512 553 507\n",
      "left [[628, 407, 671, 432], [647, 412, 669, 426], [1036, 653, 1072, 676], [984, 610, 1092, 674], [956, 604, 1065, 672], [646, 409, 674, 426], [672, 416, 777, 495], [673, 416, 787, 495], [992, 615, 1043, 646], [1050, 648, 1091, 673], [721, 451, 785, 496], [466, 361, 500, 382], [770, 489, 781, 496], [723, 455, 786, 496], [683, 421, 718, 444], [558, 420, 613, 454], [646, 413, 668, 426], [963, 609, 991, 627], [421, 362, 439, 374], [639, 399, 680, 427], [680, 421, 787, 496], [458, 372, 517, 416], [987, 612, 1019, 632], [762, 483, 784, 496]]\n",
      "right [[281, 685, 478, 542], [255, 685, 511, 513], [579, 470, 671, 419], [493, 533, 544, 492], [623, 433, 652, 416], [584, 440, 644, 403], [277, 633, 302, 618], [514, 518, 578, 482], [537, 503, 576, 480], [431, 565, 447, 555], [505, 524, 577, 481], [372, 605, 382, 599], [441, 558, 456, 549], [408, 594, 433, 575], [388, 594, 574, 473], [360, 613, 370, 607], [311, 646, 327, 636], [647, 439, 673, 419], [303, 668, 442, 570], [560, 488, 644, 420], [420, 432, 446, 411], [476, 544, 543, 500]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 792 0\n",
      "tempsfdvdvdfv 1515 1\n",
      "tempsfdvdvdfv 2192 2\n",
      "tempsfdvdvdfv 2852 3\n",
      "tempsfdvdvdfv 3520 4\n",
      "tempsfdvdvdfv 4199 5\n",
      "tempsfdvdvdfv 5249 6\n",
      "tempsfdvdvdfv 6323 7\n",
      "tempsfdvdvdfv 7119 8\n",
      "tempsfdvdvdfv 7895 9\n",
      "tempsfdvdvdfv 8644 10\n",
      "tempsfdvdvdfv 9738 11\n",
      "tempsfdvdvdfv 10524 12\n",
      "tempsfdvdvdfv 11584 13\n",
      "tempsfdvdvdfv 12262 14\n",
      "tempsfdvdvdfv 12810 15\n",
      "avg 16 18 742 800 477 515 413 484 563 515\n",
      "left [[765, 485, 792, 502], [665, 413, 723, 450], [622, 401, 677, 432], [614, 410, 660, 436], [627, 408, 668, 433], [645, 410, 679, 431], [1016, 641, 1050, 663], [1016, 640, 1074, 676], [690, 425, 796, 502], [728, 460, 776, 488], [716, 448, 749, 471], [1040, 643, 1094, 675], [689, 425, 786, 501], [1029, 649, 1060, 669], [624, 401, 678, 431], [395, 375, 548, 490]]\n",
      "right [[281, 685, 472, 547], [514, 519, 570, 484], [502, 521, 666, 415], [539, 502, 671, 416], [254, 685, 485, 530], [256, 685, 407, 583], [602, 437, 641, 414], [616, 434, 656, 411], [549, 490, 559, 483], [497, 524, 528, 503], [197, 680, 229, 661], [446, 565, 534, 507], [391, 607, 409, 593], [492, 527, 503, 519], [197, 681, 229, 659], [481, 534, 493, 525], [188, 681, 225, 660], [435, 380, 445, 373]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 801 0\n",
      "tempsfdvdvdfv 1608 1\n",
      "tempsfdvdvdfv 2286 2\n",
      "tempsfdvdvdfv 3023 3\n",
      "tempsfdvdvdfv 3828 4\n",
      "tempsfdvdvdfv 4636 5\n",
      "tempsfdvdvdfv 5390 6\n",
      "tempsfdvdvdfv 6058 7\n",
      "avg 8 12 693 757 438 478 442 558 563 486\n",
      "left [[782, 498, 801, 509], [728, 460, 807, 509], [642, 406, 678, 427], [636, 400, 737, 461], [685, 422, 805, 509], [727, 459, 808, 507], [719, 453, 754, 473], [626, 409, 668, 433]]\n",
      "right [[257, 685, 486, 531], [283, 685, 471, 549], [533, 500, 678, 419], [295, 677, 480, 543], [556, 485, 663, 423], [391, 594, 408, 581], [494, 535, 662, 413], [259, 683, 465, 544], [580, 470, 672, 417], [640, 420, 653, 411], [558, 484, 579, 472], [469, 543, 482, 534]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 821 0\n",
      "tempsfdvdvdfv 1634 1\n",
      "tempsfdvdvdfv 2107 2\n",
      "tempsfdvdvdfv 2570 3\n",
      "tempsfdvdvdfv 3245 4\n",
      "tempsfdvdvdfv 4056 5\n",
      "tempsfdvdvdfv 4427 6\n",
      "avg 7 23 565 632 459 504 413 475 578 537\n",
      "left [[646, 403, 821, 517], [785, 500, 813, 517], [395, 373, 473, 428], [429, 413, 463, 433], [657, 418, 675, 428], [721, 454, 811, 511], [323, 657, 371, 695]]\n",
      "right [[339, 629, 665, 417], [318, 660, 664, 417], [255, 685, 301, 657], [506, 527, 557, 495], [399, 601, 422, 586], [295, 660, 311, 650], [297, 676, 324, 657], [430, 579, 448, 568], [516, 520, 556, 495], [509, 517, 592, 463], [258, 685, 275, 675], [411, 592, 428, 582], [306, 652, 322, 642], [521, 516, 539, 504], [465, 556, 477, 547], [383, 612, 402, 600], [420, 586, 432, 579], [640, 443, 675, 420], [548, 450, 624, 404], [449, 566, 462, 558], [388, 438, 440, 408], [529, 510, 666, 417], [331, 635, 344, 627]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 838 0\n",
      "tempsfdvdvdfv 1792 1\n",
      "tempsfdvdvdfv 2610 2\n",
      "tempsfdvdvdfv 3437 3\n",
      "tempsfdvdvdfv 4227 4\n",
      "tempsfdvdvdfv 5063 5\n",
      "tempsfdvdvdfv 5900 6\n",
      "tempsfdvdvdfv 6703 7\n",
      "avg 8 11 766 837 483 530 432 549 575 495\n",
      "left [[722, 456, 838, 526], [942, 597, 954, 604], [672, 416, 818, 522], [788, 499, 827, 527], [732, 463, 790, 499], [723, 456, 836, 526], [762, 479, 837, 524], [791, 503, 803, 512]]\n",
      "right [[261, 685, 537, 499], [282, 686, 514, 523], [511, 524, 663, 417], [257, 686, 420, 577], [286, 684, 311, 667], [568, 479, 669, 423], [499, 533, 664, 417], [573, 477, 607, 455], [605, 460, 662, 424], [467, 548, 542, 496], [444, 563, 456, 554]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 856 0\n",
      "tempsfdvdvdfv 1700 1\n",
      "tempsfdvdvdfv 2556 2\n",
      "tempsfdvdvdfv 3229 3\n",
      "tempsfdvdvdfv 3904 4\n",
      "tempsfdvdvdfv 4703 5\n",
      "tempsfdvdvdfv 5549 6\n",
      "tempsfdvdvdfv 6152 7\n",
      "avg 8 23 686 769 444 495 433 507 572 521\n",
      "left [[644, 404, 856, 536], [798, 507, 844, 537], [724, 457, 856, 537], [643, 409, 673, 427], [638, 405, 675, 428], [735, 465, 799, 505], [763, 484, 846, 538], [549, 421, 603, 457]]\n",
      "right [[466, 557, 665, 417], [263, 684, 587, 466], [362, 630, 447, 572], [338, 647, 407, 600], [304, 684, 373, 634], [281, 685, 329, 655], [490, 539, 664, 417], [462, 560, 483, 546], [380, 606, 591, 464], [261, 685, 307, 653], [670, 434, 680, 428], [283, 685, 309, 669], [622, 451, 667, 417], [356, 635, 368, 627], [648, 440, 680, 420], [331, 652, 353, 638], [428, 584, 454, 567], [631, 447, 671, 417], [394, 434, 490, 367], [298, 660, 352, 623], [439, 576, 472, 554], [642, 442, 670, 423], [613, 456, 649, 429]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 870 0\n",
      "tempsfdvdvdfv 1750 1\n",
      "tempsfdvdvdfv 2566 2\n",
      "tempsfdvdvdfv 3435 3\n",
      "tempsfdvdvdfv 4160 4\n",
      "tempsfdvdvdfv 5040 5\n",
      "tempsfdvdvdfv 5911 6\n",
      "tempsfdvdvdfv 6741 7\n",
      "tempsfdvdvdfv 7466 8\n",
      "avg 9 30 756 829 475 521 458 509 554 521\n",
      "left [[727, 459, 870, 552], [819, 513, 880, 550], [720, 451, 816, 513], [833, 530, 869, 552], [671, 415, 725, 451], [770, 488, 880, 551], [818, 520, 871, 552], [777, 486, 830, 521], [670, 416, 725, 450]]\n",
      "right [[496, 526, 664, 417], [533, 508, 673, 417], [516, 520, 552, 496], [323, 644, 378, 609], [390, 612, 447, 573], [456, 565, 468, 557], [445, 562, 458, 554], [285, 685, 371, 627], [403, 591, 425, 577], [628, 449, 668, 423], [269, 682, 311, 652], [426, 575, 441, 566], [599, 463, 662, 423], [470, 554, 500, 533], [379, 607, 396, 597], [553, 494, 661, 421], [295, 681, 315, 666], [362, 632, 388, 615], [353, 624, 368, 615], [599, 422, 635, 402], [479, 538, 518, 513], [653, 439, 665, 432], [392, 611, 409, 600], [649, 440, 679, 421], [265, 684, 484, 536], [646, 441, 674, 423], [503, 522, 530, 505], [563, 483, 678, 419], [499, 414, 511, 405], [319, 664, 356, 636]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 910 0\n",
      "tempsfdvdvdfv 1766 1\n",
      "tempsfdvdvdfv 2448 2\n",
      "tempsfdvdvdfv 3203 3\n",
      "tempsfdvdvdfv 4112 4\n",
      "tempsfdvdvdfv 4980 5\n",
      "tempsfdvdvdfv 5838 6\n",
      "tempsfdvdvdfv 6733 7\n",
      "tempsfdvdvdfv 7459 8\n",
      "avg 9 15 758 828 474 521 438 506 556 508\n",
      "left [[829, 521, 910, 568], [678, 420, 856, 544], [642, 401, 682, 428], [728, 460, 755, 476], [828, 521, 909, 568], [782, 490, 868, 552], [831, 521, 858, 536], [826, 521, 895, 569], [678, 419, 726, 451]]\n",
      "right [[322, 648, 516, 513], [293, 684, 458, 564], [488, 540, 663, 417], [444, 573, 500, 533], [571, 459, 641, 406], [266, 685, 298, 663], [542, 497, 576, 473], [329, 643, 342, 633], [584, 441, 636, 404], [521, 511, 540, 497], [562, 489, 609, 453], [482, 537, 492, 530], [369, 438, 489, 366], [506, 521, 528, 505], [294, 683, 315, 667]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "  4%|▍         | 10/251 [00:00<00:05, 45.89it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  6%|▌         | 15/251 [00:00<00:05, 45.42it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 673 0\n",
      "tempsfdvdvdfv 1467 1\n",
      "tempsfdvdvdfv 2400 2\n",
      "tempsfdvdvdfv 3127 3\n",
      "tempsfdvdvdfv 4074 4\n",
      "tempsfdvdvdfv 4748 5\n",
      "tempsfdvdvdfv 5697 6\n",
      "tempsfdvdvdfv 6570 7\n",
      "tempsfdvdvdfv 7358 8\n",
      "tempsfdvdvdfv 8031 9\n",
      "tempsfdvdvdfv 8508 10\n",
      "tempsfdvdvdfv 9453 11\n",
      "tempsfdvdvdfv 10209 12\n",
      "tempsfdvdvdfv 11146 13\n",
      "tempsfdvdvdfv 11997 14\n",
      "tempsfdvdvdfv 12677 15\n",
      "tempsfdvdvdfv 13302 16\n",
      "tempsfdvdvdfv 13866 17\n",
      "tempsfdvdvdfv 14731 18\n",
      "avg 19 15 726 775 470 502 480 566 521 461\n",
      "left [[617, 397, 673, 429], [723, 455, 794, 498], [842, 534, 933, 593], [642, 401, 727, 454], [867, 542, 947, 593], [617, 395, 674, 429], [907, 565, 949, 592], [852, 533, 873, 547], [730, 460, 788, 499], [621, 392, 673, 434], [436, 406, 477, 432], [878, 548, 945, 593], [730, 461, 756, 480], [905, 565, 937, 586], [841, 534, 851, 541], [623, 393, 680, 429], [574, 412, 625, 446], [554, 417, 564, 423], [846, 537, 865, 550]]\n",
      "right [[299, 683, 492, 538], [274, 683, 535, 501], [500, 534, 647, 424], [544, 495, 678, 420], [534, 502, 589, 471], [607, 423, 634, 403], [629, 433, 644, 421], [565, 482, 580, 471], [566, 426, 579, 418], [482, 547, 516, 521], [405, 590, 596, 461], [563, 426, 618, 392], [392, 435, 437, 405], [278, 680, 304, 661], [567, 486, 654, 421]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 796 0\n",
      "tempsfdvdvdfv 1599 1\n",
      "tempsfdvdvdfv 2585 2\n",
      "tempsfdvdvdfv 3588 3\n",
      "tempsfdvdvdfv 4260 4\n",
      "tempsfdvdvdfv 5252 5\n",
      "tempsfdvdvdfv 6049 6\n",
      "tempsfdvdvdfv 6723 7\n",
      "tempsfdvdvdfv 7713 8\n",
      "tempsfdvdvdfv 8517 9\n",
      "tempsfdvdvdfv 9100 10\n",
      "tempsfdvdvdfv 9904 11\n",
      "tempsfdvdvdfv 10568 12\n",
      "avg 13 16 734 812 474 521 452 552 554 482\n",
      "left [[753, 479, 796, 506], [672, 421, 803, 506], [862, 548, 986, 625], [870, 546, 1003, 625], [615, 397, 672, 430], [909, 566, 992, 617], [746, 474, 797, 506], [615, 396, 674, 430], [872, 546, 990, 617], [732, 464, 804, 504], [542, 452, 583, 475], [747, 474, 804, 506], [614, 404, 664, 433]]\n",
      "right [[274, 685, 573, 476], [459, 565, 650, 422], [569, 480, 583, 470], [524, 518, 654, 424], [299, 684, 476, 551], [603, 463, 658, 423], [304, 681, 344, 652], [539, 506, 551, 498], [338, 639, 495, 529], [638, 445, 669, 424], [345, 650, 362, 638], [559, 463, 635, 413], [562, 466, 638, 409], [300, 684, 512, 525], [548, 499, 614, 452], [386, 436, 422, 413]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1093 0\n",
      "tempsfdvdvdfv 2163 1\n",
      "tempsfdvdvdfv 3240 2\n",
      "tempsfdvdvdfv 4056 3\n",
      "tempsfdvdvdfv 5150 4\n",
      "tempsfdvdvdfv 5881 5\n",
      "tempsfdvdvdfv 6695 6\n",
      "tempsfdvdvdfv 7701 7\n",
      "tempsfdvdvdfv 8307 8\n",
      "tempsfdvdvdfv 9117 9\n",
      "tempsfdvdvdfv 9847 10\n",
      "tempsfdvdvdfv 10848 11\n",
      "tempsfdvdvdfv 11310 12\n",
      "tempsfdvdvdfv 11772 13\n",
      "tempsfdvdvdfv 12364 14\n",
      "tempsfdvdvdfv 13297 15\n",
      "tempsfdvdvdfv 14021 16\n",
      "avg 17 11 746 824 489 537 360 455 621 554\n",
      "left [[897, 561, 1093, 674], [889, 563, 1070, 676], [1064, 668, 1077, 676], [723, 454, 816, 512], [990, 616, 1094, 674], [675, 420, 731, 456], [725, 457, 814, 513], [889, 564, 1006, 637], [546, 423, 606, 460], [735, 465, 810, 513], [676, 420, 730, 455], [900, 562, 1001, 620], [440, 368, 462, 381], [433, 367, 462, 384], [516, 425, 592, 469], [891, 564, 933, 590], [693, 428, 724, 448]]\n",
      "right [[396, 610, 652, 424], [272, 685, 563, 482], [298, 684, 369, 632], [375, 626, 394, 613], [271, 685, 533, 502], [379, 580, 391, 571], [376, 577, 388, 570], [351, 644, 382, 622], [384, 619, 398, 610], [297, 684, 316, 672], [561, 446, 625, 399]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1070 0\n",
      "tempsfdvdvdfv 1847 1\n",
      "tempsfdvdvdfv 2869 2\n",
      "tempsfdvdvdfv 3545 3\n",
      "tempsfdvdvdfv 4635 4\n",
      "tempsfdvdvdfv 5613 5\n",
      "tempsfdvdvdfv 6432 6\n",
      "tempsfdvdvdfv 7505 7\n",
      "tempsfdvdvdfv 8229 8\n",
      "tempsfdvdvdfv 9009 9\n",
      "tempsfdvdvdfv 10027 10\n",
      "tempsfdvdvdfv 11118 11\n",
      "tempsfdvdvdfv 12209 12\n",
      "tempsfdvdvdfv 13236 13\n",
      "tempsfdvdvdfv 13847 14\n",
      "tempsfdvdvdfv 14589 15\n",
      "tempsfdvdvdfv 15011 16\n",
      "tempsfdvdvdfv 15732 17\n",
      "tempsfdvdvdfv 16393 18\n",
      "tempsfdvdvdfv 17364 19\n",
      "tempsfdvdvdfv 17768 20\n",
      "avg 21 17 796 846 513 545 409 500 574 510\n",
      "left [[924, 585, 1070, 676], [754, 479, 777, 492], [947, 588, 1022, 634], [623, 398, 676, 429], [999, 617, 1090, 676], [937, 583, 978, 608], [678, 419, 819, 521], [1024, 646, 1073, 677], [675, 417, 724, 449], [725, 456, 780, 490], [984, 621, 1018, 643], [1048, 648, 1091, 676], [1072, 659, 1091, 674], [997, 617, 1027, 637], [547, 417, 611, 457], [728, 459, 742, 467], [409, 370, 422, 379], [697, 428, 721, 444], [622, 406, 661, 437], [940, 594, 971, 614], [394, 375, 404, 381]]\n",
      "right [[365, 633, 652, 424], [273, 685, 575, 474], [271, 685, 553, 488], [587, 472, 654, 424], [343, 650, 452, 570], [294, 685, 358, 640], [297, 685, 329, 662], [577, 443, 636, 405], [334, 605, 350, 595], [549, 466, 626, 418], [331, 605, 347, 593], [639, 444, 675, 418], [414, 399, 463, 362], [293, 685, 337, 656], [331, 604, 342, 596], [499, 534, 559, 491], [570, 483, 599, 460]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1077 0\n",
      "tempsfdvdvdfv 2172 1\n",
      "tempsfdvdvdfv 2960 2\n",
      "tempsfdvdvdfv 3960 3\n",
      "tempsfdvdvdfv 4741 4\n",
      "tempsfdvdvdfv 5475 5\n",
      "tempsfdvdvdfv 5877 6\n",
      "tempsfdvdvdfv 6650 7\n",
      "tempsfdvdvdfv 7722 8\n",
      "tempsfdvdvdfv 8758 9\n",
      "avg 10 17 804 875 541 586 398 478 600 544\n",
      "left [[969, 610, 1077, 677], [982, 609, 1095, 674], [726, 455, 788, 496], [971, 612, 1000, 631], [689, 425, 781, 496], [635, 397, 734, 458], [372, 614, 402, 631], [727, 458, 773, 485], [989, 623, 1072, 677], [987, 611, 1036, 639]]\n",
      "right [[271, 685, 575, 473], [339, 654, 649, 421], [577, 472, 673, 418], [618, 453, 660, 420], [271, 641, 295, 626], [318, 668, 332, 659], [384, 632, 443, 592], [542, 470, 634, 403], [475, 553, 651, 421], [349, 645, 372, 629], [421, 604, 445, 590], [330, 659, 352, 644], [371, 629, 448, 584], [273, 641, 297, 626], [384, 630, 424, 606], [434, 572, 449, 560], [413, 598, 436, 580]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 798 0\n",
      "tempsfdvdvdfv 1592 1\n",
      "tempsfdvdvdfv 2207 2\n",
      "tempsfdvdvdfv 2929 3\n",
      "tempsfdvdvdfv 4007 4\n",
      "tempsfdvdvdfv 4799 5\n",
      "tempsfdvdvdfv 5525 6\n",
      "tempsfdvdvdfv 6622 7\n",
      "tempsfdvdvdfv 7269 8\n",
      "tempsfdvdvdfv 8058 9\n",
      "avg 10 28 771 805 488 509 471 526 540 500\n",
      "left [[728, 457, 798, 501], [744, 470, 794, 499], [596, 408, 615, 419], [691, 425, 722, 445], [1033, 649, 1078, 676], [769, 488, 792, 502], [679, 422, 726, 451], [1073, 659, 1097, 674], [621, 408, 647, 423], [779, 495, 789, 501]]\n",
      "right [[582, 469, 650, 418], [346, 632, 425, 578], [303, 681, 654, 417], [515, 514, 556, 485], [615, 435, 646, 412], [570, 482, 657, 417], [632, 446, 666, 420], [640, 443, 673, 418], [276, 685, 345, 633], [445, 564, 545, 492], [664, 435, 683, 422], [643, 442, 672, 420], [651, 439, 674, 422], [442, 566, 475, 541], [587, 440, 629, 414], [325, 683, 368, 655], [323, 683, 387, 633], [204, 550, 216, 541], [482, 537, 496, 526], [624, 433, 650, 414], [623, 433, 642, 419], [375, 613, 507, 518], [358, 625, 404, 591], [517, 426, 534, 413], [298, 684, 326, 662], [631, 431, 651, 416], [201, 683, 216, 672], [320, 683, 393, 632]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 809 0\n",
      "tempsfdvdvdfv 1472 1\n",
      "tempsfdvdvdfv 2358 2\n",
      "tempsfdvdvdfv 3161 3\n",
      "tempsfdvdvdfv 3970 4\n",
      "tempsfdvdvdfv 4605 5\n",
      "tempsfdvdvdfv 5276 6\n",
      "tempsfdvdvdfv 6081 7\n",
      "tempsfdvdvdfv 6889 8\n",
      "tempsfdvdvdfv 7500 9\n",
      "tempsfdvdvdfv 8304 10\n",
      "avg 11 16 699 754 454 488 445 532 563 501\n",
      "left [[670, 419, 809, 509], [627, 412, 663, 432], [876, 554, 886, 560], [777, 494, 803, 509], [733, 463, 809, 507], [589, 413, 635, 445], [617, 397, 671, 430], [747, 474, 805, 509], [729, 459, 808, 509], [555, 421, 611, 455], [772, 490, 804, 509]]\n",
      "right [[300, 684, 636, 431], [339, 639, 500, 523], [526, 505, 674, 419], [379, 611, 523, 507], [290, 674, 340, 637], [284, 678, 299, 666], [536, 498, 613, 450], [563, 445, 632, 400], [619, 452, 658, 423], [506, 527, 620, 447], [340, 638, 357, 625], [505, 521, 535, 499], [577, 442, 624, 404], [563, 482, 634, 431], [473, 553, 494, 536], [327, 663, 383, 620]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 819 0\n",
      "tempsfdvdvdfv 1489 1\n",
      "tempsfdvdvdfv 2303 2\n",
      "tempsfdvdvdfv 2975 3\n",
      "tempsfdvdvdfv 3796 4\n",
      "tempsfdvdvdfv 4480 5\n",
      "tempsfdvdvdfv 5048 6\n",
      "tempsfdvdvdfv 5965 7\n",
      "tempsfdvdvdfv 6781 8\n",
      "tempsfdvdvdfv 7436 9\n",
      "tempsfdvdvdfv 8258 10\n",
      "tempsfdvdvdfv 9078 11\n",
      "tempsfdvdvdfv 9564 12\n",
      "tempsfdvdvdfv 10092 13\n",
      "tempsfdvdvdfv 10511 14\n",
      "tempsfdvdvdfv 11016 15\n",
      "avg 16 12 640 688 453 485 416 495 587 529\n",
      "left [[667, 415, 819, 517], [619, 403, 670, 433], [786, 500, 814, 517], [618, 397, 672, 429], [751, 477, 821, 517], [664, 416, 684, 428], [482, 422, 568, 482], [907, 574, 917, 580], [778, 494, 816, 517], [622, 403, 655, 429], [732, 462, 822, 514], [790, 668, 820, 692], [471, 418, 486, 428], [481, 419, 528, 452], [407, 364, 419, 372], [466, 430, 505, 458]]\n",
      "right [[298, 684, 653, 417], [353, 629, 529, 502], [438, 578, 540, 501], [279, 684, 320, 651], [332, 644, 354, 627], [312, 658, 334, 641], [343, 636, 394, 598], [575, 477, 661, 423], [558, 483, 597, 458], [620, 433, 647, 413], [524, 507, 537, 497], [364, 635, 381, 623]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 838 0\n",
      "tempsfdvdvdfv 1670 1\n",
      "tempsfdvdvdfv 2347 2\n",
      "tempsfdvdvdfv 3086 3\n",
      "tempsfdvdvdfv 3746 4\n",
      "tempsfdvdvdfv 4574 5\n",
      "avg 6 18 705 762 448 484 456 537 574 516\n",
      "left [[756, 480, 838, 526], [787, 502, 832, 528], [603, 387, 677, 430], [675, 417, 739, 462], [602, 388, 660, 433], [808, 515, 828, 527]]\n",
      "right [[344, 650, 652, 418], [276, 684, 461, 550], [464, 548, 593, 461], [302, 683, 413, 599], [369, 618, 435, 569], [550, 495, 671, 416], [192, 551, 204, 543], [394, 395, 447, 361], [196, 550, 210, 541], [608, 458, 654, 430], [459, 553, 475, 541], [818, 694, 856, 670], [911, 717, 936, 703], [430, 574, 457, 553], [488, 531, 580, 469], [607, 422, 637, 398], [331, 660, 389, 617], [476, 549, 604, 456]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 852 0\n",
      "tempsfdvdvdfv 1694 1\n",
      "tempsfdvdvdfv 2549 2\n",
      "tempsfdvdvdfv 3375 3\n",
      "tempsfdvdvdfv 4048 4\n",
      "tempsfdvdvdfv 4779 5\n",
      "tempsfdvdvdfv 5802 6\n",
      "tempsfdvdvdfv 6658 7\n",
      "tempsfdvdvdfv 7507 8\n",
      "tempsfdvdvdfv 8232 9\n",
      "tempsfdvdvdfv 8725 10\n",
      "tempsfdvdvdfv 9390 11\n",
      "tempsfdvdvdfv 10234 12\n",
      "tempsfdvdvdfv 10980 13\n",
      "tempsfdvdvdfv 11524 14\n",
      "tempsfdvdvdfv 12549 15\n",
      "tempsfdvdvdfv 13134 16\n",
      "avg 17 17 718 772 475 511 409 477 596 546\n",
      "left [[806, 507, 852, 539], [685, 423, 842, 537], [826, 519, 855, 539], [814, 518, 826, 527], [601, 387, 673, 430], [691, 426, 731, 455], [1004, 634, 1023, 646], [736, 465, 856, 539], [737, 467, 849, 540], [698, 429, 725, 450], [474, 415, 493, 428], [615, 408, 665, 436], [761, 484, 844, 538], [727, 457, 746, 468], [506, 487, 544, 510], [1004, 629, 1025, 646], [526, 427, 585, 471]]\n",
      "right [[372, 614, 569, 476], [506, 528, 655, 416], [559, 484, 578, 470], [380, 624, 509, 524], [301, 684, 358, 641], [279, 685, 354, 627], [278, 685, 325, 648], [375, 612, 399, 596], [283, 680, 307, 661], [355, 642, 367, 634], [651, 440, 676, 423], [306, 680, 413, 597], [493, 537, 507, 527], [552, 493, 614, 451], [408, 602, 456, 564], [384, 607, 458, 552], [483, 545, 565, 479]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "  8%|▊         | 20/251 [00:00<00:05, 46.14it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 10%|▉         | 25/251 [00:00<00:04, 45.80it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 882 0\n",
      "tempsfdvdvdfv 1756 1\n",
      "tempsfdvdvdfv 2566 2\n",
      "tempsfdvdvdfv 3434 3\n",
      "tempsfdvdvdfv 4305 4\n",
      "avg 5 14 787 861 501 546 404 485 537 478\n",
      "left [[738, 468, 882, 554], [809, 516, 874, 555], [768, 490, 810, 514], [813, 514, 868, 554], [811, 518, 871, 555]]\n",
      "right [[299, 684, 645, 423], [275, 685, 470, 544], [498, 526, 550, 489], [302, 683, 376, 627], [465, 549, 499, 524], [353, 439, 443, 376], [545, 500, 644, 423], [343, 440, 354, 432], [515, 515, 555, 486], [376, 499, 390, 491], [362, 439, 471, 366], [441, 566, 466, 547], [439, 433, 474, 409], [446, 572, 460, 562]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 913 0\n",
      "tempsfdvdvdfv 1816 1\n",
      "tempsfdvdvdfv 2598 2\n",
      "tempsfdvdvdfv 3355 3\n",
      "tempsfdvdvdfv 4231 4\n",
      "tempsfdvdvdfv 4982 5\n",
      "tempsfdvdvdfv 5738 6\n",
      "tempsfdvdvdfv 6473 7\n",
      "tempsfdvdvdfv 7375 8\n",
      "tempsfdvdvdfv 8109 9\n",
      "tempsfdvdvdfv 8780 10\n",
      "tempsfdvdvdfv 9693 11\n",
      "tempsfdvdvdfv 10428 12\n",
      "tempsfdvdvdfv 11100 13\n",
      "tempsfdvdvdfv 11775 14\n",
      "tempsfdvdvdfv 12552 15\n",
      "tempsfdvdvdfv 13154 16\n",
      "avg 17 15 734 773 464 488 451 541 553 490\n",
      "left [[838, 527, 913, 573], [824, 527, 903, 573], [740, 468, 782, 494], [730, 459, 757, 476], [832, 524, 876, 551], [673, 417, 751, 478], [730, 461, 756, 476], [664, 418, 735, 459], [857, 547, 902, 573], [687, 423, 734, 459], [654, 422, 671, 432], [894, 560, 913, 572], [721, 452, 735, 460], [656, 422, 672, 432], [658, 417, 675, 428], [740, 470, 777, 492], [589, 376, 602, 384]]\n",
      "right [[275, 685, 467, 546], [345, 649, 633, 432], [534, 500, 679, 419], [581, 473, 667, 417], [521, 509, 574, 479], [550, 489, 673, 418], [301, 684, 344, 650], [444, 564, 486, 533], [526, 514, 625, 434], [652, 440, 676, 424], [637, 446, 667, 425], [343, 651, 394, 613], [302, 683, 363, 637], [388, 399, 441, 362], [369, 616, 430, 574]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 954 0\n",
      "tempsfdvdvdfv 1745 1\n",
      "tempsfdvdvdfv 2686 2\n",
      "tempsfdvdvdfv 3362 3\n",
      "tempsfdvdvdfv 4301 4\n",
      "tempsfdvdvdfv 5247 5\n",
      "tempsfdvdvdfv 6036 6\n",
      "tempsfdvdvdfv 6687 7\n",
      "tempsfdvdvdfv 7187 8\n",
      "tempsfdvdvdfv 7620 9\n",
      "tempsfdvdvdfv 8058 10\n",
      "avg 11 31 655 732 462 510 455 507 528 492\n",
      "left [[850, 534, 954, 594], [669, 417, 791, 499], [840, 536, 941, 596], [576, 368, 676, 430], [841, 537, 939, 596], [886, 556, 946, 590], [746, 474, 789, 500], [614, 404, 651, 425], [429, 480, 500, 524], [378, 394, 433, 433], [378, 392, 438, 428]]\n",
      "right [[300, 683, 415, 594], [274, 683, 389, 602], [421, 591, 464, 557], [548, 495, 672, 417], [440, 564, 590, 463], [422, 577, 438, 567], [597, 460, 661, 417], [509, 524, 531, 509], [478, 547, 492, 538], [429, 572, 443, 563], [492, 537, 508, 526], [498, 524, 581, 468], [534, 505, 551, 494], [470, 553, 481, 546], [373, 612, 407, 589], [445, 561, 471, 544], [389, 406, 457, 368], [325, 646, 353, 627], [614, 455, 663, 417], [646, 442, 680, 423], [345, 439, 447, 365], [443, 573, 455, 565], [617, 454, 655, 430], [346, 631, 387, 603], [348, 439, 438, 374], [575, 477, 596, 460], [348, 436, 446, 362], [631, 448, 665, 424], [375, 398, 410, 370], [558, 489, 592, 462], [344, 648, 383, 620]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 670 0\n",
      "tempsfdvdvdfv 1680 1\n",
      "tempsfdvdvdfv 2673 2\n",
      "tempsfdvdvdfv 3661 3\n",
      "tempsfdvdvdfv 4217 4\n",
      "tempsfdvdvdfv 5013 5\n",
      "tempsfdvdvdfv 5576 6\n",
      "tempsfdvdvdfv 6494 7\n",
      "tempsfdvdvdfv 6926 8\n",
      "tempsfdvdvdfv 7851 9\n",
      "tempsfdvdvdfv 8505 10\n",
      "tempsfdvdvdfv 8938 11\n",
      "tempsfdvdvdfv 9499 12\n",
      "tempsfdvdvdfv 10460 13\n",
      "tempsfdvdvdfv 11052 14\n",
      "tempsfdvdvdfv 11691 15\n",
      "tempsfdvdvdfv 12626 16\n",
      "avg 17 12 675 742 485 532 400 489 558 494\n",
      "left [[576, 379, 670, 435], [909, 569, 1010, 629], [861, 548, 993, 630], [861, 549, 988, 628], [459, 414, 556, 490], [697, 430, 796, 507], [461, 412, 563, 486], [872, 548, 918, 576], [403, 559, 432, 582], [901, 565, 925, 580], [568, 370, 654, 439], [404, 558, 433, 581], [481, 427, 561, 487], [942, 589, 961, 601], [579, 370, 592, 378], [587, 395, 639, 433], [922, 577, 935, 586]]\n",
      "right [[330, 643, 567, 477], [297, 684, 651, 418], [270, 684, 356, 626], [555, 426, 599, 391], [492, 539, 648, 418], [293, 670, 321, 651], [556, 491, 598, 459], [272, 684, 290, 673], [340, 437, 376, 417], [600, 439, 632, 419], [436, 383, 459, 370], [363, 620, 380, 609]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 809 0\n",
      "tempsfdvdvdfv 1486 1\n",
      "tempsfdvdvdfv 2532 2\n",
      "tempsfdvdvdfv 3625 3\n",
      "tempsfdvdvdfv 4577 4\n",
      "tempsfdvdvdfv 5319 5\n",
      "tempsfdvdvdfv 5981 6\n",
      "tempsfdvdvdfv 6922 7\n",
      "tempsfdvdvdfv 7836 8\n",
      "tempsfdvdvdfv 8785 9\n",
      "tempsfdvdvdfv 9598 10\n",
      "tempsfdvdvdfv 10529 11\n",
      "tempsfdvdvdfv 11492 12\n",
      "tempsfdvdvdfv 12159 13\n",
      "tempsfdvdvdfv 13227 14\n",
      "tempsfdvdvdfv 13834 15\n",
      "tempsfdvdvdfv 14645 16\n",
      "tempsfdvdvdfv 15214 17\n",
      "tempsfdvdvdfv 15956 18\n",
      "avg 19 20 776 839 499 539 401 496 535 467\n",
      "left [[750, 478, 809, 515], [553, 357, 677, 431], [973, 619, 1046, 662], [976, 610, 1093, 675], [900, 565, 952, 594], [669, 416, 742, 466], [579, 389, 662, 437], [890, 564, 941, 599], [888, 566, 914, 583], [936, 595, 949, 604], [726, 458, 813, 513], [888, 564, 931, 594], [943, 599, 963, 613], [566, 370, 667, 436], [1041, 660, 1068, 676], [573, 379, 607, 398], [678, 419, 811, 515], [494, 429, 569, 481], [724, 456, 742, 467]]\n",
      "right [[533, 501, 577, 471], [298, 684, 651, 418], [398, 596, 519, 509], [274, 684, 394, 597], [528, 503, 679, 419], [437, 569, 547, 490], [301, 681, 644, 422], [532, 453, 607, 395], [519, 456, 596, 394], [349, 439, 462, 366], [334, 437, 458, 366], [369, 582, 379, 575], [386, 604, 420, 579], [557, 427, 593, 398], [194, 550, 204, 543], [364, 582, 374, 574], [353, 439, 371, 427], [353, 628, 407, 588], [336, 440, 398, 403], [610, 458, 655, 422]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1075 0\n",
      "tempsfdvdvdfv 2142 1\n",
      "tempsfdvdvdfv 3125 2\n",
      "tempsfdvdvdfv 4147 3\n",
      "tempsfdvdvdfv 4969 4\n",
      "tempsfdvdvdfv 5650 5\n",
      "tempsfdvdvdfv 6661 6\n",
      "tempsfdvdvdfv 7484 7\n",
      "tempsfdvdvdfv 8419 8\n",
      "tempsfdvdvdfv 9509 9\n",
      "tempsfdvdvdfv 10281 10\n",
      "tempsfdvdvdfv 11346 11\n",
      "tempsfdvdvdfv 12330 12\n",
      "tempsfdvdvdfv 12744 13\n",
      "tempsfdvdvdfv 13833 14\n",
      "tempsfdvdvdfv 14606 15\n",
      "tempsfdvdvdfv 15381 16\n",
      "tempsfdvdvdfv 16391 17\n",
      "avg 18 28 846 910 537 580 433 487 549 511\n",
      "left [[1009, 640, 1075, 677], [949, 592, 1067, 662], [923, 586, 983, 625], [939, 587, 1022, 636], [673, 419, 822, 523], [617, 391, 681, 430], [988, 626, 1011, 641], [685, 423, 823, 523], [923, 588, 935, 596], [1077, 666, 1090, 675], [690, 427, 772, 493], [1013, 641, 1065, 677], [934, 585, 984, 625], [404, 369, 414, 375], [1006, 624, 1089, 675], [722, 448, 773, 488], [687, 423, 775, 494], [998, 632, 1010, 640]]\n",
      "right [[628, 433, 651, 417], [618, 435, 644, 417], [325, 645, 422, 579], [514, 512, 672, 424], [586, 471, 661, 417], [300, 682, 348, 644], [478, 548, 581, 468], [422, 591, 481, 544], [345, 648, 366, 631], [475, 539, 568, 476], [450, 557, 513, 514], [293, 670, 327, 644], [435, 568, 497, 533], [278, 681, 303, 661], [369, 629, 415, 596], [339, 436, 386, 402], [427, 432, 463, 404], [403, 591, 437, 568], [446, 560, 459, 552], [577, 481, 665, 417], [206, 547, 216, 539], [594, 466, 661, 421], [330, 440, 393, 401], [417, 593, 429, 585], [454, 565, 466, 557], [273, 683, 299, 665], [652, 440, 682, 423], [494, 534, 650, 420]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1089 0\n",
      "tempsfdvdvdfv 2161 1\n",
      "tempsfdvdvdfv 2843 2\n",
      "tempsfdvdvdfv 3909 3\n",
      "tempsfdvdvdfv 4698 4\n",
      "tempsfdvdvdfv 5482 5\n",
      "tempsfdvdvdfv 6074 6\n",
      "tempsfdvdvdfv 6861 7\n",
      "tempsfdvdvdfv 7646 8\n",
      "tempsfdvdvdfv 8262 9\n",
      "tempsfdvdvdfv 9284 10\n",
      "tempsfdvdvdfv 10273 11\n",
      "tempsfdvdvdfv 11055 12\n",
      "tempsfdvdvdfv 12119 13\n",
      "tempsfdvdvdfv 12799 14\n",
      "tempsfdvdvdfv 13797 15\n",
      "tempsfdvdvdfv 14368 16\n",
      "tempsfdvdvdfv 14790 17\n",
      "avg 18 18 764 821 492 530 395 453 572 532\n",
      "left [[1002, 623, 1089, 675], [980, 624, 1072, 677], [623, 393, 682, 430], [987, 626, 1066, 677], [678, 419, 789, 499], [760, 484, 784, 499], [565, 372, 592, 389], [676, 419, 787, 499], [726, 458, 785, 499], [547, 355, 616, 398], [996, 620, 1022, 636], [969, 615, 989, 629], [772, 493, 782, 499], [972, 613, 1064, 677], [581, 371, 680, 431], [985, 614, 998, 622], [560, 367, 571, 374], [375, 406, 422, 433]]\n",
      "right [[344, 635, 531, 500], [298, 684, 444, 574], [411, 598, 587, 465], [630, 433, 652, 417], [585, 442, 625, 417], [275, 685, 340, 636], [562, 480, 672, 419], [256, 647, 278, 634], [318, 653, 356, 625], [537, 496, 561, 482], [275, 683, 296, 667], [636, 433, 661, 419], [324, 440, 372, 411], [338, 639, 380, 608], [253, 647, 278, 633], [567, 415, 584, 404], [254, 647, 275, 631], [252, 647, 266, 636]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 676 0\n",
      "tempsfdvdvdfv 1742 1\n",
      "tempsfdvdvdfv 2534 2\n",
      "tempsfdvdvdfv 3203 3\n",
      "tempsfdvdvdfv 3996 4\n",
      "tempsfdvdvdfv 4722 5\n",
      "tempsfdvdvdfv 5793 6\n",
      "tempsfdvdvdfv 6413 7\n",
      "tempsfdvdvdfv 7162 8\n",
      "tempsfdvdvdfv 7898 9\n",
      "tempsfdvdvdfv 8697 10\n",
      "tempsfdvdvdfv 9476 11\n",
      "tempsfdvdvdfv 10047 12\n",
      "tempsfdvdvdfv 11077 13\n",
      "tempsfdvdvdfv 11738 14\n",
      "tempsfdvdvdfv 12339 15\n",
      "tempsfdvdvdfv 12976 16\n",
      "tempsfdvdvdfv 13648 17\n",
      "tempsfdvdvdfv 14231 18\n",
      "tempsfdvdvdfv 15023 19\n",
      "avg 20 16 688 751 451 489 402 480 548 492\n",
      "left [[620, 394, 676, 430], [1039, 658, 1066, 675], [686, 423, 792, 500], [562, 371, 669, 435], [745, 473, 793, 505], [622, 392, 726, 450], [1035, 655, 1071, 676], [543, 351, 620, 397], [728, 459, 749, 473], [579, 369, 736, 460], [746, 472, 799, 503], [728, 458, 779, 490], [535, 422, 571, 444], [961, 675, 1030, 716], [569, 382, 661, 433], [534, 421, 601, 461], [569, 384, 637, 433], [649, 417, 672, 430], [544, 353, 583, 377], [780, 498, 792, 505]]\n",
      "right [[368, 615, 558, 482], [360, 636, 651, 416], [345, 632, 417, 581], [317, 669, 375, 626], [297, 668, 351, 628], [327, 440, 436, 361], [569, 444, 604, 416], [278, 681, 302, 663], [567, 424, 604, 401], [313, 672, 339, 654], [568, 482, 653, 425], [465, 556, 498, 530], [326, 440, 431, 361], [333, 439, 360, 419], [545, 426, 587, 396], [461, 548, 518, 516]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 676 0\n",
      "tempsfdvdvdfv 1453 1\n",
      "tempsfdvdvdfv 2263 2\n",
      "tempsfdvdvdfv 3066 3\n",
      "tempsfdvdvdfv 3726 4\n",
      "tempsfdvdvdfv 4392 5\n",
      "tempsfdvdvdfv 5059 6\n",
      "tempsfdvdvdfv 5795 7\n",
      "tempsfdvdvdfv 6596 8\n",
      "tempsfdvdvdfv 7260 9\n",
      "tempsfdvdvdfv 7925 10\n",
      "tempsfdvdvdfv 8536 11\n",
      "tempsfdvdvdfv 9000 12\n",
      "tempsfdvdvdfv 9809 13\n",
      "tempsfdvdvdfv 10616 14\n",
      "tempsfdvdvdfv 11226 15\n",
      "avg 16 25 629 701 416 461 420 491 551 502\n",
      "left [[561, 360, 676, 431], [674, 419, 777, 496], [730, 460, 810, 510], [780, 498, 803, 512], [569, 386, 660, 437], [651, 422, 666, 431], [541, 353, 667, 429], [625, 395, 736, 460], [790, 505, 801, 512], [533, 346, 664, 425], [643, 420, 665, 433], [554, 363, 611, 396], [448, 421, 464, 431], [687, 427, 809, 512], [774, 493, 807, 512], [519, 397, 610, 453]]\n",
      "right [[399, 605, 581, 468], [270, 685, 413, 582], [555, 489, 671, 419], [612, 457, 667, 419], [606, 437, 628, 420], [347, 630, 555, 484], [294, 685, 361, 636], [475, 538, 494, 526], [385, 616, 397, 608], [539, 501, 583, 467], [301, 682, 322, 666], [556, 492, 657, 418], [396, 398, 440, 365], [398, 606, 431, 582], [326, 437, 368, 406], [321, 649, 400, 593], [327, 437, 427, 365], [461, 548, 566, 477], [637, 445, 672, 424], [276, 682, 287, 675], [616, 455, 669, 424], [500, 530, 573, 473], [325, 662, 383, 619], [323, 437, 445, 367], [277, 681, 289, 673]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 12%|█▏        | 30/251 [00:00<00:04, 45.90it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 14%|█▍        | 35/251 [00:00<00:04, 46.02it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 824 0\n",
      "tempsfdvdvdfv 1638 1\n",
      "tempsfdvdvdfv 2291 2\n",
      "tempsfdvdvdfv 2721 3\n",
      "tempsfdvdvdfv 3450 4\n",
      "tempsfdvdvdfv 4268 5\n",
      "tempsfdvdvdfv 5084 6\n",
      "tempsfdvdvdfv 5908 7\n",
      "tempsfdvdvdfv 6725 8\n",
      "tempsfdvdvdfv 7259 9\n",
      "avg 10 10 651 725 433 481 349 458 569 492\n",
      "left [[734, 464, 824, 518], [779, 497, 814, 520], [551, 365, 653, 439], [414, 368, 430, 380], [535, 347, 729, 455], [693, 426, 818, 520], [724, 455, 816, 520], [783, 495, 824, 519], [785, 500, 817, 520], [520, 418, 534, 426]]\n",
      "right [[321, 647, 548, 488], [292, 685, 579, 469], [385, 601, 532, 498], [275, 682, 337, 636], [321, 439, 429, 361], [596, 465, 660, 419], [295, 684, 334, 655], [362, 408, 424, 373], [288, 672, 303, 660], [361, 409, 434, 363]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 673 0\n",
      "tempsfdvdvdfv 1485 1\n",
      "tempsfdvdvdfv 2326 2\n",
      "tempsfdvdvdfv 3157 3\n",
      "tempsfdvdvdfv 3996 4\n",
      "tempsfdvdvdfv 4661 5\n",
      "tempsfdvdvdfv 5177 6\n",
      "tempsfdvdvdfv 5824 7\n",
      "tempsfdvdvdfv 6266 8\n",
      "tempsfdvdvdfv 7107 9\n",
      "tempsfdvdvdfv 7552 10\n",
      "avg 11 10 585 686 410 478 365 527 580 463\n",
      "left [[572, 369, 673, 432], [687, 423, 812, 520], [735, 465, 841, 529], [788, 503, 831, 531], [680, 424, 839, 531], [531, 345, 665, 429], [396, 373, 516, 457], [598, 403, 647, 438], [390, 397, 442, 432], [676, 420, 841, 531], [389, 394, 445, 432]]\n",
      "right [[266, 685, 541, 493], [290, 685, 510, 520], [538, 502, 643, 423], [387, 599, 517, 508], [295, 683, 572, 475], [348, 417, 429, 362], [358, 409, 431, 365], [294, 683, 573, 473], [611, 458, 646, 433], [270, 684, 413, 581]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 675 0\n",
      "tempsfdvdvdfv 1406 1\n",
      "tempsfdvdvdfv 2266 2\n",
      "tempsfdvdvdfv 3116 3\n",
      "tempsfdvdvdfv 3770 4\n",
      "tempsfdvdvdfv 4437 5\n",
      "tempsfdvdvdfv 5467 6\n",
      "tempsfdvdvdfv 6186 7\n",
      "tempsfdvdvdfv 7046 8\n",
      "tempsfdvdvdfv 7602 9\n",
      "tempsfdvdvdfv 8134 10\n",
      "tempsfdvdvdfv 8810 11\n",
      "tempsfdvdvdfv 9837 12\n",
      "avg 13 18 682 756 452 500 445 524 528 471\n",
      "left [[528, 344, 675, 432], [678, 420, 731, 456], [748, 473, 860, 542], [736, 467, 850, 544], [560, 385, 654, 440], [638, 418, 667, 435], [1018, 648, 1030, 655], [703, 431, 719, 442], [736, 466, 860, 541], [410, 378, 556, 484], [491, 422, 532, 454], [610, 391, 676, 432], [1011, 645, 1027, 655]]\n",
      "right [[291, 685, 516, 516], [267, 685, 429, 571], [435, 565, 554, 485], [432, 580, 576, 472], [384, 601, 426, 573], [533, 506, 580, 470], [345, 418, 422, 362], [462, 546, 518, 508], [548, 490, 569, 476], [530, 511, 631, 435], [347, 415, 428, 362], [418, 577, 457, 551], [601, 463, 660, 419], [548, 496, 645, 423], [355, 622, 406, 587], [354, 409, 395, 377], [625, 435, 639, 424], [542, 500, 581, 470]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 675 0\n",
      "tempsfdvdvdfv 1528 1\n",
      "tempsfdvdvdfv 2407 2\n",
      "tempsfdvdvdfv 3294 3\n",
      "tempsfdvdvdfv 4171 4\n",
      "tempsfdvdvdfv 4747 5\n",
      "tempsfdvdvdfv 5370 6\n",
      "tempsfdvdvdfv 5917 7\n",
      "tempsfdvdvdfv 6555 8\n",
      "tempsfdvdvdfv 7204 9\n",
      "tempsfdvdvdfv 8090 10\n",
      "tempsfdvdvdfv 8806 11\n",
      "tempsfdvdvdfv 9667 12\n",
      "tempsfdvdvdfv 10346 13\n",
      "tempsfdvdvdfv 11192 14\n",
      "tempsfdvdvdfv 11868 15\n",
      "avg 16 16 656 741 421 476 455 530 543 488\n",
      "left [[528, 347, 675, 432], [679, 420, 853, 546], [743, 472, 879, 554], [820, 517, 887, 557], [812, 520, 877, 559], [526, 344, 576, 379], [560, 407, 623, 448], [534, 358, 547, 366], [526, 343, 638, 410], [527, 346, 649, 419], [835, 527, 886, 557], [701, 431, 716, 442], [778, 489, 861, 551], [635, 402, 679, 432], [678, 420, 846, 542], [619, 397, 676, 432]]\n",
      "right [[266, 684, 521, 506], [373, 621, 585, 467], [615, 456, 667, 420], [572, 480, 658, 418], [320, 663, 364, 628], [449, 554, 475, 537], [424, 583, 520, 513], [517, 510, 562, 480], [518, 521, 638, 424], [273, 680, 398, 590], [617, 428, 637, 413], [606, 461, 626, 446], [478, 535, 493, 524], [405, 377, 425, 362], [441, 561, 475, 536], [421, 575, 451, 553]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 919 0\n",
      "tempsfdvdvdfv 1820 1\n",
      "tempsfdvdvdfv 2674 2\n",
      "tempsfdvdvdfv 3347 3\n",
      "tempsfdvdvdfv 4206 4\n",
      "tempsfdvdvdfv 4960 5\n",
      "tempsfdvdvdfv 5613 6\n",
      "tempsfdvdvdfv 6516 7\n",
      "tempsfdvdvdfv 7194 8\n",
      "tempsfdvdvdfv 7768 9\n",
      "tempsfdvdvdfv 8527 10\n",
      "tempsfdvdvdfv 9400 11\n",
      "tempsfdvdvdfv 10186 12\n",
      "tempsfdvdvdfv 10860 13\n",
      "tempsfdvdvdfv 11437 14\n",
      "avg 15 19 687 762 453 502 427 479 541 504\n",
      "left [[836, 527, 919, 578], [828, 526, 901, 577], [678, 420, 854, 547], [567, 374, 673, 433], [784, 494, 859, 550], [686, 424, 754, 479], [571, 383, 653, 440], [882, 563, 903, 578], [617, 398, 678, 433], [487, 427, 574, 479], [722, 454, 759, 477], [830, 526, 873, 559], [721, 454, 786, 494], [618, 399, 674, 433], [490, 427, 577, 477]]\n",
      "right [[262, 685, 481, 532], [498, 530, 586, 467], [352, 638, 435, 574], [297, 679, 358, 632], [337, 633, 350, 625], [398, 435, 436, 407], [468, 542, 487, 528], [461, 556, 531, 500], [408, 596, 447, 565], [559, 488, 630, 435], [480, 534, 498, 521], [391, 436, 433, 409], [452, 553, 464, 544], [401, 377, 420, 362], [604, 438, 637, 419], [641, 444, 663, 430], [283, 685, 344, 644], [489, 536, 545, 491], [346, 505, 360, 497]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 677 0\n",
      "tempsfdvdvdfv 1639 1\n",
      "tempsfdvdvdfv 2430 2\n",
      "tempsfdvdvdfv 2991 3\n",
      "tempsfdvdvdfv 3716 4\n",
      "tempsfdvdvdfv 4511 5\n",
      "tempsfdvdvdfv 5451 6\n",
      "tempsfdvdvdfv 6389 7\n",
      "tempsfdvdvdfv 7177 8\n",
      "tempsfdvdvdfv 7836 9\n",
      "tempsfdvdvdfv 8695 10\n",
      "tempsfdvdvdfv 9561 11\n",
      "tempsfdvdvdfv 10439 12\n",
      "tempsfdvdvdfv 11234 13\n",
      "tempsfdvdvdfv 11954 14\n",
      "tempsfdvdvdfv 12909 15\n",
      "tempsfdvdvdfv 13575 16\n",
      "tempsfdvdvdfv 14455 17\n",
      "tempsfdvdvdfv 15094 18\n",
      "tempsfdvdvdfv 16045 19\n",
      "tempsfdvdvdfv 16696 20\n",
      "tempsfdvdvdfv 17433 21\n",
      "tempsfdvdvdfv 18031 22\n",
      "tempsfdvdvdfv 18594 23\n",
      "tempsfdvdvdfv 19486 24\n",
      "tempsfdvdvdfv 20372 25\n",
      "tempsfdvdvdfv 21331 26\n",
      "avg 27 22 727 790 464 504 447 508 562 522\n",
      "left [[605, 390, 677, 433], [849, 537, 962, 602], [744, 473, 791, 503], [515, 337, 561, 364], [687, 424, 725, 452], [674, 420, 795, 502], [922, 588, 940, 602], [844, 537, 938, 601], [673, 420, 788, 500], [544, 375, 659, 439], [845, 540, 859, 550], [852, 537, 866, 546], [858, 548, 878, 562], [682, 428, 795, 501], [702, 431, 720, 444], [890, 560, 955, 597], [603, 391, 666, 433], [859, 540, 880, 554], [545, 374, 639, 435], [866, 555, 951, 604], [531, 360, 651, 441], [675, 420, 737, 461], [522, 347, 598, 392], [520, 344, 563, 370], [873, 549, 892, 561], [849, 544, 886, 566], [921, 579, 959, 601]]\n",
      "right [[285, 685, 400, 601], [266, 685, 416, 576], [533, 504, 672, 420], [370, 622, 502, 526], [513, 511, 670, 420], [634, 447, 673, 425], [472, 538, 589, 473], [644, 443, 678, 424], [617, 455, 676, 420], [454, 550, 468, 542], [551, 488, 575, 473], [426, 569, 443, 559], [507, 524, 558, 483], [282, 685, 335, 650], [295, 663, 320, 644], [466, 542, 482, 533], [544, 491, 615, 451], [441, 559, 453, 552], [334, 634, 391, 595], [415, 577, 434, 565], [287, 685, 315, 665], [513, 512, 528, 501]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1019 0\n",
      "tempsfdvdvdfv 1691 1\n",
      "tempsfdvdvdfv 2690 2\n",
      "tempsfdvdvdfv 3310 3\n",
      "tempsfdvdvdfv 4115 4\n",
      "tempsfdvdvdfv 4854 5\n",
      "tempsfdvdvdfv 5533 6\n",
      "tempsfdvdvdfv 6091 7\n",
      "tempsfdvdvdfv 6767 8\n",
      "tempsfdvdvdfv 7669 9\n",
      "tempsfdvdvdfv 8620 10\n",
      "tempsfdvdvdfv 9181 11\n",
      "tempsfdvdvdfv 10124 12\n",
      "tempsfdvdvdfv 11124 13\n",
      "tempsfdvdvdfv 11863 14\n",
      "tempsfdvdvdfv 12497 15\n",
      "tempsfdvdvdfv 13262 16\n",
      "avg 17 26 700 780 450 499 462 519 550 510\n",
      "left [[878, 553, 1019, 637], [519, 339, 672, 434], [866, 553, 999, 639], [544, 384, 620, 437], [724, 458, 805, 507], [604, 389, 739, 464], [606, 387, 679, 434], [510, 335, 558, 364], [515, 341, 676, 434], [865, 555, 902, 577], [895, 574, 951, 607], [531, 354, 561, 372], [879, 554, 943, 593], [972, 620, 1000, 639], [723, 456, 739, 465], [605, 385, 634, 403], [674, 421, 765, 487]]\n",
      "right [[481, 543, 584, 469], [286, 685, 417, 587], [623, 437, 648, 421], [333, 634, 539, 495], [586, 443, 618, 419], [561, 483, 577, 473], [659, 440, 685, 425], [315, 684, 337, 667], [565, 486, 632, 436], [265, 686, 316, 646], [426, 582, 460, 556], [375, 604, 517, 509], [561, 449, 618, 403], [547, 497, 596, 462], [458, 559, 492, 534], [323, 641, 338, 632], [419, 586, 431, 578], [264, 684, 289, 665], [581, 476, 652, 421], [295, 661, 308, 653], [412, 591, 423, 584], [555, 450, 627, 398], [616, 456, 665, 426], [415, 590, 446, 566], [594, 441, 620, 425], [515, 518, 669, 418]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1084 0\n",
      "tempsfdvdvdfv 2139 1\n",
      "tempsfdvdvdfv 3198 2\n",
      "tempsfdvdvdfv 4283 3\n",
      "tempsfdvdvdfv 5058 4\n",
      "tempsfdvdvdfv 5799 5\n",
      "tempsfdvdvdfv 6529 6\n",
      "tempsfdvdvdfv 7457 7\n",
      "tempsfdvdvdfv 8430 8\n",
      "tempsfdvdvdfv 9153 9\n",
      "tempsfdvdvdfv 9822 10\n",
      "tempsfdvdvdfv 10764 11\n",
      "tempsfdvdvdfv 11483 12\n",
      "tempsfdvdvdfv 12503 13\n",
      "tempsfdvdvdfv 13114 14\n",
      "tempsfdvdvdfv 14104 15\n",
      "tempsfdvdvdfv 15042 16\n",
      "tempsfdvdvdfv 15816 17\n",
      "tempsfdvdvdfv 16271 18\n",
      "tempsfdvdvdfv 17243 19\n",
      "tempsfdvdvdfv 17867 20\n",
      "tempsfdvdvdfv 18537 21\n",
      "avg 22 27 753 842 504 559 446 507 558 516\n",
      "left [[908, 571, 1084, 676], [1014, 646, 1055, 672], [949, 606, 1059, 677], [956, 599, 1085, 676], [727, 461, 775, 489], [498, 331, 741, 466], [491, 325, 730, 458], [894, 573, 928, 593], [936, 676, 973, 705], [681, 420, 723, 450], [518, 343, 669, 434], [904, 580, 942, 602], [689, 425, 719, 445], [995, 634, 1020, 651], [539, 410, 611, 459], [940, 601, 990, 634], [894, 572, 938, 601], [607, 385, 774, 489], [434, 566, 455, 582], [930, 676, 972, 701], [515, 338, 624, 426], [565, 371, 670, 431]]\n",
      "right [[284, 685, 574, 475], [257, 686, 545, 492], [282, 686, 478, 544], [549, 491, 566, 480], [535, 504, 680, 420], [579, 480, 645, 428], [394, 593, 435, 564], [675, 434, 688, 425], [629, 437, 653, 421], [581, 481, 658, 421], [360, 585, 373, 577], [312, 684, 341, 667], [258, 686, 319, 645], [440, 562, 462, 546], [354, 585, 369, 576], [552, 493, 665, 427], [640, 428, 651, 421], [462, 547, 480, 534], [366, 612, 392, 593], [598, 440, 629, 422], [569, 479, 586, 468], [320, 682, 343, 667], [332, 674, 342, 667], [496, 523, 535, 498], [416, 578, 444, 558], [379, 603, 395, 591], [439, 433, 451, 424]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 667 0\n",
      "tempsfdvdvdfv 1751 1\n",
      "tempsfdvdvdfv 2412 2\n",
      "tempsfdvdvdfv 3194 3\n",
      "tempsfdvdvdfv 3972 4\n",
      "tempsfdvdvdfv 5034 5\n",
      "tempsfdvdvdfv 5711 6\n",
      "tempsfdvdvdfv 6775 7\n",
      "tempsfdvdvdfv 7770 8\n",
      "tempsfdvdvdfv 8712 9\n",
      "tempsfdvdvdfv 9783 10\n",
      "tempsfdvdvdfv 10611 11\n",
      "tempsfdvdvdfv 11367 12\n",
      "tempsfdvdvdfv 12150 13\n",
      "tempsfdvdvdfv 12702 14\n",
      "tempsfdvdvdfv 13472 15\n",
      "tempsfdvdvdfv 14527 16\n",
      "avg 17 30 778 854 496 543 467 521 548 511\n",
      "left [[510, 343, 667, 434], [946, 593, 1084, 676], [539, 361, 661, 434], [674, 421, 782, 494], [756, 482, 778, 496], [930, 595, 1062, 677], [605, 389, 677, 434], [931, 594, 1064, 677], [942, 592, 995, 623], [931, 596, 942, 603], [1014, 632, 1071, 667], [725, 458, 828, 527], [730, 462, 756, 483], [732, 462, 783, 494], [513, 339, 552, 362], [724, 458, 770, 492], [1036, 659, 1055, 671]]\n",
      "right [[535, 505, 655, 421], [281, 685, 408, 593], [615, 438, 636, 424], [425, 570, 553, 487], [448, 565, 482, 543], [260, 684, 378, 602], [580, 444, 634, 411], [610, 438, 631, 421], [381, 600, 405, 585], [647, 443, 678, 425], [387, 627, 417, 605], [492, 533, 508, 523], [403, 585, 420, 575], [334, 647, 483, 542], [257, 685, 342, 626], [643, 444, 677, 425], [509, 522, 549, 490], [527, 510, 563, 481], [311, 665, 333, 648], [465, 543, 536, 497], [574, 483, 663, 421], [559, 449, 636, 399], [438, 572, 486, 539], [293, 677, 308, 667], [560, 489, 591, 465], [511, 521, 556, 486], [585, 473, 612, 453], [283, 684, 296, 676], [536, 504, 573, 475], [577, 483, 628, 446]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1088 0\n",
      "tempsfdvdvdfv 1728 1\n",
      "tempsfdvdvdfv 2449 2\n",
      "tempsfdvdvdfv 3479 3\n",
      "tempsfdvdvdfv 4542 4\n",
      "tempsfdvdvdfv 5323 5\n",
      "tempsfdvdvdfv 6085 6\n",
      "tempsfdvdvdfv 6724 7\n",
      "tempsfdvdvdfv 7449 8\n",
      "tempsfdvdvdfv 8240 9\n",
      "tempsfdvdvdfv 8792 10\n",
      "tempsfdvdvdfv 9584 11\n",
      "tempsfdvdvdfv 10253 12\n",
      "tempsfdvdvdfv 11261 13\n",
      "tempsfdvdvdfv 11930 14\n",
      "tempsfdvdvdfv 12462 15\n",
      "tempsfdvdvdfv 13519 16\n",
      "tempsfdvdvdfv 14072 17\n",
      "tempsfdvdvdfv 14742 18\n",
      "tempsfdvdvdfv 15827 19\n",
      "tempsfdvdvdfv 16575 20\n",
      "avg 21 14 741 789 474 505 392 496 601 529\n",
      "left [[1000, 624, 1088, 676], [541, 386, 640, 445], [694, 427, 721, 447], [986, 630, 1030, 655], [1033, 657, 1063, 677], [688, 424, 781, 499], [684, 424, 762, 487], [551, 394, 639, 446], [679, 419, 725, 453], [726, 460, 791, 498], [535, 359, 552, 369], [744, 472, 792, 500], [623, 403, 669, 430], [998, 624, 1008, 630], [620, 405, 669, 434], [505, 336, 532, 352], [982, 624, 1057, 674], [535, 360, 553, 370], [655, 421, 670, 430], [1060, 659, 1085, 674], [732, 460, 748, 470]]\n",
      "right [[283, 684, 493, 532], [255, 685, 515, 510], [523, 505, 673, 418], [437, 574, 548, 491], [234, 651, 258, 636], [258, 684, 527, 503], [339, 661, 366, 641], [454, 563, 560, 484], [527, 509, 572, 484], [573, 487, 658, 421], [356, 646, 389, 620], [388, 609, 434, 575], [532, 507, 576, 473], [336, 658, 388, 619]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 16%|█▌        | 40/251 [00:00<00:04, 45.67it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 18%|█▊        | 45/251 [00:00<00:04, 46.32it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 803 0\n",
      "tempsfdvdvdfv 1476 1\n",
      "tempsfdvdvdfv 2273 2\n",
      "tempsfdvdvdfv 2941 3\n",
      "tempsfdvdvdfv 3616 4\n",
      "tempsfdvdvdfv 4338 5\n",
      "tempsfdvdvdfv 5133 6\n",
      "tempsfdvdvdfv 5786 7\n",
      "tempsfdvdvdfv 6315 8\n",
      "tempsfdvdvdfv 7061 9\n",
      "tempsfdvdvdfv 7787 10\n",
      "tempsfdvdvdfv 8845 11\n",
      "tempsfdvdvdfv 9913 12\n",
      "tempsfdvdvdfv 10462 13\n",
      "tempsfdvdvdfv 11263 14\n",
      "tempsfdvdvdfv 12310 15\n",
      "tempsfdvdvdfv 12976 16\n",
      "tempsfdvdvdfv 13611 17\n",
      "tempsfdvdvdfv 14281 18\n",
      "avg 19 17 690 751 443 483 387 470 579 525\n",
      "left [[746, 473, 803, 505], [620, 403, 673, 434], [746, 474, 797, 507], [605, 398, 668, 434], [575, 372, 675, 434], [686, 423, 722, 447], [685, 424, 795, 507], [492, 332, 653, 440], [495, 328, 529, 349], [727, 460, 746, 472], [690, 427, 726, 452], [1029, 657, 1058, 677], [1053, 668, 1068, 678], [503, 342, 549, 368], [679, 419, 801, 507], [1031, 657, 1047, 668], [638, 418, 666, 434], [518, 357, 635, 436], [608, 399, 670, 434]]\n",
      "right [[282, 685, 510, 520], [560, 487, 678, 419], [440, 559, 463, 545], [251, 686, 380, 602], [449, 553, 669, 416], [547, 496, 566, 485], [378, 603, 430, 566], [257, 685, 269, 677], [415, 588, 434, 577], [208, 543, 222, 535], [474, 545, 672, 416], [256, 685, 406, 584], [507, 516, 528, 502], [287, 681, 333, 647], [361, 438, 415, 408], [395, 590, 466, 543], [514, 518, 554, 486]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 811 0\n",
      "tempsfdvdvdfv 1454 1\n",
      "tempsfdvdvdfv 2269 2\n",
      "tempsfdvdvdfv 3025 3\n",
      "tempsfdvdvdfv 3839 4\n",
      "tempsfdvdvdfv 4646 5\n",
      "tempsfdvdvdfv 5286 6\n",
      "tempsfdvdvdfv 6009 7\n",
      "tempsfdvdvdfv 6819 8\n",
      "tempsfdvdvdfv 7632 9\n",
      "avg 10 26 697 763 445 489 428 485 557 518\n",
      "left [[775, 495, 811, 515], [500, 332, 643, 444], [730, 462, 815, 515], [630, 399, 756, 475], [785, 495, 814, 515], [774, 495, 807, 515], [577, 393, 640, 436], [677, 419, 723, 450], [800, 504, 810, 511], [730, 463, 813, 515]]\n",
      "right [[281, 685, 476, 544], [351, 620, 379, 602], [254, 685, 343, 627], [555, 491, 674, 425], [533, 501, 585, 468], [417, 576, 481, 532], [514, 429, 564, 399], [370, 607, 392, 593], [665, 434, 683, 424], [494, 430, 553, 396], [284, 684, 325, 655], [510, 429, 584, 375], [472, 548, 502, 526], [504, 526, 581, 471], [557, 496, 661, 421], [285, 683, 399, 603], [207, 543, 218, 536], [323, 639, 346, 625], [447, 566, 472, 547], [399, 587, 414, 578], [555, 495, 649, 427], [355, 633, 377, 616], [256, 685, 369, 609], [545, 493, 555, 486], [603, 439, 622, 425], [397, 589, 427, 568]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 683 0\n",
      "tempsfdvdvdfv 1506 1\n",
      "tempsfdvdvdfv 2311 2\n",
      "tempsfdvdvdfv 2952 3\n",
      "tempsfdvdvdfv 3603 4\n",
      "tempsfdvdvdfv 4259 5\n",
      "tempsfdvdvdfv 4927 6\n",
      "tempsfdvdvdfv 5748 7\n",
      "tempsfdvdvdfv 6578 8\n",
      "tempsfdvdvdfv 7100 9\n",
      "tempsfdvdvdfv 7855 10\n",
      "tempsfdvdvdfv 8529 11\n",
      "tempsfdvdvdfv 9459 12\n",
      "tempsfdvdvdfv 10094 13\n",
      "tempsfdvdvdfv 10916 14\n",
      "tempsfdvdvdfv 11846 15\n",
      "tempsfdvdvdfv 12530 16\n",
      "tempsfdvdvdfv 13358 17\n",
      "tempsfdvdvdfv 14184 18\n",
      "tempsfdvdvdfv 14736 19\n",
      "tempsfdvdvdfv 15241 20\n",
      "tempsfdvdvdfv 15642 21\n",
      "tempsfdvdvdfv 16210 22\n",
      "tempsfdvdvdfv 16880 23\n",
      "tempsfdvdvdfv 17520 24\n",
      "tempsfdvdvdfv 18200 25\n",
      "avg 26 27 636 700 421 463 469 528 542 501\n",
      "left [[627, 401, 683, 434], [731, 462, 823, 519], [678, 420, 805, 515], [487, 325, 641, 445], [516, 361, 651, 442], [492, 333, 656, 435], [616, 404, 668, 435], [782, 500, 821, 524], [818, 515, 830, 522], [490, 328, 522, 347], [672, 416, 755, 481], [621, 402, 674, 435], [918, 586, 930, 593], [551, 392, 635, 444], [783, 500, 822, 524], [919, 585, 930, 592], [629, 399, 684, 434], [667, 417, 828, 522], [732, 465, 826, 524], [506, 464, 552, 499], [495, 327, 505, 334], [391, 378, 401, 385], [491, 325, 568, 379], [650, 421, 670, 435], [610, 407, 640, 424], [665, 420, 680, 429]]\n",
      "right [[629, 438, 656, 421], [491, 528, 572, 476], [260, 684, 386, 596], [326, 652, 655, 421], [621, 454, 671, 421], [443, 559, 484, 531], [381, 601, 426, 569], [580, 477, 660, 421], [281, 685, 362, 628], [599, 440, 625, 421], [283, 685, 350, 640], [606, 439, 625, 425], [416, 577, 435, 563], [519, 517, 657, 421], [617, 439, 639, 422], [623, 452, 673, 420], [393, 592, 408, 581], [607, 430, 621, 419], [369, 609, 385, 597], [275, 686, 335, 651], [496, 427, 577, 370], [463, 555, 511, 521], [430, 577, 464, 554], [287, 685, 339, 643], [489, 529, 500, 521], [625, 448, 674, 420], [561, 484, 582, 470]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 844 0\n",
      "tempsfdvdvdfv 1513 1\n",
      "tempsfdvdvdfv 2179 2\n",
      "tempsfdvdvdfv 2681 3\n",
      "tempsfdvdvdfv 3520 4\n",
      "tempsfdvdvdfv 4360 5\n",
      "tempsfdvdvdfv 5015 6\n",
      "tempsfdvdvdfv 5651 7\n",
      "tempsfdvdvdfv 6418 8\n",
      "tempsfdvdvdfv 7138 9\n",
      "tempsfdvdvdfv 7823 10\n",
      "tempsfdvdvdfv 8800 11\n",
      "tempsfdvdvdfv 9427 12\n",
      "tempsfdvdvdfv 10274 13\n",
      "tempsfdvdvdfv 11014 14\n",
      "tempsfdvdvdfv 11560 15\n",
      "tempsfdvdvdfv 12404 16\n",
      "tempsfdvdvdfv 12960 17\n",
      "tempsfdvdvdfv 13381 18\n",
      "tempsfdvdvdfv 13953 19\n",
      "tempsfdvdvdfv 14720 20\n",
      "avg 21 23 631 700 433 478 432 490 569 530\n",
      "left [[760, 483, 844, 530], [488, 331, 669, 435], [491, 334, 666, 435], [490, 325, 502, 332], [792, 506, 839, 535], [793, 506, 840, 535], [491, 335, 655, 441], [506, 356, 636, 443], [727, 459, 767, 482], [708, 434, 720, 442], [628, 397, 685, 434], [964, 614, 977, 623], [491, 337, 627, 447], [831, 523, 847, 533], [726, 457, 740, 465], [536, 500, 546, 506], [799, 504, 844, 534], [514, 460, 556, 487], [397, 421, 421, 435], [470, 410, 572, 481], [669, 417, 767, 483]]\n",
      "right [[337, 644, 538, 503], [321, 640, 403, 586], [458, 548, 667, 417], [487, 539, 656, 421], [259, 686, 332, 633], [376, 603, 418, 576], [613, 454, 667, 422], [557, 491, 665, 426], [607, 439, 650, 408], [627, 429, 648, 415], [446, 556, 503, 521], [634, 448, 667, 426], [350, 635, 374, 619], [433, 566, 443, 558], [419, 575, 429, 567], [280, 685, 296, 676], [565, 447, 628, 398], [328, 651, 342, 642], [319, 643, 331, 634], [424, 572, 438, 561], [258, 684, 288, 663], [346, 638, 356, 632], [500, 522, 533, 502]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 678 0\n",
      "tempsfdvdvdfv 1343 1\n",
      "tempsfdvdvdfv 1881 2\n",
      "tempsfdvdvdfv 2547 3\n",
      "tempsfdvdvdfv 3406 4\n",
      "tempsfdvdvdfv 3944 5\n",
      "tempsfdvdvdfv 4481 6\n",
      "tempsfdvdvdfv 5096 7\n",
      "tempsfdvdvdfv 5840 8\n",
      "tempsfdvdvdfv 6461 9\n",
      "tempsfdvdvdfv 7142 10\n",
      "tempsfdvdvdfv 8190 11\n",
      "tempsfdvdvdfv 9021 12\n",
      "tempsfdvdvdfv 9887 13\n",
      "tempsfdvdvdfv 10572 14\n",
      "tempsfdvdvdfv 11624 15\n",
      "tempsfdvdvdfv 12196 16\n",
      "tempsfdvdvdfv 12876 17\n",
      "tempsfdvdvdfv 13541 18\n",
      "avg 19 19 635 712 418 465 471 539 519 472\n",
      "left [[566, 370, 678, 435], [481, 334, 665, 436], [482, 326, 538, 359], [584, 389, 666, 436], [803, 514, 859, 548], [484, 330, 538, 360], [484, 331, 537, 361], [511, 372, 615, 453], [728, 459, 744, 468], [519, 374, 621, 454], [570, 366, 681, 435], [1028, 653, 1048, 666], [810, 518, 831, 530], [766, 487, 866, 543], [622, 396, 685, 435], [1030, 651, 1052, 666], [505, 355, 572, 399], [570, 371, 680, 435], [532, 346, 665, 423]]\n",
      "right [[472, 551, 662, 418], [283, 685, 459, 558], [255, 686, 454, 552], [576, 479, 674, 420], [447, 557, 672, 416], [441, 572, 465, 554], [520, 377, 541, 365], [287, 682, 312, 663], [613, 440, 646, 414], [393, 606, 474, 548], [516, 378, 536, 366], [634, 429, 650, 417], [515, 376, 538, 362], [461, 558, 487, 539], [611, 430, 621, 422], [601, 440, 643, 407], [444, 559, 472, 542], [349, 636, 365, 625], [532, 426, 588, 385]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 678 0\n",
      "tempsfdvdvdfv 1575 1\n",
      "tempsfdvdvdfv 2236 2\n",
      "tempsfdvdvdfv 3119 3\n",
      "tempsfdvdvdfv 3973 4\n",
      "tempsfdvdvdfv 4590 5\n",
      "tempsfdvdvdfv 5423 6\n",
      "tempsfdvdvdfv 6314 7\n",
      "tempsfdvdvdfv 6856 8\n",
      "tempsfdvdvdfv 7671 9\n",
      "tempsfdvdvdfv 8311 10\n",
      "tempsfdvdvdfv 8934 11\n",
      "tempsfdvdvdfv 9714 12\n",
      "tempsfdvdvdfv 10559 13\n",
      "tempsfdvdvdfv 11189 14\n",
      "avg 15 23 651 745 428 493 394 463 596 550\n",
      "left [[563, 369, 678, 435], [823, 519, 897, 563], [480, 327, 661, 431], [778, 490, 883, 563], [818, 519, 854, 545], [486, 350, 617, 456], [672, 419, 833, 532], [833, 524, 891, 557], [520, 411, 542, 428], [679, 419, 815, 521], [477, 327, 640, 446], [510, 367, 623, 449], [739, 469, 780, 492], [816, 521, 845, 538], [573, 400, 630, 446]]\n",
      "right [[282, 685, 367, 625], [346, 624, 669, 414], [421, 585, 671, 416], [369, 622, 458, 561], [326, 639, 360, 615], [258, 685, 299, 656], [326, 653, 351, 636], [513, 521, 670, 415], [668, 436, 679, 429], [354, 633, 374, 620], [406, 584, 560, 484], [599, 440, 618, 426], [262, 686, 311, 648], [251, 686, 285, 667], [601, 430, 613, 421], [261, 686, 324, 639], [359, 616, 369, 610], [566, 486, 596, 462], [307, 652, 327, 637], [433, 577, 515, 523], [493, 535, 513, 522], [341, 642, 364, 627], [342, 627, 359, 617]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 932 0\n",
      "tempsfdvdvdfv 1774 1\n",
      "tempsfdvdvdfv 2555 2\n",
      "tempsfdvdvdfv 3472 3\n",
      "tempsfdvdvdfv 4254 4\n",
      "tempsfdvdvdfv 5107 5\n",
      "tempsfdvdvdfv 5754 6\n",
      "tempsfdvdvdfv 6375 7\n",
      "tempsfdvdvdfv 7033 8\n",
      "tempsfdvdvdfv 7708 9\n",
      "tempsfdvdvdfv 8326 10\n",
      "tempsfdvdvdfv 8962 11\n",
      "tempsfdvdvdfv 9839 12\n",
      "tempsfdvdvdfv 10557 13\n",
      "tempsfdvdvdfv 11239 14\n",
      "avg 15 14 665 749 434 489 464 596 545 457\n",
      "left [[839, 529, 932, 582], [832, 531, 842, 538], [672, 416, 781, 498], [883, 562, 917, 584], [685, 422, 782, 498], [832, 529, 853, 545], [586, 391, 647, 434], [454, 334, 621, 451], [585, 389, 658, 436], [563, 363, 675, 430], [529, 395, 618, 455], [513, 377, 636, 448], [835, 529, 877, 560], [643, 402, 718, 446], [526, 346, 682, 436]]\n",
      "right [[281, 685, 668, 414], [258, 685, 425, 573], [259, 685, 493, 528], [513, 515, 673, 426], [531, 503, 680, 420], [568, 486, 665, 418], [284, 684, 664, 418], [492, 530, 522, 509], [558, 487, 662, 417], [645, 444, 681, 420], [567, 447, 603, 420], [456, 554, 483, 535], [547, 428, 561, 419], [541, 498, 566, 481]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 665 0\n",
      "tempsfdvdvdfv 1628 1\n",
      "tempsfdvdvdfv 2607 2\n",
      "tempsfdvdvdfv 3405 3\n",
      "tempsfdvdvdfv 4309 4\n",
      "tempsfdvdvdfv 4949 5\n",
      "tempsfdvdvdfv 5929 6\n",
      "tempsfdvdvdfv 6574 7\n",
      "tempsfdvdvdfv 7204 8\n",
      "tempsfdvdvdfv 7849 9\n",
      "tempsfdvdvdfv 8642 10\n",
      "tempsfdvdvdfv 9592 11\n",
      "tempsfdvdvdfv 10172 12\n",
      "tempsfdvdvdfv 11049 13\n",
      "tempsfdvdvdfv 11708 14\n",
      "tempsfdvdvdfv 12359 15\n",
      "tempsfdvdvdfv 12942 16\n",
      "tempsfdvdvdfv 13803 17\n",
      "tempsfdvdvdfv 14466 18\n",
      "tempsfdvdvdfv 15068 19\n",
      "tempsfdvdvdfv 15828 20\n",
      "tempsfdvdvdfv 16475 21\n",
      "tempsfdvdvdfv 17128 22\n",
      "tempsfdvdvdfv 18103 23\n",
      "tempsfdvdvdfv 18689 24\n",
      "avg 25 14 672 747 439 487 402 501 565 498\n",
      "left [[471, 325, 665, 437], [872, 557, 963, 612], [863, 542, 979, 611], [734, 463, 798, 503], [864, 552, 904, 575], [478, 333, 640, 446], [892, 558, 980, 611], [555, 383, 645, 437], [461, 344, 630, 450], [609, 421, 645, 445], [747, 476, 793, 504], [929, 590, 950, 605], [470, 326, 580, 400], [851, 542, 877, 559], [556, 362, 659, 437], [469, 325, 651, 434], [559, 359, 583, 373], [851, 543, 861, 550], [645, 422, 663, 432], [580, 383, 602, 396], [734, 465, 760, 480], [550, 375, 647, 445], [629, 423, 653, 437], [957, 596, 975, 607], [474, 333, 586, 398]]\n",
      "right [[261, 685, 529, 505], [283, 686, 505, 530], [365, 616, 574, 476], [521, 517, 671, 416], [548, 494, 582, 471], [343, 441, 380, 414], [339, 441, 384, 409], [448, 569, 512, 525], [287, 684, 326, 657], [514, 522, 671, 420], [262, 684, 307, 653], [500, 685, 522, 671], [341, 441, 385, 408], [624, 454, 679, 420]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 670 0\n",
      "tempsfdvdvdfv 1674 1\n",
      "tempsfdvdvdfv 2720 2\n",
      "tempsfdvdvdfv 3528 3\n",
      "tempsfdvdvdfv 4283 4\n",
      "tempsfdvdvdfv 5193 5\n",
      "tempsfdvdvdfv 6261 6\n",
      "tempsfdvdvdfv 7243 7\n",
      "tempsfdvdvdfv 7884 8\n",
      "tempsfdvdvdfv 8806 9\n",
      "tempsfdvdvdfv 9433 10\n",
      "tempsfdvdvdfv 10465 11\n",
      "tempsfdvdvdfv 11270 12\n",
      "tempsfdvdvdfv 12244 13\n",
      "tempsfdvdvdfv 12888 14\n",
      "tempsfdvdvdfv 13975 15\n",
      "tempsfdvdvdfv 15003 16\n",
      "tempsfdvdvdfv 15601 17\n",
      "avg 18 17 785 866 508 560 398 483 551 493\n",
      "left [[554, 366, 670, 436], [874, 556, 1004, 637], [887, 556, 1046, 647], [638, 400, 808, 510], [726, 456, 755, 475], [875, 558, 910, 580], [981, 621, 1068, 677], [963, 610, 982, 623], [563, 395, 641, 446], [884, 555, 922, 577], [455, 336, 627, 448], [1019, 702, 1032, 711], [728, 459, 805, 511], [928, 589, 974, 618], [619, 427, 644, 441], [1031, 637, 1087, 676], [956, 606, 1028, 650], [459, 331, 598, 424]]\n",
      "right [[587, 469, 658, 418], [419, 590, 667, 416], [261, 685, 535, 501], [539, 500, 661, 418], [314, 667, 376, 621], [400, 604, 414, 595], [393, 565, 403, 559], [461, 552, 473, 543], [339, 440, 381, 408], [263, 685, 583, 470], [288, 684, 421, 590], [379, 619, 415, 594], [351, 435, 376, 420], [394, 568, 406, 561], [480, 368, 498, 358], [469, 366, 491, 353], [435, 579, 453, 567]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 20%|█▉        | 50/251 [00:01<00:05, 39.10it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1036 0\n",
      "tempsfdvdvdfv 1721 1\n",
      "tempsfdvdvdfv 2347 2\n",
      "tempsfdvdvdfv 3169 3\n",
      "tempsfdvdvdfv 4101 4\n",
      "tempsfdvdvdfv 5173 5\n",
      "tempsfdvdvdfv 5819 6\n",
      "tempsfdvdvdfv 6914 7\n",
      "tempsfdvdvdfv 7638 8\n",
      "tempsfdvdvdfv 8685 9\n",
      "tempsfdvdvdfv 9455 10\n",
      "tempsfdvdvdfv 10211 11\n",
      "tempsfdvdvdfv 11156 12\n",
      "tempsfdvdvdfv 11789 13\n",
      "tempsfdvdvdfv 12406 14\n",
      "avg 15 24 744 827 477 530 428 496 547 501\n",
      "left [[917, 574, 1036, 640], [558, 363, 685, 436], [451, 343, 626, 452], [642, 406, 822, 518], [905, 577, 932, 592], [1036, 654, 1072, 677], [576, 394, 646, 441], [1018, 632, 1095, 675], [709, 436, 724, 446], [1017, 642, 1047, 662], [678, 420, 770, 492], [694, 428, 756, 478], [920, 586, 945, 600], [484, 350, 633, 450], [560, 360, 617, 394]]\n",
      "right [[541, 505, 666, 415], [364, 631, 474, 553], [265, 685, 587, 468], [580, 481, 675, 420], [484, 544, 538, 507], [288, 685, 344, 647], [261, 686, 560, 485], [660, 438, 682, 424], [355, 587, 369, 579], [451, 568, 478, 550], [363, 632, 385, 617], [346, 644, 366, 631], [308, 522, 330, 509], [576, 476, 626, 439], [339, 649, 352, 641], [502, 531, 665, 421], [623, 430, 650, 414], [320, 518, 339, 507], [509, 431, 575, 383], [483, 354, 508, 338], [355, 590, 371, 581], [304, 675, 316, 667], [341, 434, 377, 410], [662, 438, 673, 431]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1044 0\n",
      "tempsfdvdvdfv 1681 1\n",
      "tempsfdvdvdfv 2753 2\n",
      "tempsfdvdvdfv 3489 3\n",
      "tempsfdvdvdfv 4161 4\n",
      "tempsfdvdvdfv 4781 5\n",
      "tempsfdvdvdfv 5873 6\n",
      "tempsfdvdvdfv 6562 7\n",
      "tempsfdvdvdfv 7210 8\n",
      "tempsfdvdvdfv 7996 9\n",
      "tempsfdvdvdfv 8612 10\n",
      "tempsfdvdvdfv 9243 11\n",
      "tempsfdvdvdfv 10268 12\n",
      "tempsfdvdvdfv 10945 13\n",
      "tempsfdvdvdfv 11618 14\n",
      "tempsfdvdvdfv 12402 15\n",
      "tempsfdvdvdfv 13181 16\n",
      "tempsfdvdvdfv 13909 17\n",
      "tempsfdvdvdfv 14522 18\n",
      "tempsfdvdvdfv 15571 19\n",
      "tempsfdvdvdfv 16304 20\n",
      "tempsfdvdvdfv 16979 21\n",
      "tempsfdvdvdfv 17653 22\n",
      "tempsfdvdvdfv 18694 23\n",
      "tempsfdvdvdfv 19763 24\n",
      "tempsfdvdvdfv 20510 25\n",
      "tempsfdvdvdfv 21189 26\n",
      "tempsfdvdvdfv 21748 27\n",
      "tempsfdvdvdfv 22369 28\n",
      "avg 29 14 683 771 444 502 421 529 566 490\n",
      "left [[960, 599, 1044, 647], [463, 327, 637, 444], [945, 601, 1072, 677], [669, 420, 736, 460], [562, 376, 672, 437], [445, 338, 620, 456], [1033, 639, 1092, 674], [619, 393, 689, 436], [549, 364, 648, 444], [743, 470, 786, 495], [452, 325, 616, 457], [471, 325, 631, 450], [993, 617, 1025, 636], [550, 359, 677, 430], [577, 382, 673, 437], [743, 471, 784, 497], [767, 490, 779, 497], [669, 414, 728, 452], [557, 424, 613, 459], [990, 627, 1049, 663], [676, 420, 733, 457], [580, 380, 675, 437], [640, 410, 674, 430], [1030, 638, 1041, 645], [1017, 643, 1069, 675], [663, 417, 747, 470], [553, 362, 679, 437], [452, 332, 559, 404], [451, 327, 621, 455]]\n",
      "right [[291, 685, 664, 414], [265, 685, 443, 565], [290, 685, 526, 514], [573, 481, 671, 420], [468, 546, 594, 464], [413, 584, 467, 548], [302, 617, 322, 605], [304, 620, 325, 608], [551, 498, 663, 411], [445, 562, 532, 505], [578, 482, 666, 415], [578, 485, 658, 427], [208, 550, 231, 537], [628, 451, 654, 433]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1075 0\n",
      "tempsfdvdvdfv 1745 1\n",
      "tempsfdvdvdfv 2539 2\n",
      "tempsfdvdvdfv 3268 3\n",
      "tempsfdvdvdfv 3897 4\n",
      "tempsfdvdvdfv 4587 5\n",
      "tempsfdvdvdfv 5260 6\n",
      "tempsfdvdvdfv 6048 7\n",
      "tempsfdvdvdfv 6839 8\n",
      "tempsfdvdvdfv 7492 9\n",
      "tempsfdvdvdfv 8130 10\n",
      "tempsfdvdvdfv 8925 11\n",
      "tempsfdvdvdfv 9556 12\n",
      "tempsfdvdvdfv 10191 13\n",
      "tempsfdvdvdfv 10842 14\n",
      "tempsfdvdvdfv 11521 15\n",
      "tempsfdvdvdfv 12168 16\n",
      "avg 17 13 615 715 408 469 373 477 584 511\n",
      "left [[1000, 635, 1075, 678], [505, 338, 670, 437], [678, 419, 794, 503], [696, 428, 729, 453], [477, 364, 629, 451], [638, 406, 690, 437], [633, 408, 673, 431], [767, 490, 788, 503], [662, 413, 791, 503], [469, 332, 653, 434], [455, 339, 638, 444], [778, 490, 795, 503], [515, 382, 631, 447], [455, 341, 635, 445], [551, 372, 651, 434], [637, 413, 679, 437], [549, 372, 647, 441]]\n",
      "right [[336, 637, 582, 471], [291, 685, 663, 415], [268, 684, 288, 670], [413, 584, 563, 483], [391, 612, 512, 524], [321, 442, 367, 409], [590, 444, 639, 407], [196, 683, 264, 641], [539, 506, 671, 420], [284, 674, 304, 659], [322, 648, 344, 632], [574, 482, 668, 414], [331, 514, 342, 507]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 800 0\n",
      "tempsfdvdvdfv 1451 1\n",
      "tempsfdvdvdfv 2256 2\n",
      "tempsfdvdvdfv 2876 3\n",
      "tempsfdvdvdfv 3667 4\n",
      "tempsfdvdvdfv 4290 5\n",
      "tempsfdvdvdfv 5045 6\n",
      "tempsfdvdvdfv 5846 7\n",
      "avg 8 14 635 730 415 480 434 511 566 511\n",
      "left [[782, 500, 800, 510], [549, 377, 651, 434], [680, 422, 805, 509], [457, 338, 620, 452], [682, 421, 791, 506], [453, 331, 623, 450], [731, 461, 755, 475], [749, 475, 801, 505]]\n",
      "right [[292, 685, 660, 418], [269, 685, 467, 547], [601, 462, 669, 420], [478, 541, 512, 517], [626, 439, 664, 412], [505, 523, 531, 504], [444, 564, 470, 545], [573, 478, 586, 469], [444, 592, 456, 584], [466, 549, 479, 539], [291, 685, 325, 663], [337, 639, 400, 594], [416, 436, 463, 408], [340, 652, 480, 547]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 679 0\n",
      "tempsfdvdvdfv 1496 1\n",
      "tempsfdvdvdfv 2255 2\n",
      "tempsfdvdvdfv 2865 3\n",
      "tempsfdvdvdfv 3450 4\n",
      "tempsfdvdvdfv 4086 5\n",
      "tempsfdvdvdfv 4825 6\n",
      "tempsfdvdvdfv 5349 7\n",
      "tempsfdvdvdfv 5933 8\n",
      "tempsfdvdvdfv 6550 9\n",
      "tempsfdvdvdfv 7117 10\n",
      "tempsfdvdvdfv 7860 11\n",
      "tempsfdvdvdfv 8508 12\n",
      "tempsfdvdvdfv 9181 13\n",
      "tempsfdvdvdfv 9818 14\n",
      "tempsfdvdvdfv 10391 15\n",
      "avg 16 28 554 649 385 448 430 492 541 499\n",
      "left [[542, 358, 679, 437], [754, 477, 817, 515], [735, 464, 759, 478], [461, 345, 610, 461], [442, 341, 585, 445], [458, 328, 636, 448], [727, 455, 739, 462], [479, 400, 524, 429], [486, 402, 584, 470], [465, 349, 617, 456], [539, 352, 567, 368], [727, 456, 743, 465], [501, 330, 648, 418], [609, 393, 673, 430], [440, 334, 637, 448], [500, 390, 573, 445]]\n",
      "right [[295, 684, 367, 631], [333, 639, 582, 471], [619, 456, 676, 419], [353, 640, 409, 600], [398, 594, 573, 476], [467, 556, 668, 420], [586, 474, 667, 420], [498, 534, 659, 421], [445, 572, 465, 559], [312, 654, 328, 644], [266, 685, 310, 657], [556, 497, 660, 413], [638, 448, 681, 420], [409, 599, 421, 591], [428, 369, 489, 328], [430, 583, 444, 574], [320, 442, 360, 418], [332, 640, 342, 634], [626, 453, 668, 426], [456, 564, 476, 551], [423, 588, 455, 566], [612, 460, 669, 420], [446, 347, 473, 328], [464, 342, 487, 328], [357, 623, 367, 617], [268, 685, 281, 677], [298, 664, 314, 654], [432, 374, 491, 331]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 22%|██▏       | 54/251 [00:01<00:05, 37.39it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 685 0\n",
      "tempsfdvdvdfv 1509 1\n",
      "tempsfdvdvdfv 2343 2\n",
      "tempsfdvdvdfv 2907 3\n",
      "tempsfdvdvdfv 3734 4\n",
      "tempsfdvdvdfv 4422 5\n",
      "tempsfdvdvdfv 5068 6\n",
      "tempsfdvdvdfv 5797 7\n",
      "tempsfdvdvdfv 6748 8\n",
      "tempsfdvdvdfv 7384 9\n",
      "tempsfdvdvdfv 8027 10\n",
      "tempsfdvdvdfv 8650 11\n",
      "tempsfdvdvdfv 9448 12\n",
      "tempsfdvdvdfv 10010 13\n",
      "tempsfdvdvdfv 10667 14\n",
      "tempsfdvdvdfv 11295 15\n",
      "tempsfdvdvdfv 11986 16\n",
      "tempsfdvdvdfv 12809 17\n",
      "tempsfdvdvdfv 13747 18\n",
      "avg 19 21 631 723 419 479 432 498 536 489\n",
      "left [[635, 409, 685, 438], [692, 428, 824, 527], [758, 481, 834, 525], [484, 326, 564, 374], [792, 507, 827, 527], [633, 406, 688, 438], [467, 326, 646, 442], [632, 402, 729, 456], [916, 676, 951, 704], [532, 379, 636, 449], [542, 382, 643, 445], [467, 357, 623, 454], [658, 414, 798, 505], [492, 328, 562, 375], [474, 325, 657, 439], [506, 353, 628, 441], [672, 426, 691, 438], [725, 448, 823, 527], [927, 591, 938, 598]]\n",
      "right [[347, 645, 664, 414], [268, 685, 409, 587], [614, 459, 670, 420], [436, 570, 453, 557], [394, 599, 443, 564], [341, 651, 368, 630], [497, 527, 583, 471], [295, 684, 328, 659], [456, 555, 490, 533], [427, 380, 496, 339], [617, 430, 637, 415], [312, 655, 391, 601], [475, 542, 499, 527], [324, 683, 371, 648], [552, 495, 654, 434], [321, 438, 357, 412], [455, 342, 471, 331], [383, 606, 402, 592], [546, 499, 657, 418], [429, 369, 493, 328], [583, 445, 633, 405]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 640 0\n",
      "tempsfdvdvdfv 1468 1\n",
      "tempsfdvdvdfv 2110 2\n",
      "tempsfdvdvdfv 2745 3\n",
      "tempsfdvdvdfv 3441 4\n",
      "tempsfdvdvdfv 4290 5\n",
      "tempsfdvdvdfv 4881 6\n",
      "tempsfdvdvdfv 5875 7\n",
      "tempsfdvdvdfv 6524 8\n",
      "tempsfdvdvdfv 7197 9\n",
      "tempsfdvdvdfv 8038 10\n",
      "tempsfdvdvdfv 8680 11\n",
      "tempsfdvdvdfv 9672 12\n",
      "tempsfdvdvdfv 10344 13\n",
      "tempsfdvdvdfv 10742 14\n",
      "tempsfdvdvdfv 11545 15\n",
      "avg 16 26 614 721 427 498 415 487 493 443\n",
      "left [[606, 427, 640, 446], [710, 437, 828, 529], [457, 325, 642, 445], [453, 335, 635, 448], [627, 393, 696, 437], [725, 453, 849, 537], [484, 332, 591, 402], [976, 618, 994, 629], [481, 325, 649, 438], [486, 325, 673, 437], [738, 465, 841, 537], [464, 327, 642, 443], [975, 620, 992, 630], [607, 390, 672, 429], [335, 638, 398, 680], [709, 437, 803, 513]]\n",
      "right [[625, 440, 663, 414], [379, 608, 543, 494], [268, 684, 413, 583], [351, 642, 461, 560], [295, 683, 316, 668], [455, 566, 658, 413], [191, 553, 212, 541], [440, 430, 537, 367], [428, 434, 509, 379], [297, 681, 387, 614], [539, 498, 549, 490], [451, 432, 563, 368], [448, 571, 480, 546], [418, 386, 493, 327], [306, 519, 323, 509], [414, 365, 477, 326], [466, 367, 506, 339], [470, 367, 510, 340], [422, 590, 460, 561], [429, 434, 538, 361], [422, 386, 490, 335], [602, 444, 628, 425], [383, 605, 435, 568], [422, 367, 479, 327], [459, 401, 542, 353], [419, 387, 490, 334]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 23%|██▎       | 58/251 [00:01<00:05, 35.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 864 0\n",
      "tempsfdvdvdfv 1738 1\n",
      "tempsfdvdvdfv 2609 2\n",
      "tempsfdvdvdfv 3221 3\n",
      "tempsfdvdvdfv 4041 4\n",
      "tempsfdvdvdfv 4714 5\n",
      "tempsfdvdvdfv 5266 6\n",
      "tempsfdvdvdfv 6334 7\n",
      "tempsfdvdvdfv 7104 8\n",
      "tempsfdvdvdfv 7686 9\n",
      "tempsfdvdvdfv 8547 10\n",
      "tempsfdvdvdfv 9048 11\n",
      "tempsfdvdvdfv 9733 12\n",
      "tempsfdvdvdfv 10602 13\n",
      "tempsfdvdvdfv 11161 14\n",
      "avg 15 13 663 744 445 496 426 539 567 488\n",
      "left [[826, 529, 864, 552], [741, 469, 874, 552], [812, 513, 871, 547], [421, 350, 612, 456], [697, 429, 820, 525], [629, 412, 673, 438], [481, 328, 552, 368], [1041, 661, 1068, 677], [693, 428, 770, 490], [470, 406, 582, 471], [807, 513, 861, 551], [417, 380, 501, 430], [658, 409, 685, 429], [819, 516, 869, 552], [445, 336, 559, 413]]\n",
      "right [[293, 684, 661, 416], [270, 684, 498, 525], [475, 550, 662, 414], [451, 559, 514, 514], [613, 442, 658, 410], [272, 682, 371, 613], [455, 565, 591, 466], [531, 504, 550, 491], [517, 512, 680, 421], [295, 683, 321, 665], [411, 587, 474, 542], [509, 519, 529, 504], [447, 406, 502, 363]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 600 0\n",
      "tempsfdvdvdfv 1482 1\n",
      "tempsfdvdvdfv 2036 2\n",
      "tempsfdvdvdfv 2865 3\n",
      "tempsfdvdvdfv 3358 4\n",
      "tempsfdvdvdfv 3910 5\n",
      "tempsfdvdvdfv 4457 6\n",
      "tempsfdvdvdfv 5301 7\n",
      "tempsfdvdvdfv 5857 8\n",
      "tempsfdvdvdfv 6461 9\n",
      "tempsfdvdvdfv 7351 10\n",
      "tempsfdvdvdfv 7903 11\n",
      "tempsfdvdvdfv 8807 12\n",
      "tempsfdvdvdfv 9285 13\n",
      "tempsfdvdvdfv 9847 14\n",
      "tempsfdvdvdfv 10695 15\n",
      "tempsfdvdvdfv 11573 16\n",
      "tempsfdvdvdfv 12441 17\n",
      "tempsfdvdvdfv 13225 18\n",
      "tempsfdvdvdfv 14128 19\n",
      "avg 20 20 625 706 423 478 385 457 510 461\n",
      "left [[446, 350, 600, 462], [844, 540, 882, 562], [494, 329, 554, 363], [711, 438, 829, 530], [406, 373, 493, 431], [489, 333, 552, 368], [427, 346, 547, 436], [829, 522, 844, 532], [493, 330, 556, 366], [448, 342, 604, 460], [878, 560, 890, 568], [473, 328, 552, 372], [830, 522, 904, 568], [403, 369, 478, 428], [467, 342, 562, 399], [782, 491, 848, 542], [856, 546, 878, 561], [666, 413, 868, 555], [743, 470, 784, 494], [826, 522, 903, 566]]\n",
      "right [[270, 685, 529, 504], [357, 638, 473, 553], [412, 597, 665, 413], [318, 517, 332, 508], [334, 655, 370, 630], [402, 436, 523, 364], [333, 656, 355, 641], [506, 359, 519, 350], [294, 684, 320, 667], [442, 407, 517, 360], [438, 434, 549, 367], [280, 527, 298, 517], [572, 447, 624, 409], [403, 377, 461, 333], [313, 671, 325, 663], [404, 436, 504, 378], [290, 525, 302, 516], [435, 407, 533, 346], [403, 384, 445, 356], [497, 361, 512, 351]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 792 0\n",
      "tempsfdvdvdfv 1401 1\n",
      "tempsfdvdvdfv 2342 2\n",
      "tempsfdvdvdfv 2921 3\n",
      "tempsfdvdvdfv 3776 4\n",
      "tempsfdvdvdfv 4344 5\n",
      "tempsfdvdvdfv 4984 6\n",
      "tempsfdvdvdfv 5656 7\n",
      "tempsfdvdvdfv 6522 8\n",
      "tempsfdvdvdfv 7312 9\n",
      "tempsfdvdvdfv 8239 10\n",
      "tempsfdvdvdfv 8840 11\n",
      "tempsfdvdvdfv 9627 12\n",
      "tempsfdvdvdfv 10226 13\n",
      "tempsfdvdvdfv 10785 14\n",
      "tempsfdvdvdfv 11425 15\n",
      "tempsfdvdvdfv 11957 16\n",
      "tempsfdvdvdfv 12540 17\n",
      "tempsfdvdvdfv 13434 18\n",
      "tempsfdvdvdfv 14004 19\n",
      "tempsfdvdvdfv 14928 20\n",
      "tempsfdvdvdfv 15541 21\n",
      "tempsfdvdvdfv 16063 22\n",
      "tempsfdvdvdfv 16611 23\n",
      "tempsfdvdvdfv 17256 24\n",
      "tempsfdvdvdfv 17806 25\n",
      "tempsfdvdvdfv 18366 26\n",
      "tempsfdvdvdfv 19158 27\n",
      "tempsfdvdvdfv 19921 28\n",
      "avg 29 18 610 686 411 459 419 491 545 494\n",
      "left [[622, 391, 792, 497], [473, 382, 609, 461], [846, 532, 941, 589], [473, 333, 579, 392], [840, 535, 855, 546], [448, 327, 568, 396], [619, 426, 640, 443], [622, 392, 672, 423], [837, 532, 866, 553], [746, 472, 790, 499], [912, 580, 927, 590], [477, 390, 601, 461], [696, 428, 787, 499], [441, 347, 599, 466], [448, 330, 559, 392], [590, 394, 640, 428], [490, 326, 532, 354], [465, 325, 583, 393], [865, 552, 894, 569], [468, 325, 570, 391], [910, 579, 924, 589], [497, 386, 613, 459], [489, 327, 522, 348], [482, 326, 548, 366], [575, 397, 645, 439], [497, 329, 550, 365], [473, 384, 560, 435], [687, 428, 792, 496], [728, 451, 763, 478]]\n",
      "right [[272, 684, 386, 604], [297, 683, 498, 532], [436, 567, 556, 486], [298, 683, 575, 475], [439, 565, 465, 548], [572, 478, 659, 420], [356, 624, 390, 601], [540, 502, 641, 439], [195, 550, 205, 542], [585, 445, 626, 412], [409, 586, 435, 569], [443, 347, 471, 325], [273, 683, 347, 630], [442, 341, 457, 329], [371, 613, 427, 575], [637, 428, 664, 412], [599, 444, 635, 422], [394, 597, 412, 585]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 665 0\n",
      "tempsfdvdvdfv 1658 1\n",
      "tempsfdvdvdfv 2631 2\n",
      "tempsfdvdvdfv 3545 3\n",
      "tempsfdvdvdfv 4104 4\n",
      "tempsfdvdvdfv 4906 5\n",
      "tempsfdvdvdfv 5649 6\n",
      "tempsfdvdvdfv 6418 7\n",
      "tempsfdvdvdfv 7152 8\n",
      "tempsfdvdvdfv 7952 9\n",
      "tempsfdvdvdfv 8529 10\n",
      "tempsfdvdvdfv 9454 11\n",
      "tempsfdvdvdfv 10329 12\n",
      "tempsfdvdvdfv 10925 13\n",
      "tempsfdvdvdfv 11470 14\n",
      "tempsfdvdvdfv 12463 15\n",
      "tempsfdvdvdfv 13005 16\n",
      "tempsfdvdvdfv 13893 17\n",
      "tempsfdvdvdfv 14445 18\n",
      "tempsfdvdvdfv 15024 19\n",
      "tempsfdvdvdfv 16017 20\n",
      "avg 21 16 700 762 463 503 395 468 582 529\n",
      "left [[597, 392, 665, 431], [867, 545, 993, 620], [937, 596, 973, 620], [881, 563, 914, 582], [547, 354, 559, 362], [750, 473, 802, 504], [721, 449, 743, 463], [653, 408, 769, 483], [662, 411, 734, 456], [755, 479, 800, 506], [431, 378, 577, 480], [900, 575, 925, 589], [856, 547, 875, 558], [426, 350, 596, 469], [477, 326, 545, 365], [978, 609, 993, 618], [507, 344, 542, 370], [862, 551, 888, 566], [425, 350, 552, 436], [500, 421, 579, 478], [976, 608, 993, 619]]\n",
      "right [[323, 648, 524, 507], [300, 683, 578, 474], [334, 656, 374, 627], [614, 444, 652, 415], [329, 644, 346, 633], [388, 615, 594, 465], [263, 685, 315, 655], [374, 626, 388, 616], [623, 430, 650, 409], [296, 685, 330, 659], [316, 653, 331, 644], [554, 495, 653, 415], [274, 683, 288, 674], [402, 606, 440, 576], [448, 401, 521, 359], [489, 365, 517, 347]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 544 0\n",
      "tempsfdvdvdfv 1484 1\n",
      "tempsfdvdvdfv 2557 2\n",
      "tempsfdvdvdfv 3230 3\n",
      "tempsfdvdvdfv 3851 4\n",
      "tempsfdvdvdfv 4391 5\n",
      "tempsfdvdvdfv 5204 6\n",
      "tempsfdvdvdfv 6132 7\n",
      "tempsfdvdvdfv 6939 8\n",
      "tempsfdvdvdfv 7987 9\n",
      "tempsfdvdvdfv 8924 10\n",
      "tempsfdvdvdfv 10010 11\n",
      "tempsfdvdvdfv 10964 12\n",
      "tempsfdvdvdfv 11500 13\n",
      "tempsfdvdvdfv 12069 14\n",
      "tempsfdvdvdfv 13156 15\n",
      "tempsfdvdvdfv 13698 16\n",
      "tempsfdvdvdfv 14238 17\n",
      "tempsfdvdvdfv 14904 18\n",
      "tempsfdvdvdfv 15886 19\n",
      "tempsfdvdvdfv 16366 20\n",
      "tempsfdvdvdfv 17044 21\n",
      "tempsfdvdvdfv 17585 22\n",
      "tempsfdvdvdfv 18211 23\n",
      "tempsfdvdvdfv 19016 24\n",
      "tempsfdvdvdfv 19587 25\n",
      "tempsfdvdvdfv 20677 26\n",
      "avg 27 34 687 765 459 509 464 535 506 459\n",
      "left [[485, 325, 544, 360], [881, 561, 940, 599], [955, 608, 1073, 677], [622, 411, 673, 440], [462, 335, 621, 455], [474, 328, 540, 365], [728, 456, 813, 509], [896, 561, 928, 581], [754, 477, 807, 513], [1006, 639, 1048, 663], [926, 589, 937, 597], [978, 608, 1086, 675], [944, 600, 954, 607], [429, 346, 536, 430], [461, 403, 569, 479], [1040, 645, 1087, 675], [478, 325, 542, 362], [482, 333, 540, 366], [621, 413, 666, 440], [945, 602, 982, 623], [426, 392, 480, 428], [619, 407, 678, 440], [478, 326, 541, 364], [446, 336, 626, 448], [714, 439, 805, 512], [414, 373, 571, 483], [891, 560, 1090, 675]]\n",
      "right [[604, 450, 661, 410], [328, 645, 446, 560], [459, 561, 664, 412], [519, 510, 681, 420], [370, 628, 461, 561], [545, 499, 662, 431], [598, 463, 667, 420], [300, 684, 366, 631], [300, 665, 323, 647], [451, 558, 482, 535], [501, 522, 670, 420], [226, 543, 242, 533], [537, 458, 619, 396], [413, 402, 518, 339], [368, 438, 426, 396], [413, 431, 546, 354], [566, 487, 669, 415], [405, 432, 524, 361], [626, 453, 658, 432], [602, 465, 661, 426], [573, 435, 594, 420], [443, 573, 465, 558], [555, 450, 622, 401], [535, 506, 555, 494], [612, 431, 627, 422], [333, 641, 350, 628], [416, 379, 476, 339], [617, 430, 649, 411], [625, 438, 654, 416], [271, 684, 283, 677], [466, 557, 577, 474], [389, 615, 423, 588], [417, 394, 514, 338], [420, 386, 480, 351]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 690 0\n",
      "tempsfdvdvdfv 1759 1\n",
      "tempsfdvdvdfv 2714 2\n",
      "tempsfdvdvdfv 3538 3\n",
      "tempsfdvdvdfv 4082 4\n",
      "tempsfdvdvdfv 4722 5\n",
      "tempsfdvdvdfv 5481 6\n",
      "tempsfdvdvdfv 6488 7\n",
      "tempsfdvdvdfv 7005 8\n",
      "tempsfdvdvdfv 8096 9\n",
      "tempsfdvdvdfv 8676 10\n",
      "tempsfdvdvdfv 9154 11\n",
      "tempsfdvdvdfv 10233 12\n",
      "tempsfdvdvdfv 10904 13\n",
      "tempsfdvdvdfv 11846 14\n",
      "tempsfdvdvdfv 12305 15\n",
      "tempsfdvdvdfv 12854 16\n",
      "tempsfdvdvdfv 13880 17\n",
      "tempsfdvdvdfv 14628 18\n",
      "tempsfdvdvdfv 15300 19\n",
      "tempsfdvdvdfv 15950 20\n",
      "tempsfdvdvdfv 16733 21\n",
      "tempsfdvdvdfv 17504 22\n",
      "tempsfdvdvdfv 18252 23\n",
      "avg 24 26 697 760 463 505 426 514 503 442\n",
      "left [[617, 394, 690, 440], [964, 614, 1069, 677], [913, 581, 955, 607], [680, 420, 824, 521], [424, 353, 544, 437], [499, 340, 640, 450], [661, 410, 759, 478], [926, 580, 1007, 628], [486, 369, 517, 390], [1026, 639, 1091, 676], [501, 347, 580, 393], [434, 366, 478, 398], [1068, 710, 1079, 717], [619, 399, 671, 429], [917, 580, 942, 600], [400, 371, 459, 417], [455, 382, 549, 450], [1004, 637, 1026, 651], [720, 447, 748, 466], [659, 411, 672, 419], [607, 423, 650, 449], [747, 469, 783, 493], [691, 425, 771, 489], [729, 456, 748, 467]]\n",
      "right [[430, 582, 664, 412], [473, 541, 500, 524], [295, 684, 382, 620], [566, 486, 667, 430], [270, 685, 428, 574], [599, 451, 654, 413], [527, 512, 543, 502], [268, 685, 513, 514], [348, 595, 363, 584], [593, 470, 663, 421], [443, 433, 538, 362], [612, 441, 651, 410], [368, 630, 433, 580], [462, 432, 536, 382], [405, 374, 480, 330], [403, 370, 456, 330], [329, 515, 341, 507], [394, 611, 654, 415], [403, 374, 464, 325], [451, 430, 542, 364], [413, 405, 470, 371], [561, 484, 668, 424], [373, 438, 483, 372], [406, 405, 494, 344], [412, 376, 469, 330], [297, 683, 314, 671]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 629 0\n",
      "tempsfdvdvdfv 1698 1\n",
      "tempsfdvdvdfv 2366 2\n",
      "tempsfdvdvdfv 3354 3\n",
      "tempsfdvdvdfv 3959 4\n",
      "tempsfdvdvdfv 5050 5\n",
      "tempsfdvdvdfv 5625 6\n",
      "tempsfdvdvdfv 6415 7\n",
      "tempsfdvdvdfv 7030 8\n",
      "tempsfdvdvdfv 7801 9\n",
      "tempsfdvdvdfv 8411 10\n",
      "tempsfdvdvdfv 8892 11\n",
      "tempsfdvdvdfv 9981 12\n",
      "tempsfdvdvdfv 10998 13\n",
      "tempsfdvdvdfv 11541 14\n",
      "tempsfdvdvdfv 11939 15\n",
      "tempsfdvdvdfv 12505 16\n",
      "tempsfdvdvdfv 13189 17\n",
      "avg 18 24 624 732 446 519 410 492 533 478\n",
      "left [[451, 325, 629, 441], [957, 608, 1069, 677], [461, 325, 668, 440], [974, 607, 988, 615], [442, 344, 605, 463], [1061, 659, 1091, 676], [418, 357, 575, 480], [668, 414, 790, 496], [433, 340, 615, 458], [679, 420, 771, 489], [450, 327, 610, 456], [398, 371, 481, 427], [973, 607, 1089, 674], [957, 606, 1017, 646], [508, 334, 543, 354], [374, 610, 398, 624], [397, 372, 566, 486], [645, 416, 684, 440]]\n",
      "right [[563, 484, 670, 415], [293, 685, 493, 535], [375, 609, 454, 555], [500, 530, 671, 419], [269, 685, 397, 595], [456, 552, 570, 478], [542, 497, 666, 414], [290, 627, 312, 614], [383, 436, 483, 369], [377, 433, 466, 373], [288, 627, 312, 611], [296, 665, 321, 648], [635, 448, 681, 420], [525, 460, 586, 416], [436, 566, 446, 560], [479, 431, 519, 401], [524, 459, 573, 423], [269, 684, 511, 515], [484, 430, 518, 405], [289, 625, 311, 611], [412, 435, 529, 368], [294, 626, 308, 617], [415, 435, 538, 364], [448, 382, 484, 356]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 25%|██▍       | 62/251 [00:01<00:05, 34.67it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 1065 0\n",
      "tempsfdvdvdfv 2134 1\n",
      "tempsfdvdvdfv 3226 2\n",
      "tempsfdvdvdfv 4027 3\n",
      "tempsfdvdvdfv 4661 4\n",
      "tempsfdvdvdfv 5326 5\n",
      "tempsfdvdvdfv 5927 6\n",
      "tempsfdvdvdfv 6438 7\n",
      "tempsfdvdvdfv 6982 8\n",
      "tempsfdvdvdfv 7681 9\n",
      "tempsfdvdvdfv 8295 10\n",
      "tempsfdvdvdfv 8824 11\n",
      "tempsfdvdvdfv 9334 12\n",
      "tempsfdvdvdfv 9947 13\n",
      "tempsfdvdvdfv 10547 14\n",
      "tempsfdvdvdfv 11230 15\n",
      "tempsfdvdvdfv 11839 16\n",
      "tempsfdvdvdfv 12627 17\n",
      "tempsfdvdvdfv 13368 18\n",
      "tempsfdvdvdfv 14052 19\n",
      "tempsfdvdvdfv 14697 20\n",
      "tempsfdvdvdfv 15379 21\n",
      "tempsfdvdvdfv 16073 22\n",
      "avg 23 20 593 698 408 474 402 489 569 508\n",
      "left [[1012, 640, 1065, 676], [1013, 640, 1069, 676], [1000, 621, 1092, 674], [648, 406, 801, 501], [454, 333, 634, 449], [460, 326, 665, 440], [445, 362, 601, 464], [451, 364, 511, 398], [440, 334, 544, 399], [646, 406, 699, 440], [431, 342, 614, 452], [488, 332, 529, 355], [407, 372, 510, 453], [437, 339, 613, 458], [416, 362, 600, 464], [664, 429, 683, 440], [499, 384, 609, 459], [776, 491, 788, 498], [613, 390, 741, 461], [618, 402, 684, 440], [489, 332, 645, 441], [619, 404, 682, 440], [613, 391, 694, 440]]\n",
      "right [[348, 641, 661, 413], [267, 684, 497, 523], [266, 684, 476, 537], [552, 450, 620, 406], [187, 681, 242, 649], [194, 682, 250, 647], [404, 400, 492, 334], [293, 683, 361, 633], [496, 525, 515, 512], [336, 650, 355, 637], [596, 452, 650, 410], [578, 448, 609, 429], [557, 449, 622, 407], [459, 558, 520, 515], [190, 681, 243, 649], [344, 644, 356, 636], [504, 460, 614, 394], [569, 486, 647, 433], [528, 511, 648, 414], [383, 616, 416, 590]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 594 0\n",
      "tempsfdvdvdfv 1238 1\n",
      "tempsfdvdvdfv 1924 2\n",
      "tempsfdvdvdfv 2729 3\n",
      "tempsfdvdvdfv 3315 4\n",
      "tempsfdvdvdfv 4111 5\n",
      "tempsfdvdvdfv 4710 6\n",
      "tempsfdvdvdfv 5277 7\n",
      "tempsfdvdvdfv 5887 8\n",
      "tempsfdvdvdfv 6504 9\n",
      "tempsfdvdvdfv 7179 10\n",
      "tempsfdvdvdfv 7797 11\n",
      "tempsfdvdvdfv 8450 12\n",
      "tempsfdvdvdfv 9102 13\n",
      "tempsfdvdvdfv 9892 14\n",
      "tempsfdvdvdfv 10427 15\n",
      "tempsfdvdvdfv 11063 16\n",
      "tempsfdvdvdfv 11765 17\n",
      "tempsfdvdvdfv 12441 18\n",
      "tempsfdvdvdfv 12982 19\n",
      "avg 20 33 542 649 386 454 409 495 509 450\n",
      "left [[433, 343, 594, 469], [454, 333, 644, 443], [598, 392, 686, 441], [783, 497, 805, 511], [412, 361, 586, 474], [716, 441, 796, 505], [415, 360, 599, 466], [392, 376, 567, 485], [455, 325, 610, 422], [444, 357, 617, 457], [585, 391, 675, 441], [456, 326, 618, 443], [619, 415, 653, 441], [614, 412, 652, 441], [777, 492, 790, 500], [432, 351, 535, 428], [460, 338, 636, 447], [656, 410, 702, 441], [652, 427, 676, 441], [501, 376, 541, 400]]\n",
      "right [[293, 684, 480, 544], [409, 584, 669, 415], [359, 619, 385, 602], [524, 514, 668, 420], [355, 438, 521, 342], [611, 460, 674, 419], [389, 436, 502, 360], [379, 397, 490, 325], [389, 401, 493, 328], [475, 548, 498, 533], [266, 685, 337, 634], [489, 538, 511, 524], [386, 436, 514, 339], [373, 609, 407, 587], [368, 437, 518, 340], [572, 450, 609, 422], [338, 650, 363, 630], [460, 549, 472, 542], [328, 642, 358, 620], [394, 436, 524, 358], [354, 438, 473, 352], [498, 524, 535, 501], [479, 470, 570, 399], [371, 437, 505, 354], [273, 681, 350, 625], [403, 588, 424, 575], [386, 391, 461, 332], [315, 666, 520, 517], [419, 368, 464, 334], [436, 482, 446, 476], [441, 366, 483, 338], [360, 438, 451, 377], [615, 443, 663, 411]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 633 0\n",
      "tempsfdvdvdfv 1452 1\n",
      "tempsfdvdvdfv 2055 2\n",
      "tempsfdvdvdfv 2648 3\n",
      "tempsfdvdvdfv 3464 4\n",
      "tempsfdvdvdfv 4290 5\n",
      "tempsfdvdvdfv 4967 6\n",
      "tempsfdvdvdfv 5608 7\n",
      "tempsfdvdvdfv 6434 8\n",
      "tempsfdvdvdfv 6994 9\n",
      "tempsfdvdvdfv 7451 10\n",
      "tempsfdvdvdfv 8271 11\n",
      "tempsfdvdvdfv 8814 12\n",
      "tempsfdvdvdfv 9433 13\n",
      "tempsfdvdvdfv 10028 14\n",
      "tempsfdvdvdfv 10724 15\n",
      "tempsfdvdvdfv 11330 16\n",
      "tempsfdvdvdfv 11787 17\n",
      "tempsfdvdvdfv 12251 18\n",
      "tempsfdvdvdfv 12864 19\n",
      "tempsfdvdvdfv 13487 20\n",
      "tempsfdvdvdfv 14082 21\n",
      "tempsfdvdvdfv 14823 22\n",
      "tempsfdvdvdfv 15508 23\n",
      "tempsfdvdvdfv 16057 24\n",
      "tempsfdvdvdfv 16700 25\n",
      "tempsfdvdvdfv 17334 26\n",
      "tempsfdvdvdfv 18146 27\n",
      "tempsfdvdvdfv 18773 28\n",
      "tempsfdvdvdfv 19260 29\n",
      "tempsfdvdvdfv 19850 30\n",
      "avg 31 30 539 640 390 457 409 490 542 485\n",
      "left [[446, 336, 633, 448], [716, 441, 819, 518], [444, 348, 603, 463], [421, 353, 593, 469], [800, 507, 816, 517], [735, 461, 826, 516], [585, 388, 677, 441], [445, 330, 641, 443], [740, 465, 826, 517], [396, 379, 560, 489], [404, 390, 457, 430], [784, 496, 820, 518], [458, 340, 543, 391], [442, 340, 619, 455], [435, 360, 595, 468], [642, 409, 696, 441], [495, 378, 606, 462], [396, 392, 457, 426], [408, 395, 464, 427], [451, 332, 613, 458], [458, 345, 623, 452], [540, 430, 595, 463], [666, 413, 741, 460], [612, 397, 685, 441], [518, 344, 549, 362], [609, 406, 643, 433], [526, 343, 634, 427], [714, 441, 812, 515], [594, 420, 627, 442], [410, 366, 487, 416], [445, 353, 590, 470]]\n",
      "right [[540, 504, 669, 414], [290, 684, 385, 615], [287, 685, 516, 519], [337, 633, 539, 497], [525, 514, 659, 410], [380, 404, 491, 337], [369, 401, 481, 329], [474, 563, 508, 538], [267, 685, 323, 643], [328, 677, 358, 653], [658, 441, 676, 428], [272, 680, 290, 666], [412, 418, 515, 338], [325, 683, 364, 655], [389, 610, 406, 599], [367, 433, 515, 348], [473, 559, 509, 537], [438, 574, 454, 563], [544, 501, 655, 414], [377, 390, 475, 326], [345, 628, 368, 613], [266, 684, 284, 670], [357, 437, 505, 334], [638, 445, 679, 419], [518, 460, 558, 430], [459, 430, 548, 358], [326, 641, 342, 631], [380, 603, 491, 528], [375, 397, 478, 325], [556, 496, 661, 414]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 825 0\n",
      "tempsfdvdvdfv 1662 1\n",
      "tempsfdvdvdfv 2460 2\n",
      "tempsfdvdvdfv 2971 3\n",
      "tempsfdvdvdfv 3593 4\n",
      "tempsfdvdvdfv 4173 5\n",
      "tempsfdvdvdfv 4762 6\n",
      "tempsfdvdvdfv 5207 7\n",
      "tempsfdvdvdfv 5793 8\n",
      "tempsfdvdvdfv 6348 9\n",
      "tempsfdvdvdfv 6830 10\n",
      "tempsfdvdvdfv 7358 11\n",
      "tempsfdvdvdfv 7862 12\n",
      "tempsfdvdvdfv 8305 13\n",
      "tempsfdvdvdfv 8732 14\n",
      "tempsfdvdvdfv 9564 15\n",
      "tempsfdvdvdfv 10407 16\n",
      "tempsfdvdvdfv 10929 17\n",
      "tempsfdvdvdfv 11373 18\n",
      "tempsfdvdvdfv 11789 19\n",
      "avg 20 21 504 589 393 451 378 454 567 514\n",
      "left [[608, 389, 825, 515], [812, 515, 837, 529], [687, 425, 798, 500], [480, 348, 511, 371], [456, 328, 622, 453], [415, 362, 580, 478], [427, 350, 589, 472], [377, 393, 445, 432], [420, 353, 586, 474], [545, 495, 555, 501], [456, 325, 482, 344], [415, 356, 528, 438], [396, 390, 504, 463], [407, 365, 443, 388], [387, 391, 427, 417], [794, 500, 832, 528], [726, 451, 843, 527], [506, 333, 522, 345], [393, 396, 444, 429], [382, 408, 416, 434]]\n",
      "right [[261, 685, 540, 497], [382, 615, 669, 414], [341, 645, 414, 593], [286, 684, 331, 654], [313, 667, 328, 657], [421, 608, 467, 572], [373, 608, 474, 540], [287, 684, 311, 670], [456, 578, 470, 569], [369, 401, 453, 349], [420, 352, 468, 325], [442, 583, 456, 574], [344, 434, 479, 325], [417, 366, 477, 328], [340, 646, 351, 639], [447, 586, 464, 574], [547, 502, 663, 411], [330, 654, 346, 643], [361, 433, 497, 345], [268, 685, 318, 646], [533, 503, 567, 480]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 852 0\n",
      "tempsfdvdvdfv 1438 1\n",
      "tempsfdvdvdfv 2128 2\n",
      "tempsfdvdvdfv 2945 3\n",
      "tempsfdvdvdfv 3646 4\n",
      "tempsfdvdvdfv 4166 5\n",
      "tempsfdvdvdfv 4613 6\n",
      "tempsfdvdvdfv 5349 7\n",
      "tempsfdvdvdfv 6203 8\n",
      "tempsfdvdvdfv 6957 9\n",
      "tempsfdvdvdfv 7463 10\n",
      "tempsfdvdvdfv 8043 11\n",
      "tempsfdvdvdfv 8864 12\n",
      "tempsfdvdvdfv 9724 13\n",
      "tempsfdvdvdfv 10424 14\n",
      "tempsfdvdvdfv 11073 15\n",
      "avg 16 15 613 692 410 463 406 497 597 533\n",
      "left [[655, 408, 852, 541], [421, 351, 586, 475], [640, 414, 690, 443], [656, 408, 817, 512], [642, 406, 701, 443], [497, 331, 520, 344], [390, 399, 447, 432], [680, 421, 736, 457], [773, 483, 854, 541], [642, 405, 754, 472], [492, 333, 506, 344], [419, 357, 580, 474], [810, 507, 821, 514], [835, 522, 860, 538], [642, 407, 700, 443], [615, 423, 649, 444]]\n",
      "right [[260, 686, 540, 498], [360, 632, 669, 415], [420, 579, 565, 482], [287, 685, 354, 638], [414, 593, 605, 459], [275, 677, 287, 670], [327, 656, 369, 627], [616, 458, 664, 421], [678, 444, 699, 430], [600, 467, 650, 427], [353, 666, 391, 639], [470, 473, 592, 391], [374, 649, 389, 639], [376, 621, 398, 606], [287, 669, 297, 663]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 26%|██▋       | 66/251 [00:01<00:05, 34.75it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 889 0\n",
      "tempsfdvdvdfv 1767 1\n",
      "tempsfdvdvdfv 2656 2\n",
      "tempsfdvdvdfv 3165 3\n",
      "tempsfdvdvdfv 3758 4\n",
      "tempsfdvdvdfv 4366 5\n",
      "tempsfdvdvdfv 4848 6\n",
      "tempsfdvdvdfv 5724 7\n",
      "tempsfdvdvdfv 6347 8\n",
      "tempsfdvdvdfv 6775 9\n",
      "tempsfdvdvdfv 7624 10\n",
      "tempsfdvdvdfv 8103 11\n",
      "tempsfdvdvdfv 8886 12\n",
      "tempsfdvdvdfv 9439 13\n",
      "tempsfdvdvdfv 10088 14\n",
      "tempsfdvdvdfv 10692 15\n",
      "tempsfdvdvdfv 11537 16\n",
      "avg 17 25 571 678 411 484 398 474 543 491\n",
      "left [[639, 399, 889, 555], [639, 400, 878, 555], [826, 515, 889, 554], [382, 386, 509, 459], [439, 346, 593, 466], [446, 336, 608, 462], [448, 369, 482, 388], [847, 537, 876, 555], [542, 397, 623, 454], [388, 404, 428, 433], [680, 420, 849, 538], [386, 386, 479, 459], [746, 469, 783, 490], [419, 358, 553, 456], [605, 407, 649, 433], [446, 335, 604, 445], [835, 528, 845, 535]]\n",
      "right [[303, 657, 518, 512], [289, 684, 451, 567], [431, 572, 573, 477], [259, 685, 324, 644], [523, 516, 650, 433], [346, 438, 501, 345], [454, 565, 481, 547], [269, 682, 287, 668], [472, 552, 530, 514], [394, 375, 452, 334], [409, 434, 505, 377], [330, 639, 356, 622], [420, 579, 484, 535], [318, 647, 343, 631], [400, 605, 428, 584], [483, 467, 544, 423], [395, 595, 414, 583], [512, 525, 660, 410], [405, 435, 502, 377], [384, 436, 506, 344], [490, 532, 520, 511], [465, 474, 526, 426], [562, 399, 572, 391], [261, 685, 302, 659], [382, 397, 437, 361]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 908 0\n",
      "tempsfdvdvdfv 1829 1\n",
      "tempsfdvdvdfv 2619 2\n",
      "tempsfdvdvdfv 3410 3\n",
      "tempsfdvdvdfv 3796 4\n",
      "tempsfdvdvdfv 4560 5\n",
      "tempsfdvdvdfv 5481 6\n",
      "tempsfdvdvdfv 6137 7\n",
      "tempsfdvdvdfv 6728 8\n",
      "tempsfdvdvdfv 7230 9\n",
      "tempsfdvdvdfv 7813 10\n",
      "tempsfdvdvdfv 8456 11\n",
      "tempsfdvdvdfv 9363 12\n",
      "tempsfdvdvdfv 10022 13\n",
      "tempsfdvdvdfv 10674 14\n",
      "tempsfdvdvdfv 11286 15\n",
      "avg 16 25 627 705 426 475 401 479 550 495\n",
      "left [[832, 527, 908, 574], [840, 524, 921, 572], [640, 405, 790, 495], [670, 415, 791, 494], [350, 413, 386, 437], [641, 400, 764, 477], [838, 524, 921, 574], [601, 405, 656, 445], [481, 412, 591, 473], [449, 326, 502, 356], [556, 372, 583, 388], [566, 391, 643, 435], [886, 561, 907, 574], [630, 423, 659, 444], [486, 325, 652, 433], [569, 402, 612, 432]]\n",
      "right [[266, 685, 426, 577], [411, 599, 664, 416], [350, 643, 424, 588], [356, 623, 430, 574], [472, 544, 580, 474], [560, 493, 668, 415], [359, 412, 490, 327], [378, 390, 463, 335], [452, 559, 468, 547], [295, 685, 341, 648], [593, 472, 664, 421], [444, 575, 514, 523], [282, 674, 319, 648], [295, 682, 310, 670], [471, 545, 512, 519], [488, 359, 503, 348], [337, 439, 481, 326], [575, 483, 632, 437], [338, 635, 350, 628], [283, 673, 298, 662], [316, 667, 331, 655], [426, 588, 463, 560], [346, 435, 490, 331], [588, 475, 666, 415], [350, 438, 490, 337]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 700 0\n",
      "tempsfdvdvdfv 1650 1\n",
      "tempsfdvdvdfv 2447 2\n",
      "tempsfdvdvdfv 3410 3\n",
      "tempsfdvdvdfv 4373 4\n",
      "tempsfdvdvdfv 5174 5\n",
      "tempsfdvdvdfv 5779 6\n",
      "tempsfdvdvdfv 6201 7\n",
      "tempsfdvdvdfv 7071 8\n",
      "tempsfdvdvdfv 7614 9\n",
      "tempsfdvdvdfv 8218 10\n",
      "tempsfdvdvdfv 8948 11\n",
      "tempsfdvdvdfv 9397 12\n",
      "tempsfdvdvdfv 10167 13\n",
      "tempsfdvdvdfv 10968 14\n",
      "tempsfdvdvdfv 11919 15\n",
      "avg 16 26 654 744 443 499 419 503 504 446\n",
      "left [[635, 407, 700, 444], [849, 535, 950, 598], [751, 473, 797, 500], [858, 534, 963, 597], [863, 536, 963, 596], [639, 399, 801, 500], [441, 357, 605, 460], [372, 401, 422, 433], [851, 537, 870, 550], [442, 334, 543, 395], [453, 355, 604, 460], [680, 420, 730, 452], [380, 395, 449, 437], [728, 456, 770, 480], [686, 425, 801, 499], [848, 537, 951, 598]]\n",
      "right [[293, 684, 665, 414], [496, 528, 519, 514], [270, 684, 366, 617], [559, 492, 679, 420], [368, 617, 427, 575], [329, 439, 481, 325], [347, 417, 465, 325], [349, 438, 489, 325], [455, 377, 494, 350], [446, 562, 485, 537], [328, 436, 502, 331], [325, 436, 477, 326], [594, 448, 657, 412], [524, 509, 631, 445], [355, 626, 368, 616], [490, 532, 510, 520], [345, 438, 479, 330], [459, 379, 487, 363], [486, 535, 555, 496], [391, 384, 466, 325], [411, 364, 464, 332], [371, 614, 412, 587], [550, 492, 566, 483], [296, 683, 325, 662], [617, 440, 652, 416], [451, 559, 466, 550]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 28%|██▊       | 70/251 [00:01<00:05, 34.07it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 704 0\n",
      "tempsfdvdvdfv 1509 1\n",
      "tempsfdvdvdfv 2512 2\n",
      "tempsfdvdvdfv 3520 3\n",
      "tempsfdvdvdfv 4440 4\n",
      "tempsfdvdvdfv 5446 5\n",
      "tempsfdvdvdfv 6251 6\n",
      "tempsfdvdvdfv 6781 7\n",
      "tempsfdvdvdfv 7593 8\n",
      "tempsfdvdvdfv 8112 9\n",
      "tempsfdvdvdfv 8924 10\n",
      "tempsfdvdvdfv 9549 11\n",
      "tempsfdvdvdfv 10012 12\n",
      "tempsfdvdvdfv 10616 13\n",
      "tempsfdvdvdfv 11416 14\n",
      "tempsfdvdvdfv 12374 15\n",
      "avg 16 22 668 773 447 512 419 512 526 462\n",
      "left [[638, 404, 704, 445], [754, 476, 805, 505], [870, 551, 1003, 631], [921, 572, 1008, 621], [884, 549, 920, 571], [870, 550, 1006, 631], [692, 426, 805, 508], [411, 360, 530, 434], [655, 408, 812, 506], [413, 366, 519, 440], [714, 446, 812, 507], [440, 344, 625, 455], [415, 358, 463, 386], [417, 362, 604, 466], [681, 421, 800, 507], [922, 572, 958, 592]]\n",
      "right [[547, 503, 667, 416], [277, 682, 501, 526], [602, 448, 654, 408], [362, 636, 442, 579], [529, 507, 666, 431], [479, 552, 652, 417], [295, 684, 390, 617], [556, 490, 675, 421], [362, 402, 484, 326], [436, 582, 487, 550], [294, 684, 344, 651], [343, 436, 491, 325], [379, 389, 475, 331], [505, 533, 654, 417], [378, 388, 452, 332], [390, 495, 401, 488], [471, 445, 545, 396], [272, 685, 314, 655], [331, 437, 459, 337], [408, 602, 423, 592], [447, 574, 486, 550], [560, 439, 605, 403]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1032 0\n",
      "tempsfdvdvdfv 2112 1\n",
      "tempsfdvdvdfv 2725 2\n",
      "tempsfdvdvdfv 3802 3\n",
      "tempsfdvdvdfv 4618 4\n",
      "tempsfdvdvdfv 5555 5\n",
      "tempsfdvdvdfv 6086 6\n",
      "tempsfdvdvdfv 7189 7\n",
      "tempsfdvdvdfv 7575 8\n",
      "tempsfdvdvdfv 8616 9\n",
      "tempsfdvdvdfv 9697 10\n",
      "tempsfdvdvdfv 10210 11\n",
      "tempsfdvdvdfv 10780 12\n",
      "tempsfdvdvdfv 11833 13\n",
      "tempsfdvdvdfv 12616 14\n",
      "tempsfdvdvdfv 13243 15\n",
      "tempsfdvdvdfv 14185 16\n",
      "tempsfdvdvdfv 14847 17\n",
      "tempsfdvdvdfv 15328 18\n",
      "tempsfdvdvdfv 16428 19\n",
      "tempsfdvdvdfv 16910 20\n",
      "avg 21 21 725 805 487 538 437 540 500 428\n",
      "left [[919, 568, 1032, 635], [899, 566, 1080, 675], [443, 337, 613, 461], [1045, 641, 1077, 660], [679, 421, 816, 513], [913, 566, 937, 580], [402, 368, 531, 442], [1079, 660, 1103, 674], [359, 419, 386, 437], [1009, 620, 1041, 640], [899, 567, 1081, 676], [407, 363, 513, 438], [494, 432, 570, 483], [1038, 637, 1053, 647], [633, 400, 783, 490], [580, 425, 627, 453], [917, 567, 942, 583], [556, 372, 662, 446], [454, 331, 481, 350], [1046, 643, 1100, 673], [457, 330, 482, 349]]\n",
      "right [[390, 617, 666, 416], [531, 508, 563, 486], [276, 684, 524, 511], [301, 683, 444, 579], [590, 451, 656, 411], [355, 410, 471, 332], [354, 410, 461, 326], [582, 453, 656, 409], [602, 468, 673, 417], [478, 544, 527, 509], [587, 477, 669, 415], [389, 574, 401, 567], [345, 423, 437, 370], [345, 419, 471, 334], [551, 501, 655, 417], [347, 420, 485, 334], [364, 636, 430, 589], [379, 387, 471, 325], [520, 515, 538, 502], [326, 441, 486, 337], [573, 486, 664, 415]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 791 0\n",
      "tempsfdvdvdfv 1875 1\n",
      "tempsfdvdvdfv 2961 2\n",
      "tempsfdvdvdfv 3476 3\n",
      "tempsfdvdvdfv 3971 4\n",
      "tempsfdvdvdfv 4567 5\n",
      "tempsfdvdvdfv 5338 6\n",
      "tempsfdvdvdfv 5936 7\n",
      "tempsfdvdvdfv 6701 8\n",
      "tempsfdvdvdfv 7405 9\n",
      "tempsfdvdvdfv 8236 10\n",
      "tempsfdvdvdfv 8711 11\n",
      "tempsfdvdvdfv 9493 12\n",
      "tempsfdvdvdfv 10061 13\n",
      "tempsfdvdvdfv 10845 14\n",
      "tempsfdvdvdfv 11232 15\n",
      "avg 16 22 609 702 433 492 411 508 514 446\n",
      "left [[652, 407, 791, 493], [938, 589, 1084, 676], [936, 586, 1086, 676], [398, 372, 515, 442], [435, 345, 495, 390], [431, 346, 596, 466], [701, 432, 771, 486], [531, 425, 598, 465], [632, 400, 765, 480], [629, 403, 704, 446], [664, 415, 831, 523], [457, 422, 475, 433], [764, 482, 782, 492], [461, 420, 568, 489], [769, 484, 784, 493], [351, 412, 387, 436]]\n",
      "right [[277, 684, 525, 511], [578, 483, 671, 416], [398, 614, 663, 415], [302, 684, 430, 588], [421, 382, 492, 334], [426, 386, 491, 341], [539, 503, 554, 492], [524, 513, 540, 501], [540, 509, 655, 423], [403, 610, 468, 560], [349, 414, 478, 330], [329, 440, 474, 343], [346, 599, 363, 589], [422, 385, 491, 340], [388, 620, 433, 592], [519, 465, 596, 407], [338, 426, 491, 334], [346, 595, 361, 586], [352, 648, 417, 598], [439, 382, 459, 368], [402, 380, 478, 333], [421, 595, 659, 422]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 29%|██▉       | 74/251 [00:01<00:05, 32.92it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 625 0\n",
      "tempsfdvdvdfv 1418 1\n",
      "tempsfdvdvdfv 2500 2\n",
      "tempsfdvdvdfv 3295 3\n",
      "tempsfdvdvdfv 4344 4\n",
      "tempsfdvdvdfv 5138 5\n",
      "tempsfdvdvdfv 6212 6\n",
      "tempsfdvdvdfv 6792 7\n",
      "tempsfdvdvdfv 7395 8\n",
      "tempsfdvdvdfv 7906 9\n",
      "tempsfdvdvdfv 8635 10\n",
      "tempsfdvdvdfv 9236 11\n",
      "tempsfdvdvdfv 9987 12\n",
      "tempsfdvdvdfv 10591 13\n",
      "tempsfdvdvdfv 11319 14\n",
      "tempsfdvdvdfv 12426 15\n",
      "tempsfdvdvdfv 13456 16\n",
      "tempsfdvdvdfv 14101 17\n",
      "avg 18 24 707 783 480 533 421 517 525 456\n",
      "left [[434, 345, 625, 455], [770, 486, 793, 500], [989, 616, 1082, 676], [693, 426, 795, 500], [1013, 619, 1049, 641], [678, 419, 794, 500], [1034, 644, 1074, 669], [411, 363, 580, 482], [457, 346, 603, 464], [431, 393, 511, 445], [704, 432, 729, 447], [455, 347, 601, 465], [698, 432, 751, 472], [557, 670, 604, 700], [703, 432, 728, 447], [1068, 651, 1107, 674], [1005, 627, 1030, 643], [627, 404, 645, 414]]\n",
      "right [[578, 479, 662, 416], [371, 636, 455, 571], [307, 683, 353, 648], [280, 684, 551, 495], [589, 477, 649, 435], [481, 553, 656, 417], [399, 370, 453, 328], [585, 479, 669, 416], [553, 501, 657, 417], [323, 441, 470, 330], [293, 628, 310, 617], [290, 633, 312, 619], [482, 552, 562, 488], [575, 456, 653, 408], [636, 450, 673, 428], [287, 631, 310, 616], [537, 511, 551, 502], [334, 440, 470, 334], [279, 684, 521, 515], [325, 441, 471, 334], [475, 446, 511, 426], [361, 404, 481, 335], [411, 604, 640, 437], [354, 439, 368, 429]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 812 0\n",
      "tempsfdvdvdfv 1623 1\n",
      "tempsfdvdvdfv 2116 2\n",
      "tempsfdvdvdfv 2719 3\n",
      "tempsfdvdvdfv 3095 4\n",
      "avg 5 34 494 619 428 508 420 502 502 445\n",
      "left [[629, 394, 812, 504], [632, 404, 811, 504], [446, 342, 493, 369], [443, 347, 603, 467], [321, 656, 376, 697]]\n",
      "right [[282, 684, 413, 592], [347, 653, 431, 591], [433, 576, 671, 415], [483, 550, 667, 421], [399, 388, 488, 330], [581, 453, 652, 410], [611, 463, 676, 418], [386, 381, 465, 325], [400, 385, 477, 325], [441, 582, 464, 566], [454, 561, 661, 421], [408, 594, 424, 584], [385, 382, 467, 327], [518, 468, 614, 410], [390, 503, 533, 391], [346, 654, 385, 626], [318, 441, 471, 326], [400, 386, 481, 325], [327, 433, 463, 326], [523, 464, 572, 430], [285, 683, 301, 672], [421, 376, 489, 332], [415, 356, 460, 326], [377, 616, 431, 579], [432, 589, 448, 578], [413, 378, 489, 327], [476, 447, 565, 387], [594, 473, 643, 435], [424, 595, 439, 585], [300, 685, 352, 651], [395, 386, 473, 325], [517, 525, 665, 421], [479, 553, 503, 537], [333, 431, 356, 418]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 824 0\n",
      "tempsfdvdvdfv 1643 1\n",
      "tempsfdvdvdfv 2465 2\n",
      "tempsfdvdvdfv 2952 3\n",
      "tempsfdvdvdfv 3737 4\n",
      "tempsfdvdvdfv 4560 5\n",
      "tempsfdvdvdfv 5114 6\n",
      "tempsfdvdvdfv 5766 7\n",
      "tempsfdvdvdfv 6412 8\n",
      "tempsfdvdvdfv 6799 9\n",
      "avg 10 30 590 679 419 473 427 509 500 444\n",
      "left [[632, 396, 824, 512], [783, 494, 819, 514], [627, 396, 822, 513], [444, 332, 487, 361], [734, 461, 785, 492], [790, 492, 823, 513], [424, 423, 554, 501], [568, 387, 652, 434], [562, 387, 646, 435], [338, 427, 387, 455]]\n",
      "right [[309, 684, 665, 416], [289, 682, 474, 548], [561, 495, 672, 428], [286, 683, 431, 578], [542, 502, 677, 427], [609, 452, 659, 416], [386, 393, 480, 330], [456, 562, 490, 537], [395, 618, 505, 535], [513, 523, 533, 508], [551, 496, 677, 420], [478, 547, 502, 529], [455, 446, 542, 392], [365, 448, 444, 401], [514, 411, 548, 391], [359, 507, 538, 391], [230, 542, 243, 533], [509, 473, 596, 409], [420, 379, 452, 354], [364, 447, 423, 410], [432, 452, 469, 426], [413, 378, 465, 343], [567, 492, 642, 436], [430, 452, 468, 426], [310, 684, 353, 650], [493, 535, 552, 502], [415, 453, 478, 402], [336, 513, 402, 475], [416, 383, 429, 373], [413, 388, 479, 338]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 31%|███       | 78/251 [00:02<00:05, 32.59it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 839 0\n",
      "tempsfdvdvdfv 1608 1\n",
      "tempsfdvdvdfv 2227 2\n",
      "tempsfdvdvdfv 2936 3\n",
      "tempsfdvdvdfv 3300 4\n",
      "tempsfdvdvdfv 4129 5\n",
      "tempsfdvdvdfv 4699 6\n",
      "tempsfdvdvdfv 5494 7\n",
      "avg 8 27 600 686 435 487 401 475 499 447\n",
      "left [[625, 397, 839, 521], [625, 396, 769, 479], [569, 427, 619, 458], [626, 400, 709, 450], [351, 496, 364, 506], [792, 500, 829, 522], [525, 437, 570, 465], [693, 427, 795, 501]]\n",
      "right [[312, 684, 434, 589], [286, 685, 442, 572], [508, 526, 671, 420], [445, 581, 501, 541], [549, 504, 577, 486], [513, 523, 547, 501], [394, 384, 472, 325], [345, 519, 389, 493], [458, 561, 503, 531], [437, 446, 479, 414], [386, 382, 466, 326], [349, 441, 365, 430], [597, 473, 666, 418], [511, 532, 522, 525], [218, 545, 229, 537], [399, 370, 466, 325], [348, 455, 385, 429], [400, 616, 451, 578], [384, 385, 464, 329], [345, 456, 386, 430], [330, 515, 526, 393], [354, 455, 436, 406], [347, 450, 371, 434], [393, 382, 424, 358], [309, 685, 637, 438], [354, 446, 372, 434], [562, 495, 658, 433]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 857 0\n",
      "tempsfdvdvdfv 1707 1\n",
      "tempsfdvdvdfv 2219 2\n",
      "tempsfdvdvdfv 3201 3\n",
      "tempsfdvdvdfv 3874 4\n",
      "tempsfdvdvdfv 4603 5\n",
      "tempsfdvdvdfv 5406 6\n",
      "tempsfdvdvdfv 6253 7\n",
      "tempsfdvdvdfv 7026 8\n",
      "tempsfdvdvdfv 7419 9\n",
      "tempsfdvdvdfv 8033 10\n",
      "tempsfdvdvdfv 8889 11\n",
      "tempsfdvdvdfv 9485 12\n",
      "avg 13 23 626 729 431 495 407 480 585 534\n",
      "left [[628, 395, 857, 532], [624, 397, 850, 533], [478, 380, 512, 401], [963, 602, 982, 613], [626, 406, 673, 433], [669, 414, 729, 451], [628, 402, 803, 503], [801, 505, 847, 532], [624, 396, 773, 485], [321, 439, 393, 495], [486, 368, 614, 461], [820, 509, 856, 530], [473, 402, 596, 473]]\n",
      "right [[553, 497, 666, 418], [451, 577, 672, 416], [598, 455, 645, 417], [346, 657, 395, 621], [354, 635, 561, 490], [398, 617, 412, 608], [287, 684, 300, 676], [409, 609, 423, 600], [282, 684, 333, 652], [442, 584, 465, 568], [400, 456, 489, 392], [313, 683, 343, 661], [487, 550, 667, 419], [356, 634, 366, 628], [334, 650, 345, 643], [672, 453, 707, 433], [427, 595, 445, 583], [281, 684, 315, 665], [331, 652, 669, 415], [309, 527, 363, 491], [415, 455, 476, 414], [602, 470, 650, 434], [327, 655, 338, 648]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1091 0\n",
      "tempsfdvdvdfv 1971 1\n",
      "tempsfdvdvdfv 2786 2\n",
      "tempsfdvdvdfv 3568 3\n",
      "tempsfdvdvdfv 4619 4\n",
      "tempsfdvdvdfv 5284 5\n",
      "tempsfdvdvdfv 6033 6\n",
      "tempsfdvdvdfv 6912 7\n",
      "tempsfdvdvdfv 7958 8\n",
      "tempsfdvdvdfv 8356 9\n",
      "tempsfdvdvdfv 8639 10\n",
      "tempsfdvdvdfv 9031 11\n",
      "tempsfdvdvdfv 9845 12\n",
      "tempsfdvdvdfv 10401 13\n",
      "tempsfdvdvdfv 10921 14\n",
      "avg 15 14 650 728 477 522 415 507 568 502\n",
      "left [[1024, 635, 1091, 675], [622, 396, 880, 545], [622, 399, 815, 510], [622, 395, 782, 487], [1024, 636, 1051, 652], [606, 411, 665, 444], [670, 421, 749, 467], [849, 526, 879, 545], [1029, 636, 1046, 646], [364, 435, 398, 458], [269, 528, 283, 537], [379, 394, 392, 402], [775, 489, 814, 511], [453, 432, 556, 494], [454, 432, 520, 471]]\n",
      "right [[313, 684, 664, 419], [341, 646, 639, 437], [289, 684, 357, 636], [562, 497, 643, 436], [481, 547, 501, 532], [486, 552, 519, 528], [606, 468, 673, 418], [395, 446, 477, 391], [367, 628, 413, 596], [395, 458, 451, 419], [482, 555, 495, 546], [314, 684, 413, 609], [451, 454, 499, 427], [336, 650, 354, 638]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 788 0\n",
      "tempsfdvdvdfv 1578 1\n",
      "tempsfdvdvdfv 2174 2\n",
      "tempsfdvdvdfv 2959 3\n",
      "tempsfdvdvdfv 3867 4\n",
      "tempsfdvdvdfv 4225 5\n",
      "tempsfdvdvdfv 4508 6\n",
      "tempsfdvdvdfv 4793 7\n",
      "tempsfdvdvdfv 5154 8\n",
      "avg 9 16 496 572 458 508 419 506 551 488\n",
      "left [[689, 434, 788, 493], [691, 434, 790, 491], [463, 369, 596, 473], [620, 398, 785, 490], [866, 535, 908, 559], [297, 466, 358, 506], [268, 514, 283, 525], [268, 515, 285, 528], [305, 465, 361, 509]]\n",
      "right [[574, 483, 664, 413], [314, 684, 444, 586], [312, 684, 642, 436], [423, 588, 659, 422], [388, 459, 472, 411], [289, 684, 429, 585], [229, 553, 291, 507], [594, 475, 663, 421], [527, 521, 606, 465], [655, 454, 692, 433], [426, 586, 437, 579], [295, 466, 323, 450], [408, 599, 426, 587], [515, 530, 532, 518], [419, 591, 430, 584], [344, 459, 401, 414]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 33%|███▎      | 82/251 [00:02<00:05, 31.82it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 793 0\n",
      "tempsfdvdvdfv 1591 1\n",
      "tempsfdvdvdfv 2522 2\n",
      "tempsfdvdvdfv 3133 3\n",
      "tempsfdvdvdfv 4062 4\n",
      "tempsfdvdvdfv 4855 5\n",
      "tempsfdvdvdfv 5283 6\n",
      "tempsfdvdvdfv 5933 7\n",
      "tempsfdvdvdfv 6583 8\n",
      "tempsfdvdvdfv 7375 9\n",
      "tempsfdvdvdfv 7913 10\n",
      "tempsfdvdvdfv 8490 11\n",
      "avg 12 21 598 707 423 492 395 492 544 476\n",
      "left [[618, 393, 793, 498], [643, 401, 798, 497], [845, 530, 931, 579], [469, 358, 611, 461], [841, 529, 929, 579], [619, 390, 793, 495], [342, 433, 428, 491], [578, 391, 650, 433], [601, 420, 650, 454], [661, 413, 792, 498], [474, 396, 538, 442], [491, 424, 577, 484]]\n",
      "right [[322, 680, 665, 412], [359, 636, 461, 560], [175, 569, 303, 496], [479, 547, 524, 517], [291, 684, 333, 653], [540, 504, 673, 427], [477, 560, 658, 419], [297, 684, 354, 638], [374, 460, 474, 385], [371, 461, 445, 418], [360, 635, 407, 599], [460, 562, 478, 548], [509, 526, 664, 433], [577, 451, 642, 402], [179, 569, 310, 494], [429, 437, 467, 414], [429, 504, 532, 424], [370, 461, 439, 421], [408, 438, 474, 388], [487, 453, 575, 396], [404, 603, 472, 552]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 921 0\n",
      "tempsfdvdvdfv 1729 1\n",
      "tempsfdvdvdfv 2495 2\n",
      "tempsfdvdvdfv 3298 3\n",
      "tempsfdvdvdfv 3848 4\n",
      "tempsfdvdvdfv 4427 5\n",
      "tempsfdvdvdfv 5228 6\n",
      "tempsfdvdvdfv 5995 7\n",
      "tempsfdvdvdfv 6691 8\n",
      "tempsfdvdvdfv 7648 9\n",
      "tempsfdvdvdfv 8560 10\n",
      "avg 11 17 704 778 455 504 386 470 580 519\n",
      "left [[860, 539, 921, 575], [666, 421, 808, 503], [704, 433, 766, 483], [676, 418, 803, 503], [414, 400, 550, 498], [569, 392, 579, 398], [672, 416, 801, 503], [737, 463, 767, 483], [662, 412, 696, 433], [925, 576, 957, 596], [864, 538, 912, 569]]\n",
      "right [[291, 685, 562, 489], [316, 684, 407, 615], [469, 565, 668, 415], [415, 607, 465, 570], [578, 474, 655, 418], [321, 663, 533, 509], [362, 533, 417, 489], [395, 623, 431, 596], [295, 683, 318, 667], [319, 683, 369, 645], [459, 573, 511, 538], [344, 461, 417, 404], [570, 432, 580, 426], [394, 624, 405, 616], [198, 553, 279, 501], [468, 566, 500, 543], [379, 461, 476, 393]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1033 0\n",
      "tempsfdvdvdfv 1852 1\n",
      "tempsfdvdvdfv 2514 2\n",
      "tempsfdvdvdfv 3552 3\n",
      "tempsfdvdvdfv 4365 4\n",
      "tempsfdvdvdfv 5137 5\n",
      "tempsfdvdvdfv 5788 6\n",
      "tempsfdvdvdfv 6283 7\n",
      "tempsfdvdvdfv 6928 8\n",
      "tempsfdvdvdfv 7178 9\n",
      "tempsfdvdvdfv 7638 10\n",
      "tempsfdvdvdfv 8594 11\n",
      "tempsfdvdvdfv 9099 12\n",
      "tempsfdvdvdfv 9458 13\n",
      "tempsfdvdvdfv 9789 14\n",
      "tempsfdvdvdfv 10213 15\n",
      "tempsfdvdvdfv 11225 16\n",
      "tempsfdvdvdfv 11536 17\n",
      "avg 18 23 583 640 494 530 450 527 545 488\n",
      "left [[884, 552, 1033, 638], [725, 453, 819, 509], [614, 393, 662, 421], [990, 612, 1038, 640], [726, 456, 813, 510], [691, 426, 772, 487], [542, 391, 651, 456], [481, 546, 495, 556], [566, 404, 645, 451], [240, 517, 250, 523], [435, 554, 460, 572], [884, 553, 956, 595], [487, 543, 505, 555], [320, 442, 359, 464], [313, 506, 331, 518], [338, 438, 424, 500], [961, 596, 1012, 627], [301, 518, 311, 524]]\n",
      "right [[530, 513, 667, 414], [318, 684, 664, 414], [415, 594, 464, 560], [574, 486, 674, 421], [294, 684, 378, 621], [421, 457, 524, 390], [439, 578, 513, 523], [406, 602, 421, 590], [490, 541, 508, 527], [595, 446, 637, 412], [395, 610, 414, 595], [357, 638, 377, 622], [622, 458, 674, 417], [320, 683, 606, 460], [319, 522, 350, 503], [576, 486, 668, 415], [597, 459, 663, 421], [372, 627, 400, 605], [203, 549, 258, 511], [538, 506, 591, 476], [619, 458, 666, 421], [506, 514, 531, 500], [459, 443, 485, 428]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 1096 0\n",
      "tempsfdvdvdfv 2186 1\n",
      "tempsfdvdvdfv 3195 2\n",
      "tempsfdvdvdfv 3975 3\n",
      "tempsfdvdvdfv 4805 4\n",
      "tempsfdvdvdfv 5816 5\n",
      "tempsfdvdvdfv 6556 6\n",
      "tempsfdvdvdfv 7272 7\n",
      "tempsfdvdvdfv 7813 8\n",
      "tempsfdvdvdfv 8550 9\n",
      "tempsfdvdvdfv 9493 10\n",
      "tempsfdvdvdfv 9914 11\n",
      "tempsfdvdvdfv 10696 12\n",
      "tempsfdvdvdfv 11718 13\n",
      "tempsfdvdvdfv 12314 14\n",
      "tempsfdvdvdfv 13248 15\n",
      "tempsfdvdvdfv 13512 16\n",
      "tempsfdvdvdfv 14054 17\n",
      "tempsfdvdvdfv 14664 18\n",
      "tempsfdvdvdfv 15743 19\n",
      "tempsfdvdvdfv 16251 20\n",
      "avg 21 19 710 773 499 539 427 515 528 466\n",
      "left [[992, 614, 1096, 674], [997, 617, 1090, 672], [915, 570, 1009, 626], [669, 415, 780, 492], [670, 418, 830, 518], [965, 599, 1011, 627], [693, 426, 740, 456], [692, 426, 716, 441], [429, 414, 541, 481], [683, 421, 737, 456], [919, 573, 943, 588], [394, 577, 421, 592], [689, 434, 782, 492], [983, 609, 1022, 633], [554, 428, 596, 461], [920, 574, 934, 583], [244, 526, 264, 538], [450, 406, 542, 461], [568, 402, 610, 430], [1037, 639, 1079, 663], [448, 403, 508, 440]]\n",
      "right [[295, 684, 665, 415], [319, 684, 605, 460], [592, 474, 651, 434], [470, 522, 620, 413], [546, 507, 658, 434], [284, 471, 350, 434], [565, 478, 586, 461], [469, 557, 492, 539], [260, 539, 296, 513], [401, 605, 491, 541], [511, 482, 636, 407], [433, 458, 522, 396], [583, 476, 610, 461], [485, 553, 500, 543], [366, 464, 433, 413], [399, 607, 414, 597], [391, 511, 418, 493], [460, 513, 506, 476], [298, 462, 349, 432]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 784 0\n",
      "tempsfdvdvdfv 1577 1\n",
      "tempsfdvdvdfv 2228 2\n",
      "tempsfdvdvdfv 2737 3\n",
      "tempsfdvdvdfv 3529 4\n",
      "tempsfdvdvdfv 3923 5\n",
      "tempsfdvdvdfv 4418 6\n",
      "tempsfdvdvdfv 5208 7\n",
      "avg 8 32 595 651 441 474 421 484 521 475\n",
      "left [[726, 455, 784, 488], [728, 458, 793, 495], [610, 392, 651, 415], [455, 398, 509, 436], [716, 447, 792, 494], [365, 512, 394, 533], [439, 409, 495, 442], [727, 458, 790, 496]]\n",
      "right [[600, 461, 665, 414], [294, 684, 665, 415], [512, 534, 588, 475], [395, 624, 459, 575], [565, 489, 669, 414], [321, 683, 356, 656], [480, 557, 510, 535], [356, 655, 388, 631], [457, 575, 516, 532], [384, 536, 421, 515], [183, 559, 226, 531], [348, 608, 366, 597], [582, 482, 608, 462], [391, 462, 455, 412], [405, 461, 515, 390], [567, 483, 663, 413], [318, 458, 356, 428], [459, 382, 480, 369], [557, 500, 590, 474], [339, 536, 402, 497], [373, 453, 463, 394], [329, 468, 377, 431], [572, 489, 642, 434], [298, 467, 363, 428], [220, 550, 251, 530], [361, 529, 375, 518], [514, 530, 527, 522], [331, 468, 379, 431], [622, 439, 656, 412], [614, 441, 652, 412], [333, 657, 472, 553], [392, 459, 457, 409]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1095 0\n",
      "tempsfdvdvdfv 1891 1\n",
      "tempsfdvdvdfv 2693 2\n",
      "tempsfdvdvdfv 3162 3\n",
      "tempsfdvdvdfv 3965 4\n",
      "tempsfdvdvdfv 4513 5\n",
      "tempsfdvdvdfv 4934 6\n",
      "tempsfdvdvdfv 5735 7\n",
      "tempsfdvdvdfv 6217 8\n",
      "tempsfdvdvdfv 6784 9\n",
      "tempsfdvdvdfv 7429 10\n",
      "tempsfdvdvdfv 8525 11\n",
      "tempsfdvdvdfv 9003 12\n",
      "tempsfdvdvdfv 9805 13\n",
      "tempsfdvdvdfv 10276 14\n",
      "tempsfdvdvdfv 11076 15\n",
      "avg 16 17 630 692 500 539 380 468 564 502\n",
      "left [[1012, 626, 1095, 674], [667, 415, 796, 502], [783, 488, 802, 500], [361, 505, 469, 567], [728, 459, 803, 502], [529, 469, 548, 484], [391, 613, 421, 632], [696, 434, 801, 502], [391, 501, 482, 556], [439, 401, 567, 487], [624, 408, 645, 420], [1080, 664, 1096, 674], [456, 545, 478, 559], [778, 485, 802, 501], [367, 505, 471, 565], [780, 487, 800, 502]]\n",
      "right [[500, 544, 586, 477], [296, 683, 439, 579], [322, 683, 378, 638], [467, 557, 668, 416], [284, 644, 315, 622], [417, 544, 624, 399], [287, 646, 318, 625], [506, 487, 634, 411], [445, 546, 494, 517], [284, 643, 315, 623], [458, 576, 523, 524], [563, 496, 668, 414], [361, 462, 460, 393], [410, 599, 498, 537], [195, 552, 233, 530], [314, 470, 362, 434], [357, 467, 453, 398]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 814 0\n",
      "tempsfdvdvdfv 1620 1\n",
      "tempsfdvdvdfv 2359 2\n",
      "tempsfdvdvdfv 2932 3\n",
      "tempsfdvdvdfv 3312 4\n",
      "tempsfdvdvdfv 4053 5\n",
      "tempsfdvdvdfv 4733 6\n",
      "tempsfdvdvdfv 5070 7\n",
      "tempsfdvdvdfv 5408 8\n",
      "tempsfdvdvdfv 6090 9\n",
      "avg 10 23 534 609 441 486 388 475 548 485\n",
      "left [[607, 387, 814, 507], [738, 465, 806, 509], [610, 386, 739, 460], [445, 402, 573, 488], [370, 555, 380, 561], [716, 446, 741, 460], [622, 402, 680, 435], [310, 520, 337, 536], [317, 457, 338, 473], [606, 391, 682, 435]]\n",
      "right [[321, 684, 597, 469], [296, 684, 596, 466], [370, 630, 667, 414], [339, 671, 383, 637], [364, 468, 455, 402], [217, 685, 244, 667], [577, 436, 633, 402], [508, 478, 619, 398], [417, 465, 477, 425], [594, 434, 633, 408], [336, 656, 360, 639], [375, 560, 410, 532], [410, 560, 457, 525], [233, 560, 295, 521], [523, 472, 622, 398], [185, 564, 219, 537], [412, 463, 480, 421], [560, 499, 669, 414], [280, 475, 337, 435], [302, 539, 336, 518], [445, 459, 490, 434], [313, 673, 354, 644], [550, 506, 600, 467]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 34%|███▍      | 86/251 [00:02<00:05, 31.37it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 818 0\n",
      "tempsfdvdvdfv 1641 1\n",
      "tempsfdvdvdfv 2467 2\n",
      "tempsfdvdvdfv 3132 3\n",
      "tempsfdvdvdfv 3806 4\n",
      "tempsfdvdvdfv 4124 5\n",
      "tempsfdvdvdfv 4568 6\n",
      "tempsfdvdvdfv 5140 7\n",
      "tempsfdvdvdfv 5745 8\n",
      "tempsfdvdvdfv 5993 9\n",
      "tempsfdvdvdfv 6380 10\n",
      "tempsfdvdvdfv 7201 11\n",
      "tempsfdvdvdfv 7583 12\n",
      "avg 13 16 519 583 466 505 383 490 551 472\n",
      "left [[729, 459, 818, 509], [777, 491, 823, 517], [729, 462, 826, 516], [604, 392, 665, 428], [604, 395, 674, 435], [300, 462, 318, 472], [349, 514, 444, 588], [427, 404, 572, 487], [511, 390, 605, 466], [237, 536, 248, 543], [376, 627, 387, 634], [757, 473, 821, 511], [358, 453, 382, 471]]\n",
      "right [[306, 680, 526, 515], [329, 680, 491, 549], [300, 683, 435, 582], [294, 473, 349, 429], [351, 526, 377, 507], [490, 549, 598, 468], [285, 542, 323, 520], [278, 570, 357, 517], [402, 468, 538, 373], [450, 455, 497, 421], [467, 451, 498, 431], [453, 579, 517, 532], [384, 635, 596, 470], [401, 468, 485, 400], [483, 501, 624, 402], [456, 569, 633, 436]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 836 0\n",
      "tempsfdvdvdfv 1678 1\n",
      "tempsfdvdvdfv 2382 2\n",
      "tempsfdvdvdfv 2995 3\n",
      "tempsfdvdvdfv 3742 4\n",
      "tempsfdvdvdfv 4426 5\n",
      "tempsfdvdvdfv 4928 6\n",
      "tempsfdvdvdfv 5618 7\n",
      "tempsfdvdvdfv 6460 8\n",
      "tempsfdvdvdfv 7170 9\n",
      "tempsfdvdvdfv 7488 10\n",
      "tempsfdvdvdfv 7876 11\n",
      "tempsfdvdvdfv 8500 12\n",
      "tempsfdvdvdfv 9007 13\n",
      "avg 14 11 552 643 438 496 328 420 565 497\n",
      "left [[793, 502, 836, 526], [607, 384, 842, 525], [669, 415, 704, 436], [446, 352, 613, 469], [608, 384, 747, 464], [602, 389, 684, 436], [420, 421, 502, 474], [606, 386, 690, 436], [802, 500, 842, 524], [607, 394, 710, 461], [246, 546, 318, 598], [314, 525, 388, 577], [522, 387, 624, 467], [493, 548, 507, 559]]\n",
      "right [[335, 678, 565, 492], [303, 684, 524, 518], [186, 606, 274, 557], [284, 473, 349, 430], [327, 683, 337, 675], [464, 567, 577, 479], [300, 475, 356, 433], [344, 473, 452, 391], [340, 441, 354, 433], [415, 465, 469, 433], [313, 676, 373, 630]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 855 0\n",
      "tempsfdvdvdfv 1562 1\n",
      "tempsfdvdvdfv 2211 2\n",
      "tempsfdvdvdfv 2888 3\n",
      "tempsfdvdvdfv 3482 4\n",
      "tempsfdvdvdfv 4245 5\n",
      "tempsfdvdvdfv 5095 6\n",
      "avg 7 20 650 727 423 475 364 466 586 513\n",
      "left [[793, 502, 855, 537], [604, 383, 707, 464], [609, 410, 649, 436], [600, 392, 677, 436], [574, 417, 594, 433], [703, 436, 763, 483], [672, 421, 850, 536]]\n",
      "right [[305, 684, 584, 474], [422, 606, 594, 472], [139, 628, 309, 530], [644, 436, 671, 415], [397, 468, 504, 391], [325, 684, 402, 626], [425, 605, 478, 567], [352, 475, 417, 435], [370, 647, 484, 567], [287, 607, 424, 500], [305, 683, 569, 484], [435, 594, 570, 488], [440, 593, 464, 575], [325, 551, 404, 506], [317, 477, 362, 443], [330, 682, 373, 649], [302, 604, 348, 572], [371, 647, 408, 621], [635, 437, 664, 414], [157, 626, 296, 533]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 36%|███▌      | 90/251 [00:02<00:05, 31.14it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 879 0\n",
      "tempsfdvdvdfv 1763 1\n",
      "tempsfdvdvdfv 2112 2\n",
      "tempsfdvdvdfv 2731 3\n",
      "tempsfdvdvdfv 3616 4\n",
      "tempsfdvdvdfv 3888 5\n",
      "tempsfdvdvdfv 4165 6\n",
      "tempsfdvdvdfv 4421 7\n",
      "tempsfdvdvdfv 4820 8\n",
      "tempsfdvdvdfv 5078 9\n",
      "tempsfdvdvdfv 5952 10\n",
      "tempsfdvdvdfv 6206 11\n",
      "tempsfdvdvdfv 6482 12\n",
      "avg 13 12 414 498 523 574 419 524 545 468\n",
      "left [[736, 468, 879, 550], [856, 531, 884, 550], [216, 555, 349, 641], [603, 392, 619, 401], [744, 469, 885, 548], [164, 576, 272, 638], [174, 575, 277, 637], [188, 578, 256, 622], [361, 430, 399, 456], [188, 575, 258, 622], [737, 464, 874, 550], [190, 582, 254, 622], [229, 610, 276, 637]]\n",
      "right [[307, 683, 582, 476], [130, 664, 363, 519], [331, 683, 587, 476], [488, 451, 549, 410], [310, 682, 389, 622], [497, 449, 551, 410], [311, 485, 430, 405], [524, 445, 545, 428], [440, 581, 525, 528], [525, 445, 546, 428], [672, 428, 683, 421], [493, 544, 543, 504]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 905 0\n",
      "tempsfdvdvdfv 1819 1\n",
      "tempsfdvdvdfv 2643 2\n",
      "tempsfdvdvdfv 3492 3\n",
      "tempsfdvdvdfv 4182 4\n",
      "tempsfdvdvdfv 5095 5\n",
      "tempsfdvdvdfv 5472 6\n",
      "tempsfdvdvdfv 6386 7\n",
      "tempsfdvdvdfv 6974 8\n",
      "tempsfdvdvdfv 7723 9\n",
      "tempsfdvdvdfv 8225 10\n",
      "tempsfdvdvdfv 8951 11\n",
      "tempsfdvdvdfv 9703 12\n",
      "tempsfdvdvdfv 10166 13\n",
      "tempsfdvdvdfv 10760 14\n",
      "tempsfdvdvdfv 11163 15\n",
      "tempsfdvdvdfv 11505 16\n",
      "tempsfdvdvdfv 11781 17\n",
      "tempsfdvdvdfv 12465 18\n",
      "tempsfdvdvdfv 13001 19\n",
      "tempsfdvdvdfv 13777 20\n",
      "tempsfdvdvdfv 14553 21\n",
      "avg 22 19 592 661 496 541 380 461 546 489\n",
      "left [[753, 476, 905, 567], [841, 522, 914, 564], [603, 382, 824, 515], [817, 516, 849, 535], [600, 382, 690, 436], [842, 523, 913, 567], [330, 668, 377, 696], [865, 536, 914, 566], [551, 670, 588, 699], [683, 421, 749, 472], [447, 589, 502, 632], [710, 462, 726, 471], [663, 414, 752, 469], [362, 522, 463, 601], [541, 435, 594, 476], [282, 595, 403, 680], [304, 453, 342, 479], [188, 566, 276, 623], [660, 422, 684, 436], [505, 425, 536, 444], [750, 472, 776, 488], [744, 472, 776, 491]]\n",
      "right [[378, 629, 577, 479], [332, 683, 587, 477], [567, 454, 637, 415], [193, 682, 245, 652], [415, 614, 577, 483], [325, 623, 549, 478], [280, 561, 334, 529], [426, 397, 442, 388], [400, 519, 423, 504], [279, 478, 357, 433], [383, 465, 435, 430], [643, 437, 653, 430], [434, 460, 489, 424], [270, 562, 323, 532], [377, 523, 403, 508], [319, 597, 334, 585], [413, 465, 463, 430], [360, 643, 418, 600], [434, 588, 517, 526]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 37%|███▋      | 94/251 [00:02<00:05, 28.57it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 941 0\n",
      "tempsfdvdvdfv 1729 1\n",
      "tempsfdvdvdfv 2682 2\n",
      "tempsfdvdvdfv 3289 3\n",
      "tempsfdvdvdfv 4241 4\n",
      "tempsfdvdvdfv 4629 5\n",
      "tempsfdvdvdfv 4981 6\n",
      "tempsfdvdvdfv 5523 7\n",
      "tempsfdvdvdfv 6157 8\n",
      "tempsfdvdvdfv 6916 9\n",
      "tempsfdvdvdfv 7357 10\n",
      "tempsfdvdvdfv 7909 11\n",
      "tempsfdvdvdfv 8544 12\n",
      "tempsfdvdvdfv 9205 13\n",
      "tempsfdvdvdfv 9874 14\n",
      "avg 15 36 582 658 452 500 315 439 578 495\n",
      "left [[831, 524, 941, 587], [743, 469, 788, 494], [839, 521, 953, 587], [518, 371, 607, 443], [858, 531, 952, 585], [242, 556, 388, 637], [264, 550, 352, 601], [492, 392, 542, 431], [545, 409, 634, 476], [718, 452, 759, 476], [391, 426, 441, 455], [518, 376, 552, 398], [536, 401, 635, 476], [593, 390, 661, 436], [645, 415, 669, 432]]\n",
      "right [[313, 684, 585, 479], [307, 683, 550, 500], [328, 683, 494, 553], [180, 673, 529, 464], [100, 636, 228, 559], [223, 629, 481, 480], [310, 682, 503, 536], [648, 436, 676, 419], [360, 615, 479, 544], [385, 602, 560, 480], [330, 683, 417, 615], [303, 486, 439, 383], [315, 684, 536, 517], [443, 563, 475, 544], [393, 548, 623, 410], [353, 615, 470, 545], [385, 467, 440, 426], [528, 444, 618, 390], [124, 618, 176, 579], [526, 516, 583, 480], [291, 487, 440, 394], [96, 636, 171, 576], [175, 619, 292, 543], [178, 588, 215, 563], [149, 605, 210, 564], [335, 478, 430, 421], [205, 623, 221, 613], [502, 445, 544, 420], [309, 612, 477, 481], [390, 631, 506, 543], [207, 623, 317, 557], [325, 481, 430, 418], [258, 495, 343, 442], [490, 393, 517, 374], [323, 683, 427, 607], [277, 491, 425, 402]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 989 0\n",
      "tempsfdvdvdfv 1676 1\n",
      "tempsfdvdvdfv 2677 2\n",
      "tempsfdvdvdfv 3191 3\n",
      "tempsfdvdvdfv 4106 4\n",
      "tempsfdvdvdfv 4988 5\n",
      "tempsfdvdvdfv 5350 6\n",
      "tempsfdvdvdfv 6108 7\n",
      "tempsfdvdvdfv 6615 8\n",
      "tempsfdvdvdfv 7103 9\n",
      "tempsfdvdvdfv 7891 10\n",
      "tempsfdvdvdfv 8875 11\n",
      "tempsfdvdvdfv 9513 12\n",
      "tempsfdvdvdfv 9820 13\n",
      "avg 14 8 622 701 484 534 294 382 621 556\n",
      "left [[845, 532, 989, 615], [594, 382, 687, 436], [942, 577, 1001, 615], [440, 495, 514, 549], [851, 531, 915, 572], [845, 531, 882, 552], [224, 564, 362, 647], [680, 420, 758, 481], [441, 495, 507, 541], [392, 424, 488, 478], [674, 417, 788, 499], [905, 565, 984, 613], [591, 385, 638, 415], [292, 464, 307, 474]]\n",
      "right [[385, 624, 580, 482], [315, 678, 534, 518], [441, 587, 494, 551], [261, 634, 306, 598], [356, 554, 426, 500], [314, 679, 343, 658], [137, 612, 186, 574], [150, 607, 192, 573]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1096 0\n",
      "tempsfdvdvdfv 2191 1\n",
      "tempsfdvdvdfv 2857 2\n",
      "tempsfdvdvdfv 3959 3\n",
      "tempsfdvdvdfv 4244 4\n",
      "tempsfdvdvdfv 5004 5\n",
      "tempsfdvdvdfv 5988 6\n",
      "tempsfdvdvdfv 6148 7\n",
      "tempsfdvdvdfv 6703 8\n",
      "tempsfdvdvdfv 6984 9\n",
      "tempsfdvdvdfv 7790 10\n",
      "tempsfdvdvdfv 8191 11\n",
      "tempsfdvdvdfv 9263 12\n",
      "avg 13 24 602 712 523 588 318 399 562 506\n",
      "left [[867, 542, 1096, 674], [866, 543, 1095, 675], [589, 385, 666, 435], [1064, 652, 1102, 674], [175, 582, 285, 645], [555, 357, 760, 475], [965, 589, 984, 600], [130, 632, 160, 650], [499, 417, 555, 456], [178, 581, 281, 645], [616, 393, 806, 503], [335, 532, 401, 573], [988, 601, 1072, 649]]\n",
      "right [[312, 683, 563, 487], [318, 476, 433, 387], [168, 595, 210, 571], [628, 436, 657, 413], [80, 656, 234, 564], [335, 474, 408, 427], [85, 652, 230, 565], [397, 464, 467, 425], [450, 571, 523, 512], [81, 649, 225, 566], [310, 683, 399, 611], [334, 673, 358, 654], [370, 468, 426, 436], [336, 673, 529, 517], [398, 573, 474, 516], [269, 493, 365, 433], [264, 493, 364, 433], [152, 597, 172, 582], [383, 575, 466, 517], [73, 656, 101, 634], [408, 407, 431, 394], [643, 435, 669, 419], [499, 686, 520, 670], [344, 439, 363, 428]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1096 0\n",
      "tempsfdvdvdfv 1391 1\n",
      "tempsfdvdvdfv 2361 2\n",
      "tempsfdvdvdfv 2871 3\n",
      "tempsfdvdvdfv 3485 4\n",
      "tempsfdvdvdfv 3657 5\n",
      "tempsfdvdvdfv 4466 6\n",
      "tempsfdvdvdfv 5192 7\n",
      "avg 8 16 576 649 491 534 406 488 546 489\n",
      "left [[892, 557, 1096, 674], [242, 562, 295, 602], [891, 558, 970, 603], [421, 393, 510, 446], [551, 357, 614, 392], [160, 589, 172, 596], [758, 481, 809, 510], [697, 436, 726, 454]]\n",
      "right [[315, 681, 558, 491], [348, 599, 621, 393], [370, 587, 406, 563], [256, 685, 321, 648], [554, 456, 618, 406], [431, 539, 510, 494], [176, 588, 192, 578], [169, 595, 197, 577], [461, 564, 509, 536], [309, 599, 425, 527], [561, 435, 615, 394], [632, 436, 662, 413], [422, 515, 484, 478], [476, 553, 523, 524], [500, 448, 568, 409], [531, 463, 611, 405]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 685 0\n",
      "tempsfdvdvdfv 1456 1\n",
      "tempsfdvdvdfv 2233 2\n",
      "tempsfdvdvdfv 3330 3\n",
      "tempsfdvdvdfv 4368 4\n",
      "tempsfdvdvdfv 5358 5\n",
      "tempsfdvdvdfv 6359 6\n",
      "tempsfdvdvdfv 7182 7\n",
      "tempsfdvdvdfv 7904 8\n",
      "tempsfdvdvdfv 8678 9\n",
      "tempsfdvdvdfv 9768 10\n",
      "tempsfdvdvdfv 10131 11\n",
      "tempsfdvdvdfv 10620 12\n",
      "tempsfdvdvdfv 11336 13\n",
      "tempsfdvdvdfv 12053 14\n",
      "tempsfdvdvdfv 13059 15\n",
      "tempsfdvdvdfv 13408 16\n",
      "tempsfdvdvdfv 13808 17\n",
      "tempsfdvdvdfv 14284 18\n",
      "tempsfdvdvdfv 14641 19\n",
      "avg 20 7 665 732 512 553 386 448 564 522\n",
      "left [[581, 376, 685, 436], [582, 376, 771, 481], [759, 482, 777, 492], [1043, 642, 1097, 673], [933, 576, 1038, 641], [932, 580, 990, 614], [929, 576, 1001, 620], [591, 377, 823, 516], [621, 390, 722, 453], [758, 482, 774, 491], [1037, 639, 1090, 670], [339, 664, 363, 682], [463, 564, 489, 585], [698, 431, 716, 443], [686, 425, 717, 446], [977, 601, 1006, 623], [319, 446, 349, 470], [355, 524, 400, 553], [387, 514, 476, 581], [326, 588, 357, 607]]\n",
      "right [[332, 684, 388, 640], [317, 679, 362, 651], [471, 541, 550, 496], [251, 595, 373, 519], [545, 459, 606, 412], [329, 470, 384, 430], [457, 525, 479, 508]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 487 0\n",
      "tempsfdvdvdfv 938 1\n",
      "tempsfdvdvdfv 1666 2\n",
      "tempsfdvdvdfv 2117 3\n",
      "tempsfdvdvdfv 2574 4\n",
      "tempsfdvdvdfv 3363 5\n",
      "tempsfdvdvdfv 3908 6\n",
      "tempsfdvdvdfv 4523 7\n",
      "tempsfdvdvdfv 5185 8\n",
      "tempsfdvdvdfv 5927 9\n",
      "avg 10 15 543 592 421 454 337 427 532 469\n",
      "left [[344, 537, 487, 633], [422, 372, 451, 392], [713, 446, 728, 455], [418, 371, 451, 393], [419, 375, 457, 400], [675, 426, 789, 497], [501, 428, 545, 458], [588, 375, 615, 395], [630, 414, 662, 436], [723, 474, 742, 487]]\n",
      "right [[319, 679, 543, 498], [307, 481, 423, 390], [229, 628, 406, 504], [388, 569, 496, 502], [269, 484, 382, 419], [139, 631, 246, 562], [407, 454, 458, 425], [324, 575, 428, 497], [519, 400, 533, 392], [416, 461, 479, 423], [174, 624, 252, 561], [357, 532, 386, 512], [323, 553, 383, 513], [471, 453, 525, 418], [426, 459, 471, 423]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 39%|███▊      | 97/251 [00:02<00:05, 27.42it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 551 0\n",
      "tempsfdvdvdfv 964 1\n",
      "tempsfdvdvdfv 1497 2\n",
      "tempsfdvdvdfv 2244 3\n",
      "tempsfdvdvdfv 2675 4\n",
      "tempsfdvdvdfv 3357 5\n",
      "tempsfdvdvdfv 4071 6\n",
      "tempsfdvdvdfv 4802 7\n",
      "tempsfdvdvdfv 5470 8\n",
      "tempsfdvdvdfv 6199 9\n",
      "tempsfdvdvdfv 6824 10\n",
      "tempsfdvdvdfv 7417 11\n",
      "tempsfdvdvdfv 8217 12\n",
      "avg 13 13 558 632 440 488 344 421 601 546\n",
      "left [[337, 531, 551, 670], [356, 636, 413, 679], [493, 370, 533, 396], [725, 478, 747, 492], [352, 435, 431, 496], [605, 387, 682, 438], [661, 412, 714, 447], [653, 415, 731, 460], [638, 418, 668, 437], [587, 376, 729, 458], [579, 403, 625, 438], [493, 369, 593, 434], [785, 493, 800, 502]]\n",
      "right [[307, 687, 532, 505], [371, 696, 457, 645], [122, 613, 132, 605], [511, 523, 532, 508], [55, 672, 142, 604], [427, 677, 503, 631], [463, 659, 473, 653], [474, 453, 536, 417], [300, 661, 312, 654], [271, 489, 420, 389], [306, 687, 472, 553], [379, 470, 456, 426], [491, 535, 516, 520]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 732 0\n",
      "tempsfdvdvdfv 1251 1\n",
      "tempsfdvdvdfv 1841 2\n",
      "tempsfdvdvdfv 2368 3\n",
      "tempsfdvdvdfv 2990 4\n",
      "tempsfdvdvdfv 3271 5\n",
      "tempsfdvdvdfv 3496 6\n",
      "tempsfdvdvdfv 4307 7\n",
      "tempsfdvdvdfv 4854 8\n",
      "tempsfdvdvdfv 5568 9\n",
      "tempsfdvdvdfv 5987 10\n",
      "tempsfdvdvdfv 6398 11\n",
      "tempsfdvdvdfv 7189 12\n",
      "tempsfdvdvdfv 7536 13\n",
      "avg 14 14 482 538 472 507 388 476 527 464\n",
      "left [[654, 412, 732, 459], [460, 428, 519, 466], [488, 367, 590, 433], [462, 420, 527, 464], [582, 411, 622, 438], [217, 573, 281, 615], [178, 587, 225, 616], [783, 491, 811, 507], [462, 405, 547, 458], [660, 411, 714, 441], [367, 430, 419, 460], [344, 654, 411, 698], [775, 490, 791, 502], [329, 542, 347, 553]]\n",
      "right [[304, 688, 523, 511], [289, 484, 416, 388], [497, 448, 582, 386], [88, 656, 235, 567], [386, 407, 416, 387], [328, 611, 400, 555], [270, 483, 350, 429], [331, 611, 407, 555], [511, 469, 607, 394], [202, 631, 275, 580], [539, 460, 611, 410], [451, 568, 537, 512], [608, 427, 635, 412], [640, 437, 670, 419]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 40%|███▉      | 100/251 [00:02<00:05, 25.66it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 718 0\n",
      "tempsfdvdvdfv 1541 1\n",
      "tempsfdvdvdfv 2257 2\n",
      "tempsfdvdvdfv 3074 3\n",
      "tempsfdvdvdfv 3736 4\n",
      "tempsfdvdvdfv 4422 5\n",
      "tempsfdvdvdfv 4941 6\n",
      "tempsfdvdvdfv 5521 7\n",
      "tempsfdvdvdfv 6199 8\n",
      "tempsfdvdvdfv 7011 9\n",
      "tempsfdvdvdfv 7602 10\n",
      "tempsfdvdvdfv 8280 11\n",
      "tempsfdvdvdfv 8861 12\n",
      "avg 13 25 611 681 420 464 373 455 549 491\n",
      "left [[658, 410, 718, 448], [795, 499, 823, 515], [617, 388, 716, 448], [782, 494, 817, 515], [534, 348, 662, 419], [533, 349, 686, 437], [446, 419, 519, 465], [496, 388, 580, 447], [661, 496, 678, 508], [780, 496, 812, 514], [494, 374, 591, 444], [649, 414, 678, 431], [501, 387, 581, 447]]\n",
      "right [[301, 684, 513, 519], [99, 637, 209, 574], [542, 440, 616, 391], [304, 683, 507, 524], [80, 662, 203, 576], [265, 590, 347, 524], [558, 438, 609, 407], [521, 441, 576, 400], [649, 436, 663, 426], [527, 440, 591, 392], [340, 475, 533, 355], [406, 616, 484, 563], [340, 661, 351, 653], [246, 593, 385, 510], [296, 483, 409, 392], [387, 548, 413, 531], [300, 603, 352, 569], [453, 575, 527, 519], [554, 438, 607, 404], [138, 657, 164, 637], [383, 466, 503, 372], [438, 589, 474, 561], [265, 487, 351, 427], [414, 651, 431, 641], [533, 441, 564, 420]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 765 0\n",
      "tempsfdvdvdfv 1605 1\n",
      "tempsfdvdvdfv 2324 2\n",
      "tempsfdvdvdfv 3009 3\n",
      "tempsfdvdvdfv 3523 4\n",
      "tempsfdvdvdfv 4191 5\n",
      "tempsfdvdvdfv 4923 6\n",
      "tempsfdvdvdfv 5582 7\n",
      "tempsfdvdvdfv 6269 8\n",
      "tempsfdvdvdfv 7108 9\n",
      "tempsfdvdvdfv 7759 10\n",
      "tempsfdvdvdfv 8478 11\n",
      "tempsfdvdvdfv 9237 12\n",
      "tempsfdvdvdfv 9988 13\n",
      "tempsfdvdvdfv 10646 14\n",
      "avg 15 12 643 709 425 466 347 450 550 475\n",
      "left [[740, 488, 765, 507], [806, 505, 840, 524], [659, 413, 719, 447], [576, 374, 685, 437], [406, 382, 514, 467], [532, 346, 668, 437], [577, 373, 732, 459], [639, 420, 659, 432], [576, 373, 687, 437], [805, 505, 839, 524], [596, 398, 651, 437], [682, 424, 719, 449], [741, 488, 759, 500], [733, 495, 751, 506], [590, 393, 658, 437]]\n",
      "right [[302, 683, 499, 529], [159, 608, 215, 572], [285, 472, 410, 391], [272, 481, 410, 388], [687, 515, 734, 486], [611, 439, 646, 411], [273, 487, 409, 377], [302, 682, 497, 529], [527, 443, 612, 386], [264, 489, 327, 438], [178, 632, 309, 537], [306, 680, 338, 656]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 858 0\n",
      "tempsfdvdvdfv 1598 1\n",
      "tempsfdvdvdfv 2164 2\n",
      "tempsfdvdvdfv 2669 3\n",
      "tempsfdvdvdfv 3347 4\n",
      "tempsfdvdvdfv 4067 5\n",
      "tempsfdvdvdfv 4923 6\n",
      "tempsfdvdvdfv 5524 7\n",
      "tempsfdvdvdfv 6238 8\n",
      "tempsfdvdvdfv 6706 9\n",
      "tempsfdvdvdfv 7563 10\n",
      "tempsfdvdvdfv 8297 11\n",
      "avg 12 10 633 691 432 470 349 444 580 510\n",
      "left [[812, 506, 858, 533], [615, 387, 740, 465], [478, 365, 566, 436], [390, 400, 505, 469], [574, 371, 678, 431], [706, 509, 720, 520], [810, 506, 856, 534], [570, 399, 601, 424], [667, 413, 714, 440], [450, 326, 468, 338], [811, 506, 857, 534], [717, 506, 734, 517]]\n",
      "right [[269, 706, 482, 540], [513, 445, 598, 388], [207, 596, 308, 536], [270, 487, 406, 384], [295, 684, 480, 540], [306, 699, 326, 683], [186, 681, 225, 653], [511, 445, 595, 384], [357, 653, 414, 611], [577, 411, 613, 389]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 41%|████      | 103/251 [00:02<00:05, 26.33it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 881 0\n",
      "tempsfdvdvdfv 1555 1\n",
      "tempsfdvdvdfv 2241 2\n",
      "tempsfdvdvdfv 2982 3\n",
      "tempsfdvdvdfv 3696 4\n",
      "tempsfdvdvdfv 4416 5\n",
      "tempsfdvdvdfv 5120 6\n",
      "tempsfdvdvdfv 5815 7\n",
      "tempsfdvdvdfv 6249 8\n",
      "tempsfdvdvdfv 6891 9\n",
      "tempsfdvdvdfv 7329 10\n",
      "tempsfdvdvdfv 7844 11\n",
      "tempsfdvdvdfv 8427 12\n",
      "tempsfdvdvdfv 9050 13\n",
      "tempsfdvdvdfv 9558 14\n",
      "tempsfdvdvdfv 10113 15\n",
      "avg 16 5 553 632 407 458 293 378 602 539\n",
      "left [[827, 516, 881, 547], [629, 414, 674, 439], [522, 343, 686, 438], [573, 369, 741, 466], [664, 412, 714, 442], [576, 368, 720, 451], [684, 518, 704, 533], [676, 520, 695, 534], [398, 371, 434, 395], [522, 345, 642, 438], [398, 373, 438, 400], [436, 418, 515, 467], [479, 366, 583, 447], [565, 400, 623, 439], [429, 425, 508, 469], [475, 368, 555, 426]]\n",
      "right [[312, 670, 462, 556], [447, 578, 475, 558], [97, 635, 116, 622], [312, 448, 402, 387], [297, 683, 435, 575]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 429 0\n",
      "tempsfdvdvdfv 994 1\n",
      "tempsfdvdvdfv 1766 2\n",
      "tempsfdvdvdfv 2336 3\n",
      "tempsfdvdvdfv 3110 4\n",
      "tempsfdvdvdfv 3884 5\n",
      "tempsfdvdvdfv 4657 6\n",
      "tempsfdvdvdfv 5317 7\n",
      "tempsfdvdvdfv 5761 8\n",
      "tempsfdvdvdfv 6250 9\n",
      "tempsfdvdvdfv 6682 10\n",
      "tempsfdvdvdfv 7136 11\n",
      "tempsfdvdvdfv 7737 12\n",
      "tempsfdvdvdfv 8473 13\n",
      "tempsfdvdvdfv 9062 14\n",
      "tempsfdvdvdfv 9599 15\n",
      "tempsfdvdvdfv 10040 16\n",
      "tempsfdvdvdfv 10488 17\n",
      "avg 18 14 525 582 431 467 400 458 540 498\n",
      "left [[357, 418, 429, 460], [509, 339, 565, 377], [732, 466, 772, 489], [464, 368, 570, 432], [732, 465, 774, 489], [734, 463, 774, 486], [731, 465, 773, 489], [621, 415, 660, 439], [360, 407, 444, 457], [426, 429, 489, 475], [362, 419, 432, 459], [376, 403, 454, 455], [569, 534, 601, 559], [717, 528, 736, 542], [475, 357, 589, 431], [477, 426, 537, 461], [403, 435, 441, 457], [417, 432, 448, 452]]\n",
      "right [[291, 684, 431, 579], [534, 442, 615, 387], [657, 439, 678, 425], [342, 645, 419, 587], [525, 443, 588, 397], [143, 613, 184, 580], [461, 574, 481, 561], [663, 433, 675, 425], [282, 472, 399, 390], [295, 682, 338, 654], [521, 444, 569, 409], [336, 475, 409, 426], [420, 599, 455, 575], [132, 616, 177, 583]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 42%|████▏     | 106/251 [00:03<00:05, 24.64it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 884 0\n",
      "tempsfdvdvdfv 1661 1\n",
      "tempsfdvdvdfv 2327 2\n",
      "tempsfdvdvdfv 2988 3\n",
      "tempsfdvdvdfv 3597 4\n",
      "tempsfdvdvdfv 4314 5\n",
      "tempsfdvdvdfv 4829 6\n",
      "tempsfdvdvdfv 5517 7\n",
      "tempsfdvdvdfv 6162 8\n",
      "tempsfdvdvdfv 6665 9\n",
      "tempsfdvdvdfv 7172 10\n",
      "tempsfdvdvdfv 7753 11\n",
      "avg 12 19 589 646 443 479 422 479 545 505\n",
      "left [[868, 544, 884, 553], [735, 466, 777, 491], [634, 416, 666, 434], [618, 539, 661, 568], [570, 366, 609, 389], [589, 374, 717, 451], [460, 434, 515, 468], [610, 387, 688, 434], [608, 542, 645, 570], [438, 425, 503, 472], [437, 428, 507, 470], [503, 400, 581, 448]]\n",
      "right [[598, 443, 633, 416], [625, 440, 658, 416], [307, 670, 404, 599], [368, 640, 427, 598], [350, 653, 367, 642], [291, 682, 305, 673], [432, 598, 499, 551], [434, 598, 462, 582], [441, 597, 501, 557], [375, 634, 425, 599], [624, 440, 659, 415], [292, 682, 406, 599], [433, 598, 502, 552], [284, 472, 395, 385], [559, 379, 577, 368], [280, 476, 395, 392], [449, 457, 499, 427], [556, 436, 600, 407], [334, 465, 387, 432]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 783 0\n",
      "tempsfdvdvdfv 1427 1\n",
      "tempsfdvdvdfv 1986 2\n",
      "tempsfdvdvdfv 2562 3\n",
      "tempsfdvdvdfv 3500 4\n",
      "tempsfdvdvdfv 3991 5\n",
      "tempsfdvdvdfv 4477 6\n",
      "tempsfdvdvdfv 5338 7\n",
      "tempsfdvdvdfv 6051 8\n",
      "tempsfdvdvdfv 7103 9\n",
      "tempsfdvdvdfv 7889 10\n",
      "tempsfdvdvdfv 8716 11\n",
      "tempsfdvdvdfv 9218 12\n",
      "tempsfdvdvdfv 9769 13\n",
      "tempsfdvdvdfv 10606 14\n",
      "tempsfdvdvdfv 11123 15\n",
      "tempsfdvdvdfv 11961 16\n",
      "tempsfdvdvdfv 12518 17\n",
      "tempsfdvdvdfv 13114 18\n",
      "tempsfdvdvdfv 13684 19\n",
      "tempsfdvdvdfv 14365 20\n",
      "avg 21 26 616 684 447 493 370 449 563 509\n",
      "left [[662, 411, 783, 499], [561, 380, 644, 438], [458, 382, 559, 455], [462, 358, 576, 450], [856, 533, 938, 582], [454, 386, 491, 407], [388, 384, 486, 445], [851, 553, 861, 561], [673, 416, 713, 445], [1042, 710, 1052, 718], [672, 416, 786, 499], [783, 530, 827, 564], [457, 363, 502, 389], [462, 369, 551, 437], [793, 534, 837, 563], [392, 392, 517, 467], [798, 536, 838, 563], [464, 370, 557, 438], [559, 423, 596, 444], [552, 563, 570, 573], [604, 391, 681, 435]]\n",
      "right [[288, 684, 361, 633], [305, 685, 423, 608], [326, 683, 482, 570], [339, 679, 366, 659], [327, 683, 436, 610], [283, 472, 409, 394], [306, 685, 336, 666], [348, 655, 415, 613], [310, 481, 501, 337], [266, 488, 357, 429], [304, 482, 414, 399], [393, 631, 430, 608], [278, 486, 366, 427], [319, 440, 385, 402], [419, 461, 488, 420], [455, 364, 500, 331], [287, 485, 372, 430], [714, 564, 757, 540], [334, 476, 512, 347], [313, 481, 418, 402], [330, 683, 358, 666], [331, 669, 346, 659], [320, 439, 386, 401], [332, 678, 422, 608], [357, 412, 392, 391], [1052, 717, 1065, 709]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 688 0\n",
      "tempsfdvdvdfv 1329 1\n",
      "tempsfdvdvdfv 1886 2\n",
      "tempsfdvdvdfv 2359 3\n",
      "tempsfdvdvdfv 2893 4\n",
      "tempsfdvdvdfv 3650 5\n",
      "tempsfdvdvdfv 4574 6\n",
      "tempsfdvdvdfv 4955 7\n",
      "tempsfdvdvdfv 5899 8\n",
      "tempsfdvdvdfv 6444 9\n",
      "tempsfdvdvdfv 7196 10\n",
      "tempsfdvdvdfv 7866 11\n",
      "tempsfdvdvdfv 8794 12\n",
      "tempsfdvdvdfv 9367 13\n",
      "tempsfdvdvdfv 10272 14\n",
      "avg 15 10 639 684 465 497 373 418 529 499\n",
      "left [[607, 395, 688, 440], [553, 375, 641, 441], [529, 418, 557, 438], [446, 373, 473, 394], [447, 378, 534, 441], [686, 423, 757, 479], [852, 543, 924, 585], [345, 434, 381, 463], [932, 588, 944, 595], [484, 393, 545, 430], [740, 471, 752, 479], [646, 403, 670, 419], [917, 570, 928, 578], [510, 647, 573, 698], [891, 567, 905, 576]]\n",
      "right [[333, 476, 385, 434], [344, 682, 427, 633], [358, 465, 420, 415], [375, 696, 398, 680], [410, 461, 482, 419], [267, 488, 301, 468], [264, 489, 295, 466], [399, 680, 428, 660], [346, 422, 379, 403], [643, 437, 669, 419]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 43%|████▎     | 109/251 [00:03<00:05, 25.98it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 568 0\n",
      "tempsfdvdvdfv 1157 1\n",
      "tempsfdvdvdfv 1650 2\n",
      "tempsfdvdvdfv 2521 3\n",
      "tempsfdvdvdfv 3491 4\n",
      "tempsfdvdvdfv 4415 5\n",
      "tempsfdvdvdfv 5037 6\n",
      "tempsfdvdvdfv 5793 7\n",
      "tempsfdvdvdfv 6392 8\n",
      "tempsfdvdvdfv 6755 9\n",
      "tempsfdvdvdfv 7348 10\n",
      "tempsfdvdvdfv 7902 11\n",
      "tempsfdvdvdfv 8664 12\n",
      "tempsfdvdvdfv 9156 13\n",
      "tempsfdvdvdfv 9732 14\n",
      "tempsfdvdvdfv 10493 15\n",
      "tempsfdvdvdfv 11077 16\n",
      "tempsfdvdvdfv 11708 17\n",
      "tempsfdvdvdfv 12299 18\n",
      "tempsfdvdvdfv 12863 19\n",
      "tempsfdvdvdfv 13787 20\n",
      "tempsfdvdvdfv 14762 21\n",
      "tempsfdvdvdfv 15637 22\n",
      "tempsfdvdvdfv 15996 23\n",
      "tempsfdvdvdfv 16669 24\n",
      "tempsfdvdvdfv 17648 25\n",
      "tempsfdvdvdfv 18103 26\n",
      "avg 27 11 619 670 450 484 569 611 600 572\n",
      "left [[539, 418, 568, 435], [547, 418, 589, 444], [443, 363, 493, 392], [859, 601, 871, 609], [885, 554, 970, 613], [899, 586, 924, 604], [562, 399, 622, 435], [661, 411, 756, 482], [564, 422, 599, 442], [325, 447, 363, 471], [453, 359, 593, 443], [443, 374, 554, 455], [669, 415, 762, 482], [447, 363, 492, 390], [563, 405, 576, 413], [724, 457, 761, 483], [563, 407, 584, 420], [550, 375, 631, 434], [551, 420, 591, 444], [520, 423, 564, 452], [879, 556, 924, 589], [962, 607, 975, 615], [844, 591, 875, 613], [334, 446, 359, 462], [570, 365, 673, 434], [949, 566, 979, 584], [420, 427, 455, 454]]\n",
      "right [[474, 642, 542, 603], [450, 556, 473, 539], [748, 602, 820, 557], [304, 628, 319, 618], [441, 369, 492, 337], [378, 697, 414, 677], [791, 635, 845, 596], [476, 643, 522, 609], [852, 585, 904, 555], [775, 528, 805, 508], [572, 715, 594, 700]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1074 0\n",
      "tempsfdvdvdfv 1721 1\n",
      "tempsfdvdvdfv 2487 2\n",
      "tempsfdvdvdfv 3336 3\n",
      "tempsfdvdvdfv 3967 4\n",
      "tempsfdvdvdfv 4621 5\n",
      "tempsfdvdvdfv 5602 6\n",
      "tempsfdvdvdfv 6556 7\n",
      "tempsfdvdvdfv 7359 8\n",
      "tempsfdvdvdfv 7943 9\n",
      "tempsfdvdvdfv 8810 10\n",
      "tempsfdvdvdfv 9849 11\n",
      "tempsfdvdvdfv 10926 12\n",
      "tempsfdvdvdfv 11918 13\n",
      "tempsfdvdvdfv 12587 14\n",
      "tempsfdvdvdfv 13229 15\n",
      "tempsfdvdvdfv 14142 16\n",
      "tempsfdvdvdfv 15039 17\n",
      "tempsfdvdvdfv 15934 18\n",
      "tempsfdvdvdfv 16851 19\n",
      "tempsfdvdvdfv 17347 20\n",
      "tempsfdvdvdfv 17763 21\n",
      "tempsfdvdvdfv 18313 22\n",
      "avg 23 16 724 796 516 565 569 629 557 518\n",
      "left [[903, 572, 1074, 670], [549, 374, 647, 440], [645, 410, 766, 483], [813, 555, 849, 579], [546, 376, 631, 440], [616, 415, 654, 441], [858, 580, 981, 676], [882, 618, 954, 676], [780, 604, 803, 620], [452, 359, 584, 445], [810, 591, 867, 634], [995, 580, 1039, 612], [1009, 634, 1077, 676], [947, 643, 992, 676], [558, 360, 669, 441], [546, 374, 642, 441], [818, 514, 913, 578], [882, 663, 897, 673], [864, 584, 895, 607], [869, 612, 917, 648], [486, 655, 496, 662], [364, 430, 416, 460], [462, 379, 550, 438]]\n",
      "right [[772, 597, 866, 543], [588, 444, 647, 407], [208, 685, 253, 658], [616, 441, 660, 411], [426, 573, 438, 565], [671, 662, 856, 542], [300, 480, 407, 411], [828, 562, 857, 542], [679, 661, 835, 571], [546, 373, 563, 361], [428, 571, 440, 563], [487, 660, 520, 637], [649, 440, 676, 424], [666, 659, 719, 626], [963, 620, 981, 609], [280, 484, 357, 428]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1078 0\n",
      "tempsfdvdvdfv 1985 1\n",
      "tempsfdvdvdfv 2943 2\n",
      "tempsfdvdvdfv 3514 3\n",
      "tempsfdvdvdfv 3969 4\n",
      "tempsfdvdvdfv 4698 5\n",
      "tempsfdvdvdfv 5672 6\n",
      "tempsfdvdvdfv 6626 7\n",
      "tempsfdvdvdfv 7399 8\n",
      "tempsfdvdvdfv 8273 9\n",
      "tempsfdvdvdfv 8850 10\n",
      "tempsfdvdvdfv 9688 11\n",
      "tempsfdvdvdfv 10810 12\n",
      "tempsfdvdvdfv 11368 13\n",
      "tempsfdvdvdfv 12492 14\n",
      "tempsfdvdvdfv 13057 15\n",
      "tempsfdvdvdfv 13785 16\n",
      "tempsfdvdvdfv 14857 17\n",
      "tempsfdvdvdfv 15805 18\n",
      "avg 19 6 754 831 511 564 514 560 568 539\n",
      "left [[1011, 637, 1078, 677], [832, 620, 907, 668], [882, 557, 958, 603], [445, 357, 571, 449], [377, 391, 455, 454], [649, 413, 729, 459], [840, 572, 974, 673], [884, 557, 954, 604], [751, 476, 773, 489], [791, 610, 874, 662], [556, 360, 577, 372], [788, 610, 838, 642], [1056, 619, 1122, 670], [428, 362, 558, 453], [1070, 623, 1124, 662], [439, 356, 565, 451], [649, 410, 728, 457], [1011, 638, 1072, 677], [885, 557, 948, 599]]\n",
      "right [[395, 594, 445, 557], [661, 433, 675, 424], [305, 684, 324, 669], [281, 476, 404, 405], [417, 575, 445, 558], [1027, 648, 1069, 623]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 45%|████▍     | 112/251 [00:03<00:05, 25.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 990 0\n",
      "tempsfdvdvdfv 1882 1\n",
      "tempsfdvdvdfv 2523 2\n",
      "tempsfdvdvdfv 3304 3\n",
      "tempsfdvdvdfv 4319 4\n",
      "tempsfdvdvdfv 5289 5\n",
      "tempsfdvdvdfv 6018 6\n",
      "tempsfdvdvdfv 6735 7\n",
      "tempsfdvdvdfv 7366 8\n",
      "tempsfdvdvdfv 8330 9\n",
      "tempsfdvdvdfv 9108 10\n",
      "tempsfdvdvdfv 9838 11\n",
      "tempsfdvdvdfv 10843 12\n",
      "tempsfdvdvdfv 11796 13\n",
      "tempsfdvdvdfv 12441 14\n",
      "tempsfdvdvdfv 13409 15\n",
      "tempsfdvdvdfv 13939 16\n",
      "tempsfdvdvdfv 14954 17\n",
      "tempsfdvdvdfv 15469 18\n",
      "tempsfdvdvdfv 15843 19\n",
      "tempsfdvdvdfv 16798 20\n",
      "tempsfdvdvdfv 17836 21\n",
      "tempsfdvdvdfv 18781 22\n",
      "tempsfdvdvdfv 19438 23\n",
      "tempsfdvdvdfv 20213 24\n",
      "tempsfdvdvdfv 20600 25\n",
      "avg 26 9 729 792 498 541 488 553 561 515\n",
      "left [[938, 642, 990, 677], [868, 596, 892, 613], [540, 370, 641, 441], [647, 409, 781, 493], [994, 625, 1015, 638], [867, 596, 970, 677], [655, 409, 729, 457], [706, 434, 717, 441], [477, 332, 631, 440], [865, 597, 964, 677], [755, 480, 778, 494], [649, 408, 730, 458], [959, 597, 1005, 630], [918, 577, 953, 600], [501, 351, 645, 441], [893, 627, 968, 677], [422, 359, 530, 437], [921, 576, 1015, 637], [496, 428, 515, 440], [329, 432, 374, 465], [919, 576, 955, 600], [1023, 635, 1038, 644], [913, 579, 945, 599], [609, 412, 657, 441], [755, 481, 775, 493], [339, 425, 387, 461]]\n",
      "right [[341, 632, 422, 571], [293, 489, 383, 424], [277, 483, 396, 403], [326, 660, 338, 651], [975, 675, 990, 666], [433, 457, 548, 373], [349, 625, 422, 570], [435, 361, 454, 348], [971, 674, 1025, 635]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 788 0\n",
      "tempsfdvdvdfv 1576 1\n",
      "tempsfdvdvdfv 2591 2\n",
      "tempsfdvdvdfv 3599 3\n",
      "tempsfdvdvdfv 4177 4\n",
      "tempsfdvdvdfv 4744 5\n",
      "tempsfdvdvdfv 5533 6\n",
      "tempsfdvdvdfv 6221 7\n",
      "tempsfdvdvdfv 6783 8\n",
      "tempsfdvdvdfv 7258 9\n",
      "tempsfdvdvdfv 7821 10\n",
      "tempsfdvdvdfv 8835 11\n",
      "tempsfdvdvdfv 9838 12\n",
      "tempsfdvdvdfv 10848 13\n",
      "tempsfdvdvdfv 11403 14\n",
      "tempsfdvdvdfv 12136 15\n",
      "tempsfdvdvdfv 12817 16\n",
      "tempsfdvdvdfv 13503 17\n",
      "tempsfdvdvdfv 14053 18\n",
      "tempsfdvdvdfv 14604 19\n",
      "tempsfdvdvdfv 15271 20\n",
      "tempsfdvdvdfv 16038 21\n",
      "tempsfdvdvdfv 16703 22\n",
      "tempsfdvdvdfv 17355 23\n",
      "tempsfdvdvdfv 17916 24\n",
      "tempsfdvdvdfv 18457 25\n",
      "tempsfdvdvdfv 19113 26\n",
      "tempsfdvdvdfv 19792 27\n",
      "tempsfdvdvdfv 20523 28\n",
      "tempsfdvdvdfv 21003 29\n",
      "tempsfdvdvdfv 21933 30\n",
      "tempsfdvdvdfv 22552 31\n",
      "tempsfdvdvdfv 23096 32\n",
      "avg 33 18 633 699 438 481 439 501 519 478\n",
      "left [[761, 480, 788, 496], [760, 481, 788, 497], [959, 599, 1015, 631], [955, 599, 1008, 631], [540, 417, 578, 443], [472, 332, 567, 385], [762, 479, 789, 494], [596, 386, 688, 439], [519, 414, 562, 448], [428, 414, 475, 443], [430, 343, 563, 447], [958, 599, 1014, 631], [954, 602, 1003, 630], [996, 623, 1010, 631], [465, 382, 555, 450], [648, 406, 733, 457], [598, 389, 681, 439], [641, 408, 686, 439], [436, 368, 550, 451], [422, 352, 551, 433], [626, 416, 667, 439], [650, 410, 767, 481], [645, 410, 665, 422], [521, 366, 652, 439], [435, 366, 561, 448], [445, 387, 541, 454], [621, 414, 656, 434], [640, 409, 679, 431], [653, 407, 731, 455], [434, 417, 480, 445], [917, 632, 930, 640], [572, 401, 619, 439], [436, 369, 544, 453]]\n",
      "right [[261, 685, 381, 595], [272, 676, 346, 619], [310, 473, 398, 422], [515, 439, 597, 388], [293, 463, 358, 421], [304, 474, 383, 412], [1021, 631, 1039, 618], [295, 463, 381, 415], [250, 501, 375, 429], [444, 385, 510, 339], [637, 439, 664, 422], [349, 459, 472, 386], [352, 615, 382, 595], [450, 386, 468, 374], [622, 439, 662, 415], [967, 672, 978, 664], [313, 643, 370, 604], [251, 505, 261, 499]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 46%|████▌     | 115/251 [00:03<00:05, 24.92it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 590 0\n",
      "tempsfdvdvdfv 1557 1\n",
      "tempsfdvdvdfv 2127 2\n",
      "tempsfdvdvdfv 2801 3\n",
      "tempsfdvdvdfv 3589 4\n",
      "tempsfdvdvdfv 4388 5\n",
      "tempsfdvdvdfv 5027 6\n",
      "tempsfdvdvdfv 5497 7\n",
      "tempsfdvdvdfv 5954 8\n",
      "tempsfdvdvdfv 6637 9\n",
      "tempsfdvdvdfv 7127 10\n",
      "tempsfdvdvdfv 7691 11\n",
      "tempsfdvdvdfv 8486 12\n",
      "tempsfdvdvdfv 9454 13\n",
      "tempsfdvdvdfv 9994 14\n",
      "avg 15 17 579 666 418 474 450 484 592 567\n",
      "left [[468, 362, 590, 438], [915, 638, 967, 673], [428, 361, 570, 443], [595, 385, 674, 430], [701, 430, 788, 498], [645, 404, 799, 500], [466, 325, 639, 433], [423, 411, 470, 444], [415, 419, 457, 444], [629, 408, 683, 438], [466, 372, 490, 386], [467, 327, 564, 383], [727, 452, 795, 501], [914, 638, 968, 673], [426, 346, 540, 432]]\n",
      "right [[271, 684, 339, 634], [292, 652, 315, 637], [587, 438, 627, 406], [547, 450, 599, 409], [403, 588, 428, 568], [285, 470, 354, 421], [583, 439, 629, 406], [275, 663, 294, 652], [249, 682, 300, 648], [320, 439, 344, 422], [910, 714, 962, 673], [321, 631, 331, 625], [490, 644, 517, 623], [494, 643, 521, 628], [303, 646, 333, 623], [910, 713, 925, 701], [415, 577, 425, 571]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 810 0\n",
      "tempsfdvdvdfv 1615 1\n",
      "tempsfdvdvdfv 2710 2\n",
      "tempsfdvdvdfv 3671 3\n",
      "tempsfdvdvdfv 4238 4\n",
      "tempsfdvdvdfv 4793 5\n",
      "tempsfdvdvdfv 5448 6\n",
      "tempsfdvdvdfv 6185 7\n",
      "tempsfdvdvdfv 6828 8\n",
      "tempsfdvdvdfv 7792 9\n",
      "tempsfdvdvdfv 8217 10\n",
      "tempsfdvdvdfv 9205 11\n",
      "tempsfdvdvdfv 9940 12\n",
      "tempsfdvdvdfv 10610 13\n",
      "tempsfdvdvdfv 11291 14\n",
      "tempsfdvdvdfv 11855 15\n",
      "tempsfdvdvdfv 12645 16\n",
      "avg 17 7 692 743 473 505 305 373 591 547\n",
      "left [[774, 483, 810, 503], [772, 486, 805, 505], [1077, 653, 1095, 663], [938, 659, 961, 676], [530, 402, 567, 423], [438, 378, 555, 445], [583, 386, 655, 436], [672, 417, 737, 456], [624, 423, 643, 436], [921, 650, 964, 676], [367, 416, 425, 449], [940, 641, 988, 677], [650, 405, 735, 456], [595, 378, 670, 436], [637, 406, 681, 431], [481, 380, 564, 442], [778, 484, 790, 491]]\n",
      "right [[237, 685, 379, 589], [362, 614, 394, 589], [364, 598, 378, 589], [313, 463, 389, 418], [304, 456, 357, 423], [318, 644, 368, 610], [242, 683, 348, 611]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 825 0\n",
      "tempsfdvdvdfv 1662 1\n",
      "tempsfdvdvdfv 2480 2\n",
      "tempsfdvdvdfv 3012 3\n",
      "tempsfdvdvdfv 3837 4\n",
      "tempsfdvdvdfv 4372 5\n",
      "tempsfdvdvdfv 5111 6\n",
      "tempsfdvdvdfv 5673 7\n",
      "tempsfdvdvdfv 6294 8\n",
      "tempsfdvdvdfv 7140 9\n",
      "tempsfdvdvdfv 7989 10\n",
      "tempsfdvdvdfv 8725 11\n",
      "tempsfdvdvdfv 9210 12\n",
      "tempsfdvdvdfv 10029 13\n",
      "tempsfdvdvdfv 10682 14\n",
      "tempsfdvdvdfv 11504 15\n",
      "tempsfdvdvdfv 11976 16\n",
      "avg 17 16 646 704 468 508 332 383 541 505\n",
      "left [[788, 490, 825, 512], [778, 646, 837, 692], [780, 490, 818, 514], [414, 361, 532, 453], [784, 489, 825, 513], [516, 420, 535, 432], [675, 418, 739, 458], [522, 411, 562, 443], [524, 361, 621, 437], [770, 630, 846, 691], [777, 633, 849, 691], [639, 399, 736, 460], [400, 419, 485, 468], [782, 489, 819, 514], [639, 404, 653, 412], [781, 491, 822, 514], [416, 410, 472, 443]]\n",
      "right [[241, 684, 378, 588], [290, 666, 355, 617], [262, 684, 283, 671], [266, 667, 391, 580], [280, 474, 344, 423], [260, 684, 303, 656], [419, 361, 464, 326], [240, 684, 256, 672], [315, 646, 331, 635], [462, 549, 512, 518], [419, 364, 471, 325], [422, 360, 462, 329], [416, 362, 461, 327], [321, 438, 344, 424], [446, 362, 485, 338], [265, 684, 292, 663]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 561 0\n",
      "tempsfdvdvdfv 1301 1\n",
      "tempsfdvdvdfv 2041 2\n",
      "tempsfdvdvdfv 2612 3\n",
      "tempsfdvdvdfv 3447 4\n",
      "tempsfdvdvdfv 4070 5\n",
      "tempsfdvdvdfv 4607 6\n",
      "tempsfdvdvdfv 5084 7\n",
      "tempsfdvdvdfv 5708 8\n",
      "tempsfdvdvdfv 6374 9\n",
      "tempsfdvdvdfv 6830 10\n",
      "tempsfdvdvdfv 7470 11\n",
      "tempsfdvdvdfv 7949 12\n",
      "tempsfdvdvdfv 8635 13\n",
      "tempsfdvdvdfv 9471 14\n",
      "tempsfdvdvdfv 9988 15\n",
      "tempsfdvdvdfv 10463 16\n",
      "tempsfdvdvdfv 11142 17\n",
      "tempsfdvdvdfv 11620 18\n",
      "tempsfdvdvdfv 12156 19\n",
      "tempsfdvdvdfv 12752 20\n",
      "tempsfdvdvdfv 13334 21\n",
      "tempsfdvdvdfv 14057 22\n",
      "avg 23 8 555 611 389 424 399 440 451 425\n",
      "left [[515, 338, 561, 365], [636, 409, 740, 469], [662, 415, 740, 464], [464, 374, 571, 449], [792, 504, 835, 529], [540, 389, 623, 445], [519, 427, 537, 439], [448, 329, 477, 346], [526, 374, 624, 445], [639, 409, 666, 425], [433, 390, 456, 404], [522, 372, 640, 445], [464, 331, 479, 343], [632, 415, 686, 445], [789, 501, 836, 529], [435, 390, 517, 443], [446, 338, 475, 358], [621, 412, 679, 445], [446, 339, 478, 361], [521, 340, 536, 352], [520, 367, 596, 416], [526, 373, 582, 408], [685, 422, 723, 447]]\n",
      "right [[268, 689, 293, 670], [520, 366, 542, 353], [490, 391, 528, 369], [440, 372, 478, 346], [491, 391, 527, 371], [265, 487, 342, 439], [422, 460, 474, 422], [298, 459, 339, 434]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 864 0\n",
      "tempsfdvdvdfv 1334 1\n",
      "tempsfdvdvdfv 2316 2\n",
      "tempsfdvdvdfv 2944 3\n",
      "tempsfdvdvdfv 3469 4\n",
      "tempsfdvdvdfv 4124 5\n",
      "tempsfdvdvdfv 4680 6\n",
      "tempsfdvdvdfv 5327 7\n",
      "tempsfdvdvdfv 5996 8\n",
      "avg 9 14 613 666 416 450 439 503 503 460\n",
      "left [[739, 468, 864, 538], [448, 333, 470, 347], [923, 628, 982, 674], [521, 368, 628, 440], [514, 356, 525, 363], [607, 417, 655, 446], [510, 337, 556, 365], [604, 414, 647, 440], [652, 427, 669, 440]]\n",
      "right [[269, 686, 296, 668], [348, 471, 467, 391], [635, 445, 663, 425], [625, 446, 668, 414], [358, 471, 523, 360], [309, 480, 383, 434], [634, 445, 661, 426], [520, 627, 534, 616], [267, 686, 310, 658], [318, 478, 461, 385], [301, 481, 432, 393], [631, 445, 659, 426], [323, 436, 333, 428], [620, 445, 657, 418]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 890 0\n",
      "tempsfdvdvdfv 1725 1\n",
      "tempsfdvdvdfv 2497 2\n",
      "tempsfdvdvdfv 3219 3\n",
      "tempsfdvdvdfv 4109 4\n",
      "tempsfdvdvdfv 4731 5\n",
      "tempsfdvdvdfv 5338 6\n",
      "tempsfdvdvdfv 5854 7\n",
      "tempsfdvdvdfv 6479 8\n",
      "tempsfdvdvdfv 7034 9\n",
      "tempsfdvdvdfv 7716 10\n",
      "tempsfdvdvdfv 8268 11\n",
      "tempsfdvdvdfv 8845 12\n",
      "tempsfdvdvdfv 9307 13\n",
      "tempsfdvdvdfv 9846 14\n",
      "tempsfdvdvdfv 10387 15\n",
      "tempsfdvdvdfv 11074 16\n",
      "tempsfdvdvdfv 11960 17\n",
      "tempsfdvdvdfv 12511 18\n",
      "avg 19 19 587 658 411 460 435 493 483 445\n",
      "left [[830, 522, 890, 558], [670, 417, 835, 532], [674, 420, 772, 491], [668, 417, 722, 451], [879, 550, 890, 557], [513, 374, 622, 447], [538, 396, 607, 450], [419, 385, 516, 443], [514, 373, 625, 445], [459, 364, 555, 439], [641, 419, 682, 450], [528, 403, 552, 422], [487, 381, 577, 451], [442, 332, 462, 348], [486, 426, 539, 461], [455, 357, 541, 425], [639, 419, 687, 449], [813, 518, 886, 560], [505, 337, 551, 363]]\n",
      "right [[245, 687, 365, 609], [272, 667, 286, 658], [322, 479, 462, 392], [707, 448, 721, 440], [284, 487, 367, 425], [271, 489, 352, 434], [381, 469, 431, 438], [427, 376, 494, 327], [605, 450, 655, 418], [244, 687, 364, 609], [634, 440, 665, 417], [517, 443, 573, 407], [584, 451, 600, 439], [475, 407, 503, 391], [490, 399, 504, 391], [480, 410, 503, 396], [619, 449, 654, 422], [395, 464, 432, 441], [324, 479, 441, 411]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 47%|████▋     | 119/251 [00:03<00:04, 26.63it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 924 0\n",
      "tempsfdvdvdfv 1511 1\n",
      "tempsfdvdvdfv 2191 2\n",
      "tempsfdvdvdfv 2973 3\n",
      "tempsfdvdvdfv 3560 4\n",
      "tempsfdvdvdfv 4474 5\n",
      "tempsfdvdvdfv 5254 6\n",
      "tempsfdvdvdfv 5829 7\n",
      "tempsfdvdvdfv 6418 8\n",
      "tempsfdvdvdfv 7199 9\n",
      "tempsfdvdvdfv 7917 10\n",
      "tempsfdvdvdfv 8841 11\n",
      "tempsfdvdvdfv 9682 12\n",
      "tempsfdvdvdfv 10304 13\n",
      "tempsfdvdvdfv 10872 14\n",
      "tempsfdvdvdfv 11788 15\n",
      "tempsfdvdvdfv 12516 16\n",
      "tempsfdvdvdfv 13242 17\n",
      "tempsfdvdvdfv 14165 18\n",
      "tempsfdvdvdfv 15256 19\n",
      "tempsfdvdvdfv 15970 20\n",
      "tempsfdvdvdfv 16743 21\n",
      "tempsfdvdvdfv 17519 22\n",
      "tempsfdvdvdfv 18248 23\n",
      "tempsfdvdvdfv 18794 24\n",
      "tempsfdvdvdfv 19446 25\n",
      "tempsfdvdvdfv 19865 26\n",
      "tempsfdvdvdfv 20372 27\n",
      "tempsfdvdvdfv 20960 28\n",
      "tempsfdvdvdfv 21527 29\n",
      "tempsfdvdvdfv 22115 30\n",
      "tempsfdvdvdfv 22813 31\n",
      "tempsfdvdvdfv 23435 32\n",
      "tempsfdvdvdfv 24018 33\n",
      "tempsfdvdvdfv 24759 34\n",
      "avg 35 10 643 707 427 469 319 402 542 485\n",
      "left [[834, 526, 924, 578], [520, 350, 587, 389], [632, 416, 680, 443], [662, 417, 782, 495], [492, 326, 587, 383], [828, 527, 914, 580], [743, 474, 780, 496], [451, 361, 575, 451], [551, 355, 589, 377], [657, 417, 781, 495], [670, 416, 718, 444], [903, 564, 924, 577], [831, 529, 841, 536], [477, 337, 622, 446], [476, 383, 568, 452], [828, 526, 916, 580], [689, 424, 728, 448], [688, 424, 726, 448], [878, 550, 923, 580], [1062, 657, 1091, 675], [669, 416, 714, 443], [685, 424, 773, 495], [748, 478, 776, 496], [713, 438, 729, 448], [450, 363, 546, 440], [640, 411, 652, 418], [356, 424, 419, 459], [476, 334, 507, 358], [574, 373, 588, 381], [512, 389, 567, 422], [554, 359, 588, 380], [639, 415, 698, 448], [477, 340, 622, 445], [499, 390, 583, 451], [651, 421, 741, 471]]\n",
      "right [[250, 687, 308, 645], [294, 670, 330, 643], [249, 686, 306, 646], [283, 678, 316, 653], [279, 479, 490, 326], [384, 465, 419, 438], [435, 458, 525, 406], [278, 487, 372, 426], [416, 370, 477, 336], [326, 446, 480, 338]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 548 0\n",
      "tempsfdvdvdfv 1464 1\n",
      "tempsfdvdvdfv 2254 2\n",
      "tempsfdvdvdfv 3249 3\n",
      "tempsfdvdvdfv 4131 4\n",
      "tempsfdvdvdfv 4644 5\n",
      "tempsfdvdvdfv 5428 6\n",
      "tempsfdvdvdfv 6215 7\n",
      "tempsfdvdvdfv 6840 8\n",
      "tempsfdvdvdfv 7797 9\n",
      "tempsfdvdvdfv 8583 10\n",
      "tempsfdvdvdfv 9501 11\n",
      "tempsfdvdvdfv 10227 12\n",
      "tempsfdvdvdfv 10985 13\n",
      "tempsfdvdvdfv 11617 14\n",
      "avg 15 16 707 774 464 511 313 405 515 451\n",
      "left [[495, 327, 548, 359], [847, 537, 916, 581], [708, 447, 790, 500], [974, 658, 995, 675], [846, 538, 882, 561], [402, 379, 513, 466], [670, 415, 784, 501], [714, 442, 787, 501], [457, 327, 625, 449], [928, 587, 957, 606], [713, 444, 786, 501], [903, 572, 918, 582], [711, 447, 726, 456], [723, 456, 758, 483], [528, 387, 632, 449]]\n",
      "right [[243, 685, 380, 593], [270, 485, 475, 336], [282, 483, 359, 421], [334, 474, 374, 443], [374, 399, 474, 332], [320, 440, 475, 335], [254, 677, 298, 647], [337, 474, 399, 437], [327, 436, 371, 409], [393, 464, 547, 361], [329, 432, 475, 334], [295, 481, 360, 429], [277, 707, 321, 682], [288, 482, 362, 424], [244, 683, 278, 660], [449, 449, 539, 388]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1019 0\n",
      "tempsfdvdvdfv 2046 1\n",
      "tempsfdvdvdfv 3036 2\n",
      "tempsfdvdvdfv 3835 3\n",
      "tempsfdvdvdfv 4533 4\n",
      "tempsfdvdvdfv 5232 5\n",
      "tempsfdvdvdfv 6261 6\n",
      "tempsfdvdvdfv 6962 7\n",
      "tempsfdvdvdfv 7763 8\n",
      "tempsfdvdvdfv 8460 9\n",
      "tempsfdvdvdfv 9187 10\n",
      "tempsfdvdvdfv 9712 11\n",
      "tempsfdvdvdfv 10299 12\n",
      "tempsfdvdvdfv 11239 13\n",
      "tempsfdvdvdfv 11769 14\n",
      "tempsfdvdvdfv 12535 15\n",
      "tempsfdvdvdfv 13327 16\n",
      "tempsfdvdvdfv 14013 17\n",
      "tempsfdvdvdfv 14520 18\n",
      "tempsfdvdvdfv 15281 19\n",
      "tempsfdvdvdfv 16306 20\n",
      "tempsfdvdvdfv 17033 21\n",
      "tempsfdvdvdfv 17688 22\n",
      "avg 23 9 709 769 461 498 405 493 450 386\n",
      "left [[867, 554, 1019, 645], [879, 553, 1027, 638], [972, 621, 990, 631], [674, 417, 799, 508], [626, 403, 698, 444], [658, 419, 699, 444], [996, 619, 1029, 638], [633, 411, 701, 449], [748, 475, 801, 507], [648, 420, 697, 449], [659, 416, 727, 458], [491, 326, 525, 346], [526, 402, 587, 451], [882, 555, 940, 589], [500, 362, 530, 379], [721, 453, 766, 485], [748, 478, 792, 508], [632, 418, 686, 449], [472, 422, 507, 444], [748, 474, 761, 482], [903, 575, 1025, 646], [713, 444, 727, 455], [619, 400, 655, 420]]\n",
      "right [[322, 437, 458, 327], [637, 445, 673, 418], [292, 480, 421, 406], [289, 467, 441, 348], [359, 469, 400, 437], [270, 485, 469, 335], [495, 352, 514, 337], [289, 469, 347, 432], [699, 449, 715, 437]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1073 0\n",
      "tempsfdvdvdfv 1883 1\n",
      "tempsfdvdvdfv 2576 2\n",
      "tempsfdvdvdfv 3104 3\n",
      "tempsfdvdvdfv 3684 4\n",
      "tempsfdvdvdfv 4661 5\n",
      "tempsfdvdvdfv 5644 6\n",
      "tempsfdvdvdfv 6447 7\n",
      "tempsfdvdvdfv 7431 8\n",
      "tempsfdvdvdfv 8409 9\n",
      "tempsfdvdvdfv 9220 10\n",
      "tempsfdvdvdfv 9800 11\n",
      "tempsfdvdvdfv 10611 12\n",
      "tempsfdvdvdfv 11560 13\n",
      "tempsfdvdvdfv 12624 14\n",
      "tempsfdvdvdfv 13158 15\n",
      "tempsfdvdvdfv 13884 16\n",
      "tempsfdvdvdfv 14952 17\n",
      "avg 18 2 771 830 495 533 325 338 531 522\n",
      "left [[895, 569, 1073, 676], [754, 480, 810, 512], [624, 402, 693, 447], [491, 342, 528, 364], [507, 334, 580, 382], [957, 623, 977, 635], [958, 620, 983, 638], [713, 441, 803, 513], [959, 620, 984, 638], [959, 625, 978, 638], [751, 474, 811, 512], [504, 337, 580, 383], [752, 474, 811, 511], [896, 569, 949, 600], [1027, 647, 1064, 670], [504, 342, 534, 361], [665, 412, 726, 452], [975, 616, 1068, 676]]\n",
      "right [[265, 680, 275, 673], [386, 382, 401, 371]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 49%|████▊     | 122/251 [00:03<00:04, 27.38it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1074 0\n",
      "tempsfdvdvdfv 2113 1\n",
      "tempsfdvdvdfv 3194 2\n",
      "tempsfdvdvdfv 3975 3\n",
      "tempsfdvdvdfv 4750 4\n",
      "tempsfdvdvdfv 5368 5\n",
      "tempsfdvdvdfv 6409 6\n",
      "tempsfdvdvdfv 6830 7\n",
      "tempsfdvdvdfv 7366 8\n",
      "tempsfdvdvdfv 8369 9\n",
      "tempsfdvdvdfv 9010 10\n",
      "tempsfdvdvdfv 9532 11\n",
      "tempsfdvdvdfv 10464 12\n",
      "tempsfdvdvdfv 11553 13\n",
      "tempsfdvdvdfv 12200 14\n",
      "tempsfdvdvdfv 13194 15\n",
      "tempsfdvdvdfv 14010 16\n",
      "tempsfdvdvdfv 14544 17\n",
      "tempsfdvdvdfv 15031 18\n",
      "avg 19 2 724 791 492 535 381 423 407 382\n",
      "left [[933, 593, 1074, 677], [956, 597, 1039, 646], [1022, 634, 1081, 670], [757, 478, 781, 492], [763, 487, 775, 494], [483, 344, 618, 449], [1012, 629, 1041, 647], [353, 436, 421, 491], [446, 376, 536, 434], [939, 597, 1003, 638], [622, 400, 641, 411], [487, 343, 522, 367], [890, 673, 932, 702], [986, 614, 1089, 673], [488, 358, 647, 450], [974, 608, 994, 620], [714, 445, 816, 519], [498, 330, 534, 351], [449, 421, 487, 443]]\n",
      "right [[447, 372, 501, 342], [316, 443, 346, 422]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 517 0\n",
      "tempsfdvdvdfv 1608 1\n",
      "tempsfdvdvdfv 2302 2\n",
      "tempsfdvdvdfv 3335 3\n",
      "tempsfdvdvdfv 4407 4\n",
      "tempsfdvdvdfv 5197 5\n",
      "tempsfdvdvdfv 5952 6\n",
      "tempsfdvdvdfv 6418 7\n",
      "tempsfdvdvdfv 7201 8\n",
      "tempsfdvdvdfv 7726 9\n",
      "tempsfdvdvdfv 8506 10\n",
      "tempsfdvdvdfv 9070 11\n",
      "tempsfdvdvdfv 9826 12\n",
      "tempsfdvdvdfv 10615 13\n",
      "avg 14 12 712 758 492 522 379 427 481 447\n",
      "left [[481, 335, 517, 356], [1000, 623, 1091, 675], [623, 406, 694, 449], [985, 624, 1033, 654], [985, 623, 1072, 677], [761, 481, 790, 498], [722, 643, 755, 668], [429, 420, 466, 448], [766, 489, 783, 500], [493, 335, 525, 353], [759, 484, 780, 498], [528, 344, 564, 365], [723, 643, 756, 668], [713, 445, 789, 500]]\n",
      "right [[249, 686, 298, 653], [289, 658, 318, 638], [481, 351, 494, 342], [224, 686, 259, 665], [278, 479, 366, 426], [506, 441, 564, 407], [438, 375, 497, 331], [307, 474, 372, 427], [616, 438, 647, 413], [304, 453, 410, 370], [375, 395, 411, 367], [483, 342, 499, 333]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 799 0\n",
      "tempsfdvdvdfv 1322 1\n",
      "tempsfdvdvdfv 1833 2\n",
      "tempsfdvdvdfv 2632 3\n",
      "tempsfdvdvdfv 3424 4\n",
      "tempsfdvdvdfv 3945 5\n",
      "tempsfdvdvdfv 4468 6\n",
      "tempsfdvdvdfv 5177 7\n",
      "tempsfdvdvdfv 5716 8\n",
      "tempsfdvdvdfv 6442 9\n",
      "avg 10 9 576 644 399 444 398 458 495 451\n",
      "left [[680, 421, 799, 507], [483, 326, 523, 349], [405, 365, 511, 439], [767, 486, 799, 504], [766, 489, 792, 506], [409, 366, 521, 438], [483, 325, 523, 348], [652, 413, 709, 450], [405, 364, 539, 454], [710, 436, 726, 445]]\n",
      "right [[250, 684, 285, 660], [253, 681, 280, 663], [283, 477, 358, 420], [656, 453, 674, 443], [589, 452, 649, 413], [405, 441, 521, 354], [399, 458, 510, 371], [279, 478, 357, 415], [476, 332, 488, 325]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 50%|█████     | 126/251 [00:03<00:04, 27.86it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 806 0\n",
      "tempsfdvdvdfv 1617 1\n",
      "tempsfdvdvdfv 2422 2\n",
      "tempsfdvdvdfv 3138 3\n",
      "tempsfdvdvdfv 3655 4\n",
      "tempsfdvdvdfv 4168 5\n",
      "tempsfdvdvdfv 4719 6\n",
      "tempsfdvdvdfv 5527 7\n",
      "tempsfdvdvdfv 5981 8\n",
      "tempsfdvdvdfv 6771 9\n",
      "tempsfdvdvdfv 7266 10\n",
      "avg 11 8 616 660 433 460 455 514 405 363\n",
      "left [[779, 498, 806, 514], [773, 491, 811, 514], [786, 503, 805, 514], [706, 452, 716, 458], [466, 337, 517, 370], [403, 368, 513, 429], [481, 325, 551, 365], [772, 493, 808, 514], [415, 424, 454, 449], [776, 491, 790, 499], [428, 390, 495, 443]]\n",
      "right [[399, 457, 523, 367], [392, 459, 518, 364], [463, 337, 475, 329], [464, 340, 487, 325], [586, 454, 638, 412], [402, 458, 476, 414], [471, 401, 523, 366], [463, 339, 475, 330]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 516 0\n",
      "tempsfdvdvdfv 1340 1\n",
      "tempsfdvdvdfv 2158 2\n",
      "tempsfdvdvdfv 2703 3\n",
      "tempsfdvdvdfv 3519 4\n",
      "tempsfdvdvdfv 4129 5\n",
      "tempsfdvdvdfv 4802 6\n",
      "tempsfdvdvdfv 5627 7\n",
      "tempsfdvdvdfv 6184 8\n",
      "tempsfdvdvdfv 6992 9\n",
      "tempsfdvdvdfv 7528 10\n",
      "avg 11 12 603 684 404 461 378 409 548 527\n",
      "left [[422, 385, 516, 461], [682, 421, 824, 524], [714, 445, 818, 523], [481, 326, 545, 365], [785, 501, 816, 523], [459, 338, 610, 448], [601, 411, 673, 458], [794, 501, 825, 524], [494, 333, 557, 368], [730, 458, 808, 518], [479, 328, 536, 362]]\n",
      "right [[253, 684, 298, 653], [239, 636, 264, 621], [523, 437, 559, 408], [422, 384, 462, 361], [543, 457, 575, 438], [247, 635, 269, 621], [286, 706, 316, 684], [550, 457, 565, 445], [285, 663, 297, 654], [488, 444, 524, 415], [260, 680, 275, 670], [447, 397, 504, 365]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 848 0\n",
      "tempsfdvdvdfv 1678 1\n",
      "tempsfdvdvdfv 2421 2\n",
      "tempsfdvdvdfv 2929 3\n",
      "tempsfdvdvdfv 3762 4\n",
      "tempsfdvdvdfv 4433 5\n",
      "tempsfdvdvdfv 4934 6\n",
      "tempsfdvdvdfv 5678 7\n",
      "tempsfdvdvdfv 6269 8\n",
      "tempsfdvdvdfv 6795 9\n",
      "tempsfdvdvdfv 7463 10\n",
      "tempsfdvdvdfv 8132 11\n",
      "tempsfdvdvdfv 8719 12\n",
      "tempsfdvdvdfv 9218 13\n",
      "tempsfdvdvdfv 10049 14\n",
      "tempsfdvdvdfv 10557 15\n",
      "avg 16 5 607 659 423 457 334 443 493 424\n",
      "left [[810, 512, 848, 537], [796, 504, 830, 526], [716, 450, 743, 470], [440, 390, 508, 429], [791, 506, 833, 535], [657, 414, 671, 423], [455, 335, 501, 362], [715, 447, 744, 468], [456, 352, 591, 436], [456, 325, 526, 372], [597, 412, 668, 456], [655, 414, 669, 423], [541, 409, 587, 442], [427, 424, 499, 467], [790, 504, 831, 532], [422, 384, 508, 440]]\n",
      "right [[160, 679, 184, 665], [360, 465, 534, 361], [439, 392, 496, 360], [365, 465, 506, 370], [347, 467, 499, 368]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 52%|█████▏    | 130/251 [00:03<00:04, 28.13it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 751 0\n",
      "tempsfdvdvdfv 1292 1\n",
      "tempsfdvdvdfv 2160 2\n",
      "tempsfdvdvdfv 3233 3\n",
      "tempsfdvdvdfv 3909 4\n",
      "tempsfdvdvdfv 4963 5\n",
      "tempsfdvdvdfv 5708 6\n",
      "tempsfdvdvdfv 6772 7\n",
      "tempsfdvdvdfv 7864 8\n",
      "tempsfdvdvdfv 8726 9\n",
      "tempsfdvdvdfv 9387 10\n",
      "tempsfdvdvdfv 10246 11\n",
      "tempsfdvdvdfv 10900 12\n",
      "tempsfdvdvdfv 11638 13\n",
      "tempsfdvdvdfv 11964 14\n",
      "tempsfdvdvdfv 12292 15\n",
      "tempsfdvdvdfv 13113 16\n",
      "tempsfdvdvdfv 14199 17\n",
      "tempsfdvdvdfv 14667 18\n",
      "tempsfdvdvdfv 15707 19\n",
      "tempsfdvdvdfv 16528 20\n",
      "tempsfdvdvdfv 17616 21\n",
      "tempsfdvdvdfv 18486 22\n",
      "avg 23 7 767 803 513 536 458 512 435 400\n",
      "left [[716, 450, 751, 473], [479, 328, 541, 365], [806, 511, 868, 548], [1014, 642, 1073, 677], [657, 410, 676, 423], [1014, 653, 1054, 677], [722, 457, 745, 473], [1019, 650, 1064, 678], [1049, 652, 1092, 676], [819, 525, 862, 550], [615, 405, 661, 433], [829, 532, 859, 550], [610, 401, 654, 427], [712, 436, 738, 457], [313, 455, 326, 465], [307, 452, 328, 468], [808, 516, 821, 526], [1038, 650, 1086, 677], [449, 369, 468, 383], [1014, 643, 1040, 659], [803, 514, 821, 525], [1046, 652, 1088, 676], [805, 511, 870, 550]]\n",
      "right [[285, 478, 379, 424], [501, 441, 555, 407], [588, 457, 657, 409], [534, 422, 555, 410], [449, 402, 488, 373], [452, 450, 496, 418], [403, 395, 457, 362]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 889 0\n",
      "tempsfdvdvdfv 1630 1\n",
      "tempsfdvdvdfv 2122 2\n",
      "tempsfdvdvdfv 2782 3\n",
      "tempsfdvdvdfv 3618 4\n",
      "tempsfdvdvdfv 4372 5\n",
      "tempsfdvdvdfv 5271 6\n",
      "tempsfdvdvdfv 5808 7\n",
      "tempsfdvdvdfv 6706 8\n",
      "tempsfdvdvdfv 7555 9\n",
      "tempsfdvdvdfv 8039 10\n",
      "tempsfdvdvdfv 8489 11\n",
      "avg 12 10 664 707 454 480 435 497 450 406\n",
      "left [[851, 545, 889, 567], [715, 437, 741, 458], [410, 385, 492, 434], [643, 415, 660, 425], [816, 519, 836, 535], [717, 450, 754, 474], [821, 519, 899, 564], [476, 325, 537, 360], [875, 551, 898, 567], [826, 528, 849, 542], [421, 387, 484, 423], [402, 388, 450, 420]]\n",
      "right [[408, 576, 470, 534], [370, 464, 499, 360], [433, 392, 487, 350], [371, 464, 439, 422], [415, 456, 468, 415], [422, 393, 486, 355], [593, 450, 656, 408], [491, 338, 501, 332], [410, 574, 469, 534], [446, 394, 497, 358]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 938 0\n",
      "tempsfdvdvdfv 1853 1\n",
      "tempsfdvdvdfv 2639 2\n",
      "tempsfdvdvdfv 3423 3\n",
      "tempsfdvdvdfv 4211 4\n",
      "tempsfdvdvdfv 4687 5\n",
      "tempsfdvdvdfv 5164 6\n",
      "tempsfdvdvdfv 6037 7\n",
      "tempsfdvdvdfv 6632 8\n",
      "tempsfdvdvdfv 7118 9\n",
      "tempsfdvdvdfv 7639 10\n",
      "tempsfdvdvdfv 8535 11\n",
      "tempsfdvdvdfv 9454 12\n",
      "tempsfdvdvdfv 10244 13\n",
      "tempsfdvdvdfv 11105 14\n",
      "tempsfdvdvdfv 11847 15\n",
      "tempsfdvdvdfv 12147 16\n",
      "tempsfdvdvdfv 12803 17\n",
      "avg 18 20 654 711 464 502 452 512 495 452\n",
      "left [[877, 555, 938, 589], [833, 533, 915, 588], [718, 453, 786, 499], [726, 462, 784, 499], [661, 410, 788, 499], [426, 353, 476, 388], [434, 348, 477, 382], [838, 531, 873, 551], [534, 424, 595, 465], [412, 388, 486, 432], [470, 327, 521, 368], [835, 531, 896, 575], [887, 568, 919, 589], [729, 462, 790, 497], [842, 532, 861, 545], [658, 410, 742, 462], [274, 668, 300, 684], [626, 411, 656, 428]]\n",
      "right [[588, 459, 662, 411], [282, 664, 414, 572], [367, 611, 428, 563], [553, 467, 628, 413], [267, 674, 306, 646], [273, 483, 350, 429], [366, 607, 393, 587], [682, 463, 715, 438], [284, 471, 349, 427], [567, 452, 617, 412], [420, 570, 440, 555], [566, 452, 613, 416], [359, 468, 498, 363], [568, 452, 620, 412], [413, 400, 429, 388], [568, 446, 610, 414], [519, 426, 536, 413], [484, 442, 548, 405], [344, 470, 480, 378], [584, 439, 619, 412]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 992 0\n",
      "tempsfdvdvdfv 1933 1\n",
      "tempsfdvdvdfv 2924 2\n",
      "tempsfdvdvdfv 3720 3\n",
      "tempsfdvdvdfv 4391 4\n",
      "tempsfdvdvdfv 5143 5\n",
      "tempsfdvdvdfv 5934 6\n",
      "tempsfdvdvdfv 6609 7\n",
      "tempsfdvdvdfv 7364 8\n",
      "tempsfdvdvdfv 8330 9\n",
      "tempsfdvdvdfv 9121 10\n",
      "tempsfdvdvdfv 10085 11\n",
      "tempsfdvdvdfv 10561 12\n",
      "tempsfdvdvdfv 11214 13\n",
      "tempsfdvdvdfv 12012 14\n",
      "tempsfdvdvdfv 12805 15\n",
      "tempsfdvdvdfv 13461 16\n",
      "tempsfdvdvdfv 14436 17\n",
      "tempsfdvdvdfv 15058 18\n",
      "tempsfdvdvdfv 15683 19\n",
      "tempsfdvdvdfv 16060 20\n",
      "tempsfdvdvdfv 17025 21\n",
      "tempsfdvdvdfv 17926 22\n",
      "tempsfdvdvdfv 18683 23\n",
      "avg 24 13 729 778 480 512 378 459 502 447\n",
      "left [[863, 544, 992, 621], [862, 550, 941, 603], [905, 571, 991, 619], [682, 422, 796, 504], [651, 411, 671, 424], [713, 436, 752, 464], [744, 472, 791, 504], [653, 410, 675, 424], [741, 454, 755, 464], [947, 605, 966, 618], [734, 462, 791, 502], [945, 604, 964, 618], [403, 397, 476, 438], [624, 410, 653, 427], [719, 453, 798, 504], [743, 471, 793, 504], [614, 405, 656, 435], [951, 606, 975, 621], [593, 413, 622, 432], [596, 413, 625, 432], [337, 428, 377, 459], [907, 581, 965, 618], [854, 543, 901, 577], [732, 462, 757, 482]]\n",
      "right [[245, 686, 438, 556], [272, 482, 484, 355], [341, 620, 438, 554], [243, 686, 438, 555], [323, 440, 343, 426], [354, 432, 469, 354], [325, 697, 347, 683], [529, 424, 549, 409], [525, 469, 610, 405], [457, 361, 472, 351], [467, 345, 486, 331], [305, 466, 352, 432], [528, 424, 549, 408]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 53%|█████▎    | 134/251 [00:04<00:04, 28.63it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 674 0\n",
      "tempsfdvdvdfv 1728 1\n",
      "tempsfdvdvdfv 2793 2\n",
      "tempsfdvdvdfv 3596 3\n",
      "tempsfdvdvdfv 4655 4\n",
      "tempsfdvdvdfv 5320 5\n",
      "tempsfdvdvdfv 6221 6\n",
      "tempsfdvdvdfv 7305 7\n",
      "tempsfdvdvdfv 8063 8\n",
      "tempsfdvdvdfv 8522 9\n",
      "tempsfdvdvdfv 9515 10\n",
      "tempsfdvdvdfv 10581 11\n",
      "tempsfdvdvdfv 11391 12\n",
      "tempsfdvdvdfv 12451 13\n",
      "tempsfdvdvdfv 13514 14\n",
      "tempsfdvdvdfv 14438 15\n",
      "tempsfdvdvdfv 15191 16\n",
      "tempsfdvdvdfv 15695 17\n",
      "tempsfdvdvdfv 16711 18\n",
      "tempsfdvdvdfv 17424 19\n",
      "tempsfdvdvdfv 18485 20\n",
      "tempsfdvdvdfv 18943 21\n",
      "tempsfdvdvdfv 19713 22\n",
      "tempsfdvdvdfv 20189 23\n",
      "avg 24 25 782 841 514 552 438 505 509 466\n",
      "left [[655, 412, 674, 423], [879, 559, 1054, 677], [888, 559, 1065, 665], [748, 474, 803, 511], [975, 621, 1059, 677], [649, 414, 665, 424], [878, 560, 901, 576], [1041, 649, 1084, 674], [720, 453, 758, 476], [419, 352, 459, 383], [955, 609, 993, 635], [1039, 648, 1066, 665], [726, 457, 810, 511], [1006, 641, 1060, 677], [1013, 633, 1063, 665], [882, 562, 924, 591], [713, 441, 753, 465], [400, 401, 504, 471], [961, 614, 1016, 645], [681, 421, 713, 443], [1009, 642, 1061, 677], [398, 385, 458, 427], [723, 456, 770, 484], [416, 378, 476, 423]]\n",
      "right [[238, 685, 372, 598], [581, 468, 669, 416], [590, 468, 669, 423], [413, 397, 489, 340], [243, 684, 307, 642], [380, 591, 452, 546], [297, 475, 366, 434], [385, 460, 447, 415], [587, 468, 659, 425], [326, 470, 462, 375], [355, 608, 378, 594], [323, 438, 486, 337], [566, 468, 660, 410], [361, 447, 448, 388], [515, 357, 529, 346], [570, 468, 649, 417], [353, 464, 424, 416], [416, 622, 430, 613], [398, 579, 442, 550], [574, 468, 607, 447], [697, 465, 722, 451], [579, 468, 622, 441], [638, 428, 661, 413], [251, 678, 332, 625], [333, 623, 361, 605]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 775 0\n",
      "tempsfdvdvdfv 1436 1\n",
      "tempsfdvdvdfv 2465 2\n",
      "tempsfdvdvdfv 3532 3\n",
      "tempsfdvdvdfv 3994 4\n",
      "tempsfdvdvdfv 4772 5\n",
      "tempsfdvdvdfv 5229 6\n",
      "tempsfdvdvdfv 5803 7\n",
      "tempsfdvdvdfv 6777 8\n",
      "tempsfdvdvdfv 7240 9\n",
      "tempsfdvdvdfv 7826 10\n",
      "tempsfdvdvdfv 8888 11\n",
      "tempsfdvdvdfv 9665 12\n",
      "tempsfdvdvdfv 10760 13\n",
      "tempsfdvdvdfv 11686 14\n",
      "tempsfdvdvdfv 12431 15\n",
      "tempsfdvdvdfv 13096 16\n",
      "tempsfdvdvdfv 13522 17\n",
      "tempsfdvdvdfv 14482 18\n",
      "tempsfdvdvdfv 15057 19\n",
      "tempsfdvdvdfv 16040 20\n",
      "tempsfdvdvdfv 16697 21\n",
      "tempsfdvdvdfv 17355 22\n",
      "tempsfdvdvdfv 18071 23\n",
      "tempsfdvdvdfv 19005 24\n",
      "tempsfdvdvdfv 19766 25\n",
      "tempsfdvdvdfv 20688 26\n",
      "tempsfdvdvdfv 21405 27\n",
      "tempsfdvdvdfv 21861 28\n",
      "avg 29 20 717 753 481 504 416 498 497 441\n",
      "left [[733, 466, 775, 491], [626, 410, 661, 430], [969, 608, 1029, 642], [969, 619, 1067, 678], [425, 364, 462, 388], [724, 457, 778, 490], [438, 359, 457, 373], [547, 449, 574, 467], [921, 589, 974, 620], [427, 363, 463, 388], [527, 421, 586, 461], [1029, 657, 1062, 677], [722, 455, 777, 488], [1049, 646, 1095, 675], [911, 580, 926, 589], [727, 466, 745, 476], [639, 414, 665, 429], [408, 384, 426, 396], [925, 580, 960, 601], [547, 445, 575, 466], [965, 616, 983, 626], [609, 406, 657, 434], [620, 409, 658, 431], [682, 421, 716, 441], [911, 579, 934, 596], [743, 465, 761, 478], [911, 581, 922, 589], [663, 411, 717, 443], [442, 353, 456, 364]]\n",
      "right [[554, 472, 646, 410], [237, 686, 420, 563], [392, 390, 484, 328], [322, 437, 334, 430], [387, 397, 470, 349], [236, 686, 362, 601], [534, 472, 612, 411], [544, 472, 626, 412], [537, 472, 616, 410], [540, 472, 623, 410], [387, 396, 481, 337], [368, 398, 485, 331], [365, 601, 384, 588], [562, 469, 654, 407], [328, 468, 522, 342], [384, 589, 403, 575], [526, 472, 615, 410], [389, 586, 406, 573], [332, 429, 398, 379], [397, 581, 423, 563]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 55%|█████▍    | 138/251 [00:04<00:03, 29.41it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 1066 0\n",
      "tempsfdvdvdfv 2151 1\n",
      "tempsfdvdvdfv 2822 2\n",
      "tempsfdvdvdfv 3604 3\n",
      "tempsfdvdvdfv 4063 4\n",
      "tempsfdvdvdfv 4849 5\n",
      "tempsfdvdvdfv 5332 6\n",
      "tempsfdvdvdfv 5977 7\n",
      "tempsfdvdvdfv 6432 8\n",
      "tempsfdvdvdfv 7039 9\n",
      "tempsfdvdvdfv 8106 10\n",
      "tempsfdvdvdfv 8892 11\n",
      "tempsfdvdvdfv 9542 12\n",
      "tempsfdvdvdfv 10008 13\n",
      "tempsfdvdvdfv 10589 14\n",
      "tempsfdvdvdfv 11200 15\n",
      "tempsfdvdvdfv 11584 16\n",
      "tempsfdvdvdfv 12002 17\n",
      "tempsfdvdvdfv 12475 18\n",
      "tempsfdvdvdfv 13251 19\n",
      "tempsfdvdvdfv 13698 20\n",
      "avg 21 14 584 652 439 482 318 430 479 404\n",
      "left [[957, 609, 1066, 677], [969, 606, 1085, 675], [639, 410, 671, 429], [723, 455, 782, 495], [422, 366, 459, 387], [722, 453, 786, 495], [440, 337, 483, 366], [526, 406, 645, 474], [382, 394, 455, 438], [535, 417, 607, 475], [956, 608, 1067, 677], [723, 453, 786, 494], [526, 403, 650, 474], [436, 349, 466, 372], [510, 418, 581, 459], [567, 416, 611, 446], [340, 434, 384, 460], [339, 434, 418, 491], [428, 385, 473, 420], [751, 478, 776, 492], [383, 392, 447, 435]]\n",
      "right [[235, 685, 367, 599], [353, 437, 502, 354], [305, 466, 467, 357], [332, 467, 404, 422], [376, 403, 463, 346], [326, 468, 443, 380], [303, 472, 497, 346], [306, 451, 470, 349], [295, 461, 334, 435], [353, 449, 492, 352], [286, 469, 349, 423], [427, 355, 445, 341], [298, 469, 471, 329], [267, 665, 319, 629]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1083 0\n",
      "tempsfdvdvdfv 2146 1\n",
      "tempsfdvdvdfv 2808 2\n",
      "tempsfdvdvdfv 3603 3\n",
      "tempsfdvdvdfv 4272 4\n",
      "tempsfdvdvdfv 5062 5\n",
      "tempsfdvdvdfv 5528 6\n",
      "tempsfdvdvdfv 6311 7\n",
      "tempsfdvdvdfv 7358 8\n",
      "tempsfdvdvdfv 7793 9\n",
      "tempsfdvdvdfv 8439 10\n",
      "tempsfdvdvdfv 9235 11\n",
      "tempsfdvdvdfv 9670 12\n",
      "avg 13 18 695 743 476 507 356 470 504 429\n",
      "left [[1039, 649, 1083, 676], [1025, 653, 1063, 678], [647, 417, 662, 426], [713, 442, 795, 504], [640, 416, 669, 433], [725, 459, 790, 504], [376, 393, 466, 447], [741, 473, 783, 501], [1019, 650, 1047, 670], [385, 398, 435, 428], [605, 408, 646, 436], [725, 460, 796, 502], [403, 372, 435, 390]]\n",
      "right [[280, 478, 516, 342], [293, 476, 469, 334], [296, 475, 508, 348], [337, 467, 491, 347], [241, 685, 335, 619], [275, 479, 465, 331], [632, 443, 661, 426], [276, 479, 519, 339], [558, 477, 654, 415], [304, 642, 328, 627], [638, 416, 649, 409], [240, 685, 344, 615], [302, 456, 399, 402], [299, 475, 391, 420], [464, 367, 508, 342], [308, 456, 472, 365], [380, 463, 421, 431], [290, 653, 343, 616]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 808 0\n",
      "tempsfdvdvdfv 1609 1\n",
      "tempsfdvdvdfv 2019 2\n",
      "tempsfdvdvdfv 2779 3\n",
      "tempsfdvdvdfv 3581 4\n",
      "tempsfdvdvdfv 4389 5\n",
      "tempsfdvdvdfv 5103 6\n",
      "tempsfdvdvdfv 6218 7\n",
      "tempsfdvdvdfv 7019 8\n",
      "tempsfdvdvdfv 7428 9\n",
      "tempsfdvdvdfv 8024 10\n",
      "tempsfdvdvdfv 8481 11\n",
      "avg 12 17 665 706 460 485 363 484 456 375\n",
      "left [[726, 461, 808, 512], [738, 477, 801, 513], [370, 400, 410, 427], [728, 460, 760, 478], [765, 491, 802, 513], [748, 478, 808, 513], [656, 409, 714, 442], [1083, 654, 1115, 672], [772, 491, 801, 508], [383, 406, 409, 424], [584, 452, 596, 459], [433, 345, 457, 364]]\n",
      "right [[281, 478, 508, 342], [377, 394, 488, 325], [299, 475, 455, 349], [296, 462, 507, 341], [307, 473, 484, 345], [549, 483, 599, 451], [315, 443, 472, 325], [335, 426, 457, 334], [294, 476, 444, 355], [369, 398, 456, 328], [580, 470, 624, 443], [241, 681, 268, 665], [328, 442, 503, 341], [373, 400, 449, 353], [377, 393, 491, 325], [344, 441, 501, 347], [521, 427, 533, 418]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 813 0\n",
      "tempsfdvdvdfv 1246 1\n",
      "tempsfdvdvdfv 1678 2\n",
      "tempsfdvdvdfv 2500 3\n",
      "tempsfdvdvdfv 3136 4\n",
      "tempsfdvdvdfv 3764 5\n",
      "tempsfdvdvdfv 4586 6\n",
      "tempsfdvdvdfv 5061 7\n",
      "avg 8 10 579 632 425 462 354 454 472 403\n",
      "left [[730, 463, 813, 523], [400, 371, 433, 391], [412, 358, 432, 371], [771, 483, 822, 523], [589, 417, 636, 445], [586, 417, 628, 444], [781, 497, 822, 521], [370, 399, 475, 481]]\n",
      "right [[313, 445, 507, 333], [271, 484, 446, 348], [328, 433, 443, 346], [356, 408, 461, 326], [239, 685, 277, 663], [276, 481, 374, 405], [306, 473, 391, 422], [487, 493, 616, 416], [371, 395, 413, 363], [600, 424, 614, 414]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 838 0\n",
      "tempsfdvdvdfv 1669 1\n",
      "tempsfdvdvdfv 2479 2\n",
      "tempsfdvdvdfv 2905 3\n",
      "tempsfdvdvdfv 3745 4\n",
      "tempsfdvdvdfv 4194 5\n",
      "tempsfdvdvdfv 4846 6\n",
      "avg 7 18 636 692 440 479 350 415 506 465\n",
      "left [[769, 487, 838, 535], [732, 466, 831, 535], [716, 452, 810, 522], [414, 387, 426, 394], [818, 520, 840, 535], [412, 366, 449, 392], [592, 404, 652, 441]]\n",
      "right [[352, 413, 501, 330], [288, 467, 349, 429], [238, 687, 263, 672], [412, 377, 489, 333], [291, 651, 341, 619], [283, 472, 353, 430], [402, 398, 460, 354], [313, 470, 427, 388], [600, 460, 672, 416], [286, 469, 356, 416], [269, 665, 283, 657], [450, 500, 493, 470], [343, 422, 496, 337], [325, 628, 340, 619], [347, 417, 360, 407], [545, 497, 660, 414], [300, 457, 349, 428], [263, 670, 281, 659]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 843 0\n",
      "tempsfdvdvdfv 1515 1\n",
      "tempsfdvdvdfv 1922 2\n",
      "tempsfdvdvdfv 2733 3\n",
      "tempsfdvdvdfv 3481 4\n",
      "tempsfdvdvdfv 4151 5\n",
      "tempsfdvdvdfv 4822 6\n",
      "tempsfdvdvdfv 5381 7\n",
      "tempsfdvdvdfv 6037 8\n",
      "tempsfdvdvdfv 6634 9\n",
      "tempsfdvdvdfv 7719 10\n",
      "tempsfdvdvdfv 8433 11\n",
      "tempsfdvdvdfv 9099 12\n",
      "tempsfdvdvdfv 10188 13\n",
      "tempsfdvdvdfv 11048 14\n",
      "avg 15 16 701 736 473 495 414 492 500 450\n",
      "left [[773, 490, 843, 543], [644, 419, 672, 435], [373, 420, 407, 445], [798, 507, 811, 516], [738, 468, 748, 474], [646, 413, 670, 427], [643, 419, 671, 435], [495, 470, 559, 508], [643, 413, 656, 421], [578, 458, 597, 471], [1039, 649, 1085, 676], [669, 416, 714, 441], [650, 411, 666, 420], [1041, 649, 1089, 676], [799, 507, 860, 545]]\n",
      "right [[520, 504, 662, 416], [294, 647, 346, 615], [572, 474, 664, 417], [238, 686, 349, 611], [364, 403, 494, 328], [346, 469, 414, 427], [519, 504, 658, 414], [500, 470, 570, 417], [673, 511, 739, 470], [574, 474, 666, 419], [347, 469, 408, 431], [380, 616, 392, 607], [273, 484, 330, 441], [328, 453, 387, 420], [429, 363, 468, 336], [268, 485, 339, 437]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 879 0\n",
      "tempsfdvdvdfv 1768 1\n",
      "tempsfdvdvdfv 2456 2\n",
      "tempsfdvdvdfv 3288 3\n",
      "tempsfdvdvdfv 3792 4\n",
      "tempsfdvdvdfv 4463 5\n",
      "tempsfdvdvdfv 5045 6\n",
      "tempsfdvdvdfv 5846 7\n",
      "tempsfdvdvdfv 6458 8\n",
      "tempsfdvdvdfv 7026 9\n",
      "tempsfdvdvdfv 7640 10\n",
      "tempsfdvdvdfv 8387 11\n",
      "tempsfdvdvdfv 9223 12\n",
      "tempsfdvdvdfv 9665 13\n",
      "avg 14 18 631 690 448 487 372 432 449 408\n",
      "left [[767, 496, 879, 566], [736, 473, 889, 565], [678, 506, 688, 514], [768, 496, 832, 535], [487, 326, 504, 338], [643, 420, 671, 436], [506, 461, 582, 508], [673, 420, 801, 520], [567, 421, 612, 455], [532, 421, 568, 447], [565, 474, 614, 508], [735, 473, 747, 480], [778, 496, 836, 531], [401, 400, 442, 428]]\n",
      "right [[234, 687, 317, 633], [390, 393, 473, 326], [298, 479, 419, 388], [292, 480, 415, 388], [399, 372, 476, 327], [296, 462, 328, 441], [302, 457, 327, 441], [369, 461, 417, 429], [368, 457, 382, 448], [466, 349, 498, 331], [383, 394, 481, 325], [380, 464, 391, 457], [296, 479, 378, 426], [685, 514, 750, 477], [374, 451, 403, 431], [467, 342, 491, 326], [287, 481, 357, 426], [417, 372, 477, 329]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 56%|█████▌    | 141/251 [00:04<00:03, 29.52it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 57%|█████▋    | 144/251 [00:04<00:03, 29.62it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 924 0\n",
      "tempsfdvdvdfv 1825 1\n",
      "tempsfdvdvdfv 2655 2\n",
      "tempsfdvdvdfv 3555 3\n",
      "tempsfdvdvdfv 4446 4\n",
      "tempsfdvdvdfv 5037 5\n",
      "avg 6 14 758 839 507 562 485 533 483 451\n",
      "left [[743, 473, 924, 586], [740, 473, 901, 581], [791, 502, 830, 530], [889, 572, 900, 580], [876, 563, 891, 574], [509, 462, 591, 524]]\n",
      "right [[347, 439, 427, 387], [686, 531, 735, 502], [346, 438, 419, 387], [465, 349, 495, 330], [342, 438, 424, 387], [683, 531, 703, 519], [270, 483, 299, 460], [745, 479, 763, 467], [290, 465, 415, 387], [744, 479, 762, 467], [432, 434, 445, 426], [277, 478, 365, 421], [501, 688, 528, 672], [665, 530, 694, 512]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 973 0\n",
      "tempsfdvdvdfv 1930 1\n",
      "tempsfdvdvdfv 2734 2\n",
      "tempsfdvdvdfv 3400 3\n",
      "tempsfdvdvdfv 4250 4\n",
      "tempsfdvdvdfv 5138 5\n",
      "tempsfdvdvdfv 5522 6\n",
      "tempsfdvdvdfv 5899 7\n",
      "tempsfdvdvdfv 6516 8\n",
      "tempsfdvdvdfv 6929 9\n",
      "tempsfdvdvdfv 7404 10\n",
      "tempsfdvdvdfv 8123 11\n",
      "tempsfdvdvdfv 8674 12\n",
      "avg 13 7 599 667 457 499 515 608 487 427\n",
      "left [[842, 534, 973, 612], [743, 475, 957, 614], [728, 464, 804, 508], [634, 418, 666, 436], [743, 477, 850, 541], [843, 539, 888, 571], [357, 419, 384, 437], [346, 419, 377, 437], [556, 417, 617, 451], [385, 510, 413, 529], [458, 420, 475, 431], [677, 418, 719, 445], [476, 431, 551, 479]]\n",
      "right [[476, 529, 667, 414], [660, 543, 713, 512], [628, 434, 662, 414], [476, 528, 514, 505], [331, 429, 463, 326], [476, 527, 655, 420], [560, 422, 587, 404]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 817 0\n",
      "tempsfdvdvdfv 1877 1\n",
      "tempsfdvdvdfv 2851 2\n",
      "tempsfdvdvdfv 3927 3\n",
      "tempsfdvdvdfv 4736 4\n",
      "tempsfdvdvdfv 5105 5\n",
      "tempsfdvdvdfv 5422 6\n",
      "tempsfdvdvdfv 5933 7\n",
      "tempsfdvdvdfv 6939 8\n",
      "tempsfdvdvdfv 7704 9\n",
      "tempsfdvdvdfv 8206 10\n",
      "tempsfdvdvdfv 8787 11\n",
      "tempsfdvdvdfv 9304 12\n",
      "tempsfdvdvdfv 10313 13\n",
      "tempsfdvdvdfv 10784 14\n",
      "tempsfdvdvdfv 11596 15\n",
      "avg 16 13 658 724 504 546 457 522 454 412\n",
      "left [[730, 467, 817, 519], [853, 549, 1060, 678], [864, 549, 974, 613], [947, 599, 1076, 674], [746, 481, 809, 519], [344, 421, 369, 439], [300, 463, 317, 476], [435, 487, 511, 542], [981, 576, 1006, 594], [729, 467, 765, 492], [421, 486, 502, 534], [553, 449, 581, 470], [436, 490, 517, 537], [978, 576, 1009, 595], [458, 532, 471, 540], [763, 485, 812, 519]]\n",
      "right [[459, 540, 673, 416], [320, 440, 402, 387], [301, 457, 406, 392], [316, 445, 386, 398], [463, 348, 474, 340], [502, 430, 523, 413], [660, 547, 696, 522], [619, 452, 673, 420], [603, 544, 652, 506], [299, 473, 371, 428], [465, 348, 495, 330], [604, 458, 666, 421], [336, 429, 381, 395]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1079 0\n",
      "tempsfdvdvdfv 2136 1\n",
      "tempsfdvdvdfv 3112 2\n",
      "tempsfdvdvdfv 3543 3\n",
      "tempsfdvdvdfv 3971 4\n",
      "tempsfdvdvdfv 4639 5\n",
      "tempsfdvdvdfv 5664 6\n",
      "tempsfdvdvdfv 6212 7\n",
      "tempsfdvdvdfv 7174 8\n",
      "tempsfdvdvdfv 7662 9\n",
      "tempsfdvdvdfv 8149 10\n",
      "tempsfdvdvdfv 9212 11\n",
      "tempsfdvdvdfv 9908 12\n",
      "tempsfdvdvdfv 10661 13\n",
      "tempsfdvdvdfv 11039 14\n",
      "tempsfdvdvdfv 12089 15\n",
      "tempsfdvdvdfv 12466 16\n",
      "tempsfdvdvdfv 13019 17\n",
      "tempsfdvdvdfv 13685 18\n",
      "avg 19 13 664 720 532 568 448 509 479 439\n",
      "left [[914, 578, 1079, 677], [880, 567, 1057, 677], [934, 600, 976, 625], [372, 393, 431, 434], [374, 395, 428, 433], [643, 423, 668, 438], [1009, 647, 1025, 656], [482, 522, 548, 570], [904, 581, 962, 616], [459, 537, 488, 557], [466, 540, 487, 554], [1017, 600, 1063, 627], [664, 543, 696, 561], [699, 546, 753, 581], [342, 534, 378, 560], [998, 639, 1050, 672], [340, 534, 377, 561], [477, 531, 553, 586], [650, 412, 666, 421]]\n",
      "right [[429, 559, 675, 417], [338, 442, 408, 389], [138, 611, 181, 579], [388, 402, 410, 389], [609, 457, 660, 416], [659, 573, 715, 532], [451, 490, 487, 467], [418, 361, 454, 332], [272, 481, 332, 439], [632, 449, 681, 420], [603, 440, 636, 416], [353, 536, 420, 493], [546, 428, 558, 421]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 784 0\n",
      "tempsfdvdvdfv 1864 1\n",
      "tempsfdvdvdfv 2652 2\n",
      "tempsfdvdvdfv 3672 3\n",
      "tempsfdvdvdfv 4397 4\n",
      "tempsfdvdvdfv 5184 5\n",
      "tempsfdvdvdfv 6182 6\n",
      "tempsfdvdvdfv 7217 7\n",
      "tempsfdvdvdfv 8275 8\n",
      "tempsfdvdvdfv 9360 9\n",
      "tempsfdvdvdfv 9721 10\n",
      "tempsfdvdvdfv 10510 11\n",
      "tempsfdvdvdfv 10958 12\n",
      "tempsfdvdvdfv 11584 13\n",
      "tempsfdvdvdfv 12016 14\n",
      "tempsfdvdvdfv 13002 15\n",
      "tempsfdvdvdfv 13644 16\n",
      "tempsfdvdvdfv 14433 17\n",
      "avg 18 10 747 801 540 576 475 518 488 459\n",
      "left [[757, 491, 784, 506], [942, 596, 1080, 678], [727, 464, 788, 504], [1002, 643, 1020, 655], [670, 553, 725, 597], [671, 415, 787, 506], [920, 592, 998, 642], [1013, 650, 1035, 665], [1022, 655, 1058, 678], [1038, 649, 1085, 677], [309, 544, 361, 583], [736, 474, 789, 504], [378, 392, 448, 437], [595, 569, 626, 591], [370, 396, 432, 436], [960, 607, 986, 624], [596, 569, 642, 596], [740, 475, 789, 506]]\n",
      "right [[773, 496, 799, 481], [167, 605, 215, 573], [518, 591, 544, 572], [541, 595, 580, 572], [420, 359, 459, 330], [377, 401, 473, 331], [497, 472, 517, 460], [389, 402, 405, 391], [420, 363, 454, 336], [651, 598, 741, 546]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 669 0\n",
      "tempsfdvdvdfv 1746 1\n",
      "tempsfdvdvdfv 2806 2\n",
      "tempsfdvdvdfv 3850 3\n",
      "tempsfdvdvdfv 4575 4\n",
      "tempsfdvdvdfv 5370 5\n",
      "tempsfdvdvdfv 6297 6\n",
      "tempsfdvdvdfv 7031 7\n",
      "tempsfdvdvdfv 7570 8\n",
      "tempsfdvdvdfv 8019 9\n",
      "tempsfdvdvdfv 8962 10\n",
      "tempsfdvdvdfv 9534 11\n",
      "tempsfdvdvdfv 10061 12\n",
      "tempsfdvdvdfv 10701 13\n",
      "tempsfdvdvdfv 11076 14\n",
      "tempsfdvdvdfv 11547 15\n",
      "tempsfdvdvdfv 11843 16\n",
      "tempsfdvdvdfv 12897 17\n",
      "tempsfdvdvdfv 13966 18\n",
      "tempsfdvdvdfv 14982 19\n",
      "tempsfdvdvdfv 15875 20\n",
      "avg 21 15 710 755 552 582 399 505 587 520\n",
      "left [[634, 419, 669, 439], [995, 627, 1077, 678], [1002, 642, 1060, 678], [971, 624, 1044, 671], [679, 421, 725, 455], [730, 474, 795, 513], [911, 549, 927, 558], [722, 456, 734, 464], [484, 594, 539, 627], [392, 503, 449, 544], [931, 556, 943, 563], [499, 430, 572, 477], [496, 597, 527, 618], [549, 421, 640, 477], [356, 683, 375, 697], [425, 502, 471, 539], [240, 594, 296, 636], [1018, 653, 1054, 677], [1041, 612, 1069, 634], [976, 617, 1016, 642], [873, 626, 893, 638]]\n",
      "right [[374, 598, 667, 415], [215, 685, 575, 469], [446, 532, 482, 507], [212, 685, 451, 542], [523, 431, 536, 422], [546, 458, 609, 419], [661, 441, 684, 427], [187, 617, 257, 561], [448, 630, 508, 595], [552, 627, 639, 575], [373, 694, 391, 682], [288, 641, 379, 582], [487, 620, 526, 596], [211, 617, 300, 550], [469, 534, 575, 471]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 59%|█████▊    | 147/251 [00:04<00:03, 28.70it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 533 0\n",
      "tempsfdvdvdfv 1338 1\n",
      "tempsfdvdvdfv 2004 2\n",
      "tempsfdvdvdfv 2687 3\n",
      "tempsfdvdvdfv 3556 4\n",
      "tempsfdvdvdfv 4446 5\n",
      "tempsfdvdvdfv 5214 6\n",
      "tempsfdvdvdfv 6118 7\n",
      "tempsfdvdvdfv 6701 8\n",
      "tempsfdvdvdfv 7514 9\n",
      "tempsfdvdvdfv 8016 10\n",
      "tempsfdvdvdfv 8828 11\n",
      "tempsfdvdvdfv 9331 12\n",
      "tempsfdvdvdfv 10050 13\n",
      "tempsfdvdvdfv 10860 14\n",
      "tempsfdvdvdfv 11317 15\n",
      "tempsfdvdvdfv 11542 16\n",
      "tempsfdvdvdfv 12008 17\n",
      "tempsfdvdvdfv 12967 18\n",
      "tempsfdvdvdfv 13925 19\n",
      "tempsfdvdvdfv 14478 20\n",
      "tempsfdvdvdfv 15147 21\n",
      "tempsfdvdvdfv 15946 22\n",
      "tempsfdvdvdfv 16454 23\n",
      "tempsfdvdvdfv 17208 24\n",
      "tempsfdvdvdfv 17876 25\n",
      "tempsfdvdvdfv 18975 26\n",
      "tempsfdvdvdfv 19788 27\n",
      "tempsfdvdvdfv 20030 28\n",
      "avg 29 18 638 690 523 557 292 401 571 503\n",
      "left [[469, 626, 533, 664], [738, 477, 805, 520], [639, 414, 666, 430], [666, 414, 683, 426], [835, 644, 869, 669], [874, 566, 890, 577], [665, 595, 768, 654], [891, 567, 904, 575], [517, 629, 583, 667], [746, 479, 813, 518], [304, 526, 502, 686], [731, 461, 812, 520], [360, 596, 503, 685], [669, 414, 719, 443], [729, 463, 810, 520], [346, 519, 457, 597], [197, 587, 225, 603], [421, 507, 466, 542], [937, 567, 959, 580], [933, 566, 958, 580], [503, 630, 553, 662], [643, 414, 669, 429], [770, 499, 799, 517], [496, 414, 508, 422], [730, 465, 754, 479], [645, 414, 668, 429], [1051, 616, 1099, 650], [799, 510, 813, 520], [213, 598, 242, 615]]\n",
      "right [[327, 624, 672, 417], [320, 623, 577, 469], [211, 684, 410, 565], [297, 620, 553, 473], [309, 618, 400, 566], [189, 607, 259, 564], [334, 626, 543, 480], [168, 610, 230, 572], [400, 434, 410, 427], [372, 402, 473, 331], [179, 609, 253, 565], [66, 672, 105, 646], [465, 435, 512, 408], [480, 667, 552, 611], [181, 594, 205, 580], [58, 671, 102, 646], [451, 351, 480, 332], [456, 436, 496, 413]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 671 0\n",
      "tempsfdvdvdfv 1491 1\n",
      "tempsfdvdvdfv 2320 2\n",
      "tempsfdvdvdfv 2903 3\n",
      "tempsfdvdvdfv 3527 4\n",
      "tempsfdvdvdfv 3802 5\n",
      "tempsfdvdvdfv 4824 6\n",
      "tempsfdvdvdfv 5641 7\n",
      "tempsfdvdvdfv 6365 8\n",
      "tempsfdvdvdfv 6830 9\n",
      "tempsfdvdvdfv 7643 10\n",
      "tempsfdvdvdfv 8666 11\n",
      "tempsfdvdvdfv 9386 12\n",
      "tempsfdvdvdfv 10190 13\n",
      "tempsfdvdvdfv 11026 14\n",
      "tempsfdvdvdfv 11584 15\n",
      "tempsfdvdvdfv 11953 16\n",
      "tempsfdvdvdfv 12747 17\n",
      "tempsfdvdvdfv 13597 18\n",
      "tempsfdvdvdfv 14617 19\n",
      "tempsfdvdvdfv 15566 20\n",
      "tempsfdvdvdfv 16179 21\n",
      "tempsfdvdvdfv 16709 22\n",
      "avg 23 17 677 726 508 542 327 446 584 507\n",
      "left [[631, 416, 671, 439], [672, 416, 820, 531], [806, 516, 829, 531], [495, 418, 583, 472], [574, 423, 624, 455], [159, 593, 275, 677], [990, 589, 1022, 607], [732, 468, 817, 530], [663, 415, 724, 453], [431, 516, 465, 536], [801, 606, 813, 614], [1001, 594, 1023, 607], [677, 418, 720, 442], [741, 472, 804, 516], [825, 602, 836, 610], [496, 429, 558, 477], [329, 648, 369, 679], [750, 484, 794, 516], [840, 599, 850, 606], [989, 589, 1020, 607], [909, 649, 949, 677], [565, 424, 613, 459], [507, 415, 530, 428]]\n",
      "right [[235, 687, 671, 415], [217, 686, 574, 472], [214, 685, 375, 588], [212, 685, 292, 637], [232, 687, 404, 580], [459, 348, 478, 333], [481, 532, 588, 465], [481, 521, 546, 477], [409, 366, 463, 331], [110, 625, 157, 593], [250, 679, 348, 600], [277, 671, 477, 515], [456, 541, 481, 527], [131, 637, 188, 600], [527, 504, 619, 453], [377, 403, 396, 391], [502, 672, 533, 653]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 60%|█████▉    | 150/251 [00:04<00:03, 28.33it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 607 0\n",
      "tempsfdvdvdfv 1211 1\n",
      "tempsfdvdvdfv 2101 2\n",
      "tempsfdvdvdfv 2942 3\n",
      "tempsfdvdvdfv 3738 4\n",
      "tempsfdvdvdfv 4575 5\n",
      "tempsfdvdvdfv 4962 6\n",
      "tempsfdvdvdfv 5352 7\n",
      "tempsfdvdvdfv 5559 8\n",
      "avg 9 26 557 617 524 567 355 427 559 511\n",
      "left [[554, 419, 607, 457], [558, 425, 604, 461], [842, 637, 890, 673], [726, 457, 841, 541], [733, 467, 796, 516], [788, 509, 837, 541], [361, 598, 387, 615], [339, 582, 390, 615], [117, 625, 207, 685]]\n",
      "right [[355, 614, 584, 466], [237, 678, 489, 521], [288, 642, 329, 619], [262, 641, 345, 581], [368, 405, 393, 389], [182, 681, 200, 671], [251, 665, 320, 617], [424, 560, 518, 487], [451, 350, 481, 332], [242, 685, 386, 592], [189, 674, 328, 581], [493, 530, 571, 472], [247, 632, 272, 616], [565, 449, 598, 427], [181, 681, 197, 671], [559, 428, 582, 413], [388, 541, 415, 523], [457, 350, 482, 332], [381, 597, 541, 490], [539, 429, 552, 419], [264, 638, 338, 582], [244, 636, 272, 617], [324, 444, 374, 408], [605, 461, 672, 416], [383, 541, 411, 523], [367, 596, 469, 530]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 835 0\n",
      "tempsfdvdvdfv 1516 1\n",
      "tempsfdvdvdfv 2379 2\n",
      "tempsfdvdvdfv 3220 3\n",
      "tempsfdvdvdfv 3588 4\n",
      "tempsfdvdvdfv 4445 5\n",
      "avg 6 16 660 740 486 544 367 440 553 508\n",
      "left [[727, 460, 835, 541], [665, 413, 681, 425], [721, 453, 863, 556], [806, 516, 841, 544], [302, 605, 368, 649], [742, 474, 857, 554]]\n",
      "right [[304, 646, 584, 465], [216, 685, 578, 468], [242, 683, 276, 664], [168, 621, 215, 594], [278, 562, 325, 534], [396, 583, 474, 529], [602, 440, 645, 413], [314, 639, 339, 622], [372, 400, 391, 388], [475, 433, 507, 413], [270, 562, 299, 542], [577, 445, 610, 421], [465, 540, 482, 529], [399, 575, 457, 533], [274, 554, 302, 535], [532, 495, 559, 478]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 900 0\n",
      "tempsfdvdvdfv 1790 1\n",
      "tempsfdvdvdfv 2422 2\n",
      "tempsfdvdvdfv 3311 3\n",
      "tempsfdvdvdfv 3897 4\n",
      "avg 5 24 704 779 481 528 344 395 565 531\n",
      "left [[818, 526, 900, 573], [814, 529, 890, 576], [578, 412, 632, 450], [815, 529, 889, 575], [499, 410, 586, 469]]\n",
      "right [[508, 509, 560, 478], [223, 686, 369, 592], [353, 612, 592, 463], [253, 681, 272, 667], [624, 425, 642, 413], [383, 584, 534, 496], [351, 617, 423, 561], [242, 686, 301, 651], [79, 660, 93, 649], [222, 686, 236, 675], [475, 344, 489, 333], [311, 631, 336, 614], [344, 620, 458, 549], [563, 425, 578, 414], [395, 498, 405, 490], [482, 346, 497, 334], [200, 568, 221, 552], [350, 578, 400, 542], [354, 578, 403, 542], [284, 662, 304, 647], [499, 522, 559, 479], [476, 431, 504, 409], [203, 564, 218, 552], [82, 659, 95, 650]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 939 0\n",
      "tempsfdvdvdfv 1869 1\n",
      "tempsfdvdvdfv 2528 2\n",
      "tempsfdvdvdfv 3314 3\n",
      "tempsfdvdvdfv 4228 4\n",
      "tempsfdvdvdfv 5170 5\n",
      "tempsfdvdvdfv 5927 6\n",
      "tempsfdvdvdfv 6867 7\n",
      "tempsfdvdvdfv 7651 8\n",
      "tempsfdvdvdfv 8511 9\n",
      "tempsfdvdvdfv 9385 10\n",
      "tempsfdvdvdfv 10269 11\n",
      "tempsfdvdvdfv 10751 12\n",
      "tempsfdvdvdfv 11276 13\n",
      "tempsfdvdvdfv 11766 14\n",
      "avg 15 21 737 784 500 530 469 531 503 465\n",
      "left [[863, 551, 939, 600], [873, 567, 930, 600], [624, 420, 659, 440], [743, 474, 786, 501], [829, 537, 914, 592], [838, 537, 942, 599], [742, 470, 757, 479], [922, 586, 940, 597], [679, 419, 784, 501], [830, 539, 860, 556], [835, 537, 874, 560], [837, 537, 884, 565], [466, 330, 482, 339], [501, 490, 525, 504], [480, 514, 490, 520]]\n",
      "right [[308, 629, 566, 474], [413, 573, 588, 464], [297, 649, 433, 564], [573, 478, 667, 420], [642, 446, 676, 426], [632, 450, 671, 427], [580, 445, 631, 412], [598, 441, 637, 419], [473, 513, 510, 490], [354, 412, 391, 387], [623, 453, 669, 420], [424, 569, 480, 526], [605, 461, 659, 421], [445, 350, 475, 331], [287, 656, 305, 645], [495, 524, 530, 496], [490, 513, 529, 491], [272, 666, 289, 656], [410, 573, 462, 544], [446, 350, 477, 331], [489, 431, 506, 421]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 61%|██████▏   | 154/251 [00:04<00:03, 29.18it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 998 0\n",
      "tempsfdvdvdfv 1907 1\n",
      "tempsfdvdvdfv 2589 2\n",
      "tempsfdvdvdfv 3270 3\n",
      "tempsfdvdvdfv 3951 4\n",
      "tempsfdvdvdfv 4744 5\n",
      "tempsfdvdvdfv 5705 6\n",
      "tempsfdvdvdfv 6495 7\n",
      "tempsfdvdvdfv 7397 8\n",
      "tempsfdvdvdfv 7744 9\n",
      "tempsfdvdvdfv 8475 10\n",
      "tempsfdvdvdfv 9472 11\n",
      "tempsfdvdvdfv 10398 12\n",
      "tempsfdvdvdfv 10741 13\n",
      "tempsfdvdvdfv 11734 14\n",
      "tempsfdvdvdfv 12525 15\n",
      "tempsfdvdvdfv 12969 16\n",
      "tempsfdvdvdfv 13761 17\n",
      "tempsfdvdvdfv 14247 18\n",
      "tempsfdvdvdfv 14747 19\n",
      "tempsfdvdvdfv 15658 20\n",
      "tempsfdvdvdfv 16178 21\n",
      "tempsfdvdvdfv 16523 22\n",
      "avg 23 14 667 718 487 522 365 473 569 502\n",
      "left [[859, 551, 998, 634], [850, 553, 909, 591], [671, 416, 682, 424], [650, 413, 681, 433], [670, 416, 681, 424], [724, 455, 793, 505], [857, 551, 961, 623], [748, 478, 790, 508], [853, 551, 902, 586], [332, 432, 347, 441], [717, 445, 731, 456], [977, 619, 997, 631], [863, 552, 926, 601], [330, 433, 343, 441], [860, 551, 993, 630], [724, 456, 791, 508], [411, 486, 444, 505], [720, 450, 792, 508], [418, 484, 486, 526], [456, 540, 500, 574], [856, 551, 911, 592], [484, 407, 520, 429], [330, 432, 345, 441]]\n",
      "right [[215, 685, 569, 473], [332, 628, 578, 469], [368, 602, 378, 596], [242, 685, 515, 508], [304, 623, 334, 606], [366, 440, 385, 426], [345, 605, 355, 599], [480, 524, 551, 482], [223, 682, 575, 470], [601, 441, 633, 421], [451, 346, 462, 338], [440, 598, 477, 576], [503, 430, 518, 421], [246, 683, 301, 648]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1048 0\n",
      "tempsfdvdvdfv 1980 1\n",
      "tempsfdvdvdfv 2897 2\n",
      "tempsfdvdvdfv 3970 3\n",
      "tempsfdvdvdfv 5017 4\n",
      "tempsfdvdvdfv 6089 5\n",
      "tempsfdvdvdfv 6752 6\n",
      "tempsfdvdvdfv 7127 7\n",
      "tempsfdvdvdfv 7929 8\n",
      "tempsfdvdvdfv 8887 9\n",
      "avg 10 14 791 888 528 587 283 386 605 539\n",
      "left [[876, 567, 1048, 674], [887, 565, 932, 591], [881, 565, 917, 586], [883, 565, 1073, 674], [880, 565, 1047, 673], [885, 565, 1072, 673], [622, 410, 663, 435], [362, 429, 375, 437], [761, 484, 802, 509], [878, 569, 958, 619]]\n",
      "right [[621, 434, 657, 412], [322, 632, 575, 468], [222, 684, 538, 487], [261, 674, 378, 598], [442, 347, 471, 327], [220, 684, 363, 595], [433, 554, 562, 474], [134, 675, 260, 580], [266, 669, 345, 625], [157, 626, 203, 596], [134, 635, 145, 628], [176, 665, 240, 628], [257, 675, 333, 627], [324, 516, 340, 506]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1057 0\n",
      "tempsfdvdvdfv 2079 1\n",
      "tempsfdvdvdfv 2901 2\n",
      "tempsfdvdvdfv 3571 3\n",
      "tempsfdvdvdfv 4614 4\n",
      "tempsfdvdvdfv 5426 5\n",
      "tempsfdvdvdfv 6362 6\n",
      "tempsfdvdvdfv 6895 7\n",
      "tempsfdvdvdfv 7935 8\n",
      "tempsfdvdvdfv 8524 9\n",
      "avg 10 18 785 852 528 572 378 465 549 493\n",
      "left [[970, 622, 1057, 671], [910, 593, 1022, 665], [727, 458, 822, 524], [632, 412, 670, 436], [927, 593, 1043, 677], [754, 482, 812, 524], [910, 592, 936, 611], [481, 467, 533, 498], [990, 644, 1040, 676], [556, 418, 589, 443]]\n",
      "right [[218, 684, 507, 510], [244, 684, 570, 473], [134, 645, 199, 601], [325, 515, 345, 503], [488, 524, 585, 466], [424, 545, 490, 506], [435, 553, 513, 503], [443, 434, 487, 406], [220, 684, 341, 611], [435, 547, 488, 514], [603, 440, 650, 413], [441, 348, 457, 338], [382, 594, 481, 520], [444, 345, 465, 329], [430, 555, 442, 548], [535, 497, 575, 471], [332, 626, 491, 526], [274, 666, 299, 647]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 63%|██████▎   | 158/251 [00:04<00:03, 29.96it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1007 0\n",
      "tempsfdvdvdfv 2052 1\n",
      "tempsfdvdvdfv 3088 2\n",
      "tempsfdvdvdfv 3871 3\n",
      "tempsfdvdvdfv 4915 4\n",
      "tempsfdvdvdfv 5693 5\n",
      "tempsfdvdvdfv 6732 6\n",
      "tempsfdvdvdfv 7463 7\n",
      "tempsfdvdvdfv 8433 8\n",
      "tempsfdvdvdfv 9103 9\n",
      "tempsfdvdvdfv 10143 10\n",
      "tempsfdvdvdfv 10890 11\n",
      "tempsfdvdvdfv 11672 12\n",
      "tempsfdvdvdfv 12686 13\n",
      "tempsfdvdvdfv 13351 14\n",
      "tempsfdvdvdfv 14367 15\n",
      "tempsfdvdvdfv 15039 16\n",
      "tempsfdvdvdfv 15706 17\n",
      "tempsfdvdvdfv 16369 18\n",
      "tempsfdvdvdfv 16889 19\n",
      "tempsfdvdvdfv 17216 20\n",
      "tempsfdvdvdfv 18000 21\n",
      "tempsfdvdvdfv 18678 22\n",
      "avg 23 14 770 812 513 540 337 429 549 492\n",
      "left [[971, 622, 1007, 644], [979, 624, 1045, 667], [961, 627, 1036, 674], [728, 459, 783, 496], [1020, 657, 1044, 672], [762, 488, 778, 499], [968, 631, 1039, 674], [663, 415, 731, 456], [959, 621, 970, 628], [627, 410, 670, 436], [967, 622, 1040, 673], [722, 453, 747, 470], [758, 484, 782, 499], [973, 622, 1014, 648], [631, 416, 665, 437], [965, 629, 1016, 658], [636, 413, 672, 435], [625, 411, 667, 437], [621, 414, 663, 438], [486, 405, 520, 428], [309, 513, 327, 524], [741, 470, 784, 499], [649, 414, 678, 433]]\n",
      "right [[252, 680, 570, 473], [222, 686, 540, 488], [220, 686, 527, 495], [299, 525, 331, 507], [434, 431, 476, 406], [246, 684, 260, 676], [437, 431, 476, 407], [267, 535, 286, 524], [261, 536, 291, 519], [277, 664, 314, 641], [434, 434, 471, 411], [444, 433, 490, 406], [257, 537, 287, 520], [672, 432, 687, 423]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 787 0\n",
      "tempsfdvdvdfv 1581 1\n",
      "tempsfdvdvdfv 2636 2\n",
      "tempsfdvdvdfv 3430 3\n",
      "tempsfdvdvdfv 4066 4\n",
      "tempsfdvdvdfv 4737 5\n",
      "tempsfdvdvdfv 5526 6\n",
      "tempsfdvdvdfv 5914 7\n",
      "tempsfdvdvdfv 6705 8\n",
      "tempsfdvdvdfv 7090 9\n",
      "avg 10 25 659 709 489 522 373 446 571 525\n",
      "left [[745, 471, 787, 503], [733, 461, 794, 501], [1043, 665, 1055, 673], [732, 455, 794, 503], [550, 394, 636, 444], [641, 409, 671, 429], [731, 459, 789, 503], [350, 562, 388, 584], [724, 452, 791, 503], [349, 562, 385, 583]]\n",
      "right [[355, 596, 593, 459], [477, 528, 609, 452], [316, 620, 382, 583], [217, 682, 229, 675], [211, 682, 274, 647], [538, 495, 670, 416], [240, 683, 328, 624], [351, 611, 435, 553], [441, 553, 526, 492], [396, 582, 412, 570], [474, 522, 494, 510], [429, 550, 557, 476], [275, 645, 302, 630], [431, 553, 519, 496], [221, 679, 235, 671], [401, 568, 477, 524], [541, 490, 560, 479], [245, 679, 561, 474], [440, 341, 454, 333], [437, 344, 468, 326], [257, 671, 314, 630], [307, 632, 341, 605], [243, 680, 255, 671], [544, 448, 586, 418], [543, 448, 585, 418]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 679 0\n",
      "tempsfdvdvdfv 1363 1\n",
      "tempsfdvdvdfv 2168 2\n",
      "tempsfdvdvdfv 2963 3\n",
      "tempsfdvdvdfv 3685 4\n",
      "tempsfdvdvdfv 4302 5\n",
      "tempsfdvdvdfv 4732 6\n",
      "tempsfdvdvdfv 5482 7\n",
      "tempsfdvdvdfv 6263 8\n",
      "tempsfdvdvdfv 7057 9\n",
      "avg 10 8 662 705 435 465 324 439 595 522\n",
      "left [[654, 413, 679, 430], [658, 412, 684, 429], [778, 489, 805, 510], [724, 452, 795, 509], [663, 412, 722, 445], [563, 403, 617, 433], [417, 420, 430, 429], [692, 427, 750, 471], [748, 472, 781, 492], [732, 459, 794, 508]]\n",
      "right [[235, 684, 553, 478], [288, 638, 507, 502], [211, 684, 398, 568], [235, 683, 298, 642], [455, 532, 491, 511], [281, 642, 336, 607], [431, 429, 468, 402], [456, 474, 468, 466]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 818 0\n",
      "tempsfdvdvdfv 1635 1\n",
      "tempsfdvdvdfv 2303 2\n",
      "tempsfdvdvdfv 3121 3\n",
      "tempsfdvdvdfv 3934 4\n",
      "tempsfdvdvdfv 4749 5\n",
      "avg 6 12 732 791 462 503 352 438 550 497\n",
      "left [[733, 458, 818, 516], [733, 459, 817, 518], [631, 409, 668, 432], [785, 494, 818, 518], [733, 460, 813, 518], [778, 494, 815, 518]]\n",
      "right [[231, 684, 484, 520], [208, 683, 379, 580], [338, 603, 435, 547], [597, 460, 668, 414], [545, 482, 561, 473], [189, 554, 250, 520], [194, 554, 242, 523], [605, 419, 623, 409], [299, 627, 320, 615], [210, 683, 467, 523], [404, 430, 419, 421], [405, 427, 415, 421]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 65%|██████▍   | 162/251 [00:04<00:02, 30.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 835 0\n",
      "tempsfdvdvdfv 1654 1\n",
      "tempsfdvdvdfv 2443 2\n",
      "tempsfdvdvdfv 3200 3\n",
      "tempsfdvdvdfv 3930 4\n",
      "tempsfdvdvdfv 4732 5\n",
      "tempsfdvdvdfv 5566 6\n",
      "tempsfdvdvdfv 6294 7\n",
      "avg 8 19 720 786 449 497 423 492 533 491\n",
      "left [[734, 462, 835, 528], [692, 427, 819, 526], [726, 453, 789, 499], [734, 463, 757, 481], [683, 421, 730, 453], [719, 449, 802, 514], [800, 506, 834, 528], [673, 416, 728, 453]]\n",
      "right [[347, 598, 494, 510], [216, 678, 296, 631], [314, 628, 400, 576], [452, 541, 663, 424], [629, 448, 677, 421], [297, 629, 341, 604], [499, 516, 576, 468], [580, 471, 598, 461], [230, 686, 482, 523], [431, 429, 478, 402], [429, 429, 476, 401], [505, 505, 524, 494], [219, 686, 235, 676], [389, 572, 474, 521], [522, 496, 536, 488], [565, 479, 588, 466], [437, 429, 478, 404], [550, 482, 568, 472], [426, 429, 469, 402]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 855 0\n",
      "tempsfdvdvdfv 1698 1\n",
      "tempsfdvdvdfv 2704 2\n",
      "tempsfdvdvdfv 3550 3\n",
      "tempsfdvdvdfv 4559 4\n",
      "tempsfdvdvdfv 5406 5\n",
      "tempsfdvdvdfv 6254 6\n",
      "tempsfdvdvdfv 7019 7\n",
      "tempsfdvdvdfv 7743 8\n",
      "tempsfdvdvdfv 8374 9\n",
      "tempsfdvdvdfv 9118 10\n",
      "tempsfdvdvdfv 9612 11\n",
      "avg 12 16 729 801 484 531 320 379 600 564\n",
      "left [[737, 465, 855, 541], [762, 485, 843, 542], [994, 643, 1006, 651], [692, 427, 846, 543], [996, 642, 1009, 651], [797, 509, 847, 543], [669, 416, 848, 536], [736, 465, 765, 485], [683, 421, 724, 448], [551, 401, 631, 447], [658, 417, 744, 465], [482, 518, 494, 525]]\n",
      "right [[299, 640, 365, 598], [172, 703, 274, 644], [392, 578, 502, 512], [270, 646, 370, 582], [206, 700, 303, 639], [426, 430, 468, 402], [337, 605, 371, 582], [233, 698, 249, 686], [376, 590, 391, 579], [283, 651, 306, 637], [242, 698, 262, 686], [264, 649, 276, 642], [486, 524, 533, 491], [296, 515, 318, 502], [423, 430, 472, 401], [429, 556, 607, 453]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 869 0\n",
      "tempsfdvdvdfv 1750 1\n",
      "tempsfdvdvdfv 2577 2\n",
      "tempsfdvdvdfv 3309 3\n",
      "tempsfdvdvdfv 4190 4\n",
      "tempsfdvdvdfv 5027 5\n",
      "tempsfdvdvdfv 5641 6\n",
      "tempsfdvdvdfv 6518 7\n",
      "tempsfdvdvdfv 7327 8\n",
      "avg 9 13 730 814 462 520 343 446 574 511\n",
      "left [[739, 466, 869, 557], [730, 457, 881, 555], [681, 420, 827, 522], [721, 447, 732, 455], [841, 530, 881, 558], [721, 449, 837, 536], [580, 413, 614, 433], [818, 515, 877, 558], [739, 465, 809, 514]]\n",
      "right [[440, 548, 667, 422], [266, 645, 454, 532], [229, 684, 430, 554], [496, 510, 519, 497], [207, 683, 261, 650], [314, 621, 353, 597], [291, 629, 431, 545], [204, 682, 352, 597], [598, 420, 611, 410], [420, 562, 472, 522], [338, 434, 391, 396], [316, 626, 465, 533], [349, 430, 392, 398]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 66%|██████▌   | 166/251 [00:05<00:02, 30.72it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 892 0\n",
      "tempsfdvdvdfv 1808 1\n",
      "tempsfdvdvdfv 2592 2\n",
      "tempsfdvdvdfv 3487 3\n",
      "tempsfdvdvdfv 4312 4\n",
      "tempsfdvdvdfv 5093 5\n",
      "tempsfdvdvdfv 5877 6\n",
      "tempsfdvdvdfv 6597 7\n",
      "tempsfdvdvdfv 7376 8\n",
      "avg 9 19 746 819 469 520 434 504 548 506\n",
      "left [[824, 528, 892, 575], [832, 527, 916, 579], [667, 415, 784, 497], [826, 527, 895, 577], [695, 429, 825, 530], [743, 471, 781, 497], [691, 430, 784, 495], [697, 428, 720, 441], [744, 473, 779, 497]]\n",
      "right [[291, 645, 388, 586], [207, 684, 439, 545], [366, 598, 427, 562], [525, 505, 669, 419], [445, 551, 520, 501], [454, 546, 562, 479], [653, 441, 685, 423], [229, 686, 288, 647], [410, 563, 450, 539], [477, 525, 505, 509], [507, 515, 568, 476], [513, 511, 551, 485], [505, 516, 540, 491], [556, 488, 597, 461], [582, 474, 635, 444], [396, 433, 414, 423], [618, 435, 651, 416], [210, 683, 327, 610], [316, 631, 363, 600]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 946 0\n",
      "tempsfdvdvdfv 1740 1\n",
      "tempsfdvdvdfv 2692 2\n",
      "tempsfdvdvdfv 3653 3\n",
      "tempsfdvdvdfv 4408 4\n",
      "tempsfdvdvdfv 5198 5\n",
      "tempsfdvdvdfv 5873 6\n",
      "tempsfdvdvdfv 6666 7\n",
      "tempsfdvdvdfv 7611 8\n",
      "tempsfdvdvdfv 8558 9\n",
      "tempsfdvdvdfv 8882 10\n",
      "avg 11 17 746 807 501 540 377 457 561 512\n",
      "left [[843, 542, 946, 609], [734, 465, 794, 502], [850, 540, 952, 601], [849, 540, 961, 607], [734, 464, 755, 476], [747, 476, 790, 504], [665, 412, 675, 419], [720, 451, 793, 504], [915, 580, 945, 598], [844, 542, 947, 609], [313, 509, 324, 516]]\n",
      "right [[255, 656, 501, 514], [232, 686, 460, 544], [481, 533, 519, 510], [456, 548, 513, 508], [211, 686, 259, 654], [532, 504, 574, 475], [210, 684, 229, 672], [604, 440, 634, 418], [408, 581, 496, 517], [326, 440, 384, 407], [334, 437, 382, 401], [307, 625, 475, 528], [469, 540, 511, 509], [479, 534, 524, 502], [228, 674, 239, 666], [457, 546, 603, 465], [434, 434, 467, 414]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1025 0\n",
      "tempsfdvdvdfv 1700 1\n",
      "tempsfdvdvdfv 2649 2\n",
      "tempsfdvdvdfv 3639 3\n",
      "tempsfdvdvdfv 4644 4\n",
      "tempsfdvdvdfv 5448 5\n",
      "tempsfdvdvdfv 6189 6\n",
      "tempsfdvdvdfv 6944 7\n",
      "tempsfdvdvdfv 7612 8\n",
      "tempsfdvdvdfv 8366 9\n",
      "tempsfdvdvdfv 9085 10\n",
      "tempsfdvdvdfv 10061 11\n",
      "tempsfdvdvdfv 10739 12\n",
      "tempsfdvdvdfv 11510 13\n",
      "tempsfdvdvdfv 12462 14\n",
      "tempsfdvdvdfv 13183 15\n",
      "tempsfdvdvdfv 14207 16\n",
      "tempsfdvdvdfv 14877 17\n",
      "tempsfdvdvdfv 15900 18\n",
      "tempsfdvdvdfv 16651 19\n",
      "tempsfdvdvdfv 17331 20\n",
      "tempsfdvdvdfv 17901 21\n",
      "tempsfdvdvdfv 18797 22\n",
      "avg 23 15 769 817 490 522 373 450 589 542\n",
      "left [[877, 556, 1025, 648], [653, 419, 675, 433], [866, 557, 949, 612], [942, 606, 990, 639], [970, 624, 1005, 648], [751, 479, 804, 512], [665, 412, 741, 469], [680, 420, 755, 478], [657, 414, 668, 421], [724, 458, 754, 482], [662, 412, 719, 449], [876, 556, 976, 618], [658, 412, 678, 426], [660, 418, 771, 487], [937, 603, 952, 614], [663, 411, 721, 449], [985, 622, 1024, 648], [657, 412, 670, 421], [1007, 635, 1023, 646], [737, 468, 751, 478], [660, 422, 680, 435], [547, 409, 570, 424], [867, 558, 896, 578]]\n",
      "right [[386, 591, 670, 427], [356, 598, 599, 463], [619, 459, 677, 426], [231, 686, 296, 648], [267, 652, 331, 613], [601, 467, 671, 427], [281, 656, 347, 617], [365, 604, 402, 583], [237, 685, 248, 677], [542, 499, 599, 467], [221, 686, 272, 648], [214, 683, 238, 668], [215, 685, 260, 655], [545, 427, 583, 399], [523, 460, 565, 426]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 819 0\n",
      "tempsfdvdvdfv 1869 1\n",
      "tempsfdvdvdfv 2941 2\n",
      "tempsfdvdvdfv 4014 3\n",
      "tempsfdvdvdfv 4963 4\n",
      "tempsfdvdvdfv 5737 5\n",
      "tempsfdvdvdfv 6373 6\n",
      "tempsfdvdvdfv 7326 7\n",
      "tempsfdvdvdfv 8320 8\n",
      "tempsfdvdvdfv 9138 9\n",
      "tempsfdvdvdfv 10100 10\n",
      "tempsfdvdvdfv 10913 11\n",
      "tempsfdvdvdfv 11268 12\n",
      "avg 13 18 783 866 519 573 418 480 533 495\n",
      "left [[655, 416, 819, 519], [897, 578, 1050, 677], [905, 576, 1072, 676], [907, 576, 1073, 676], [896, 578, 949, 613], [681, 420, 774, 495], [576, 405, 636, 448], [909, 577, 953, 602], [969, 625, 994, 642], [739, 472, 818, 519], [952, 614, 962, 621], [755, 483, 813, 521], [341, 432, 355, 440]]\n",
      "right [[381, 597, 496, 528], [500, 527, 678, 421], [259, 658, 500, 519], [235, 686, 307, 644], [305, 644, 359, 612], [519, 510, 572, 479], [315, 655, 325, 649], [365, 607, 398, 588], [652, 424, 666, 415], [492, 525, 524, 506], [348, 422, 376, 406], [488, 534, 604, 462], [568, 490, 662, 419], [363, 439, 375, 430], [388, 593, 406, 583], [349, 420, 359, 414], [661, 442, 675, 434], [348, 423, 375, 408]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 785 0\n",
      "tempsfdvdvdfv 1830 1\n",
      "tempsfdvdvdfv 2905 2\n",
      "tempsfdvdvdfv 3675 3\n",
      "tempsfdvdvdfv 4721 4\n",
      "tempsfdvdvdfv 5506 5\n",
      "tempsfdvdvdfv 6186 6\n",
      "tempsfdvdvdfv 6661 7\n",
      "tempsfdvdvdfv 7226 8\n",
      "tempsfdvdvdfv 8009 9\n",
      "tempsfdvdvdfv 8736 10\n",
      "tempsfdvdvdfv 9803 11\n",
      "tempsfdvdvdfv 10584 12\n",
      "tempsfdvdvdfv 11320 13\n",
      "tempsfdvdvdfv 11884 14\n",
      "tempsfdvdvdfv 12905 15\n",
      "tempsfdvdvdfv 13921 16\n",
      "avg 17 12 762 818 495 532 373 476 601 539\n",
      "left [[727, 462, 785, 498], [935, 603, 1045, 674], [948, 601, 1075, 677], [633, 396, 770, 488], [1024, 659, 1046, 674], [727, 461, 785, 499], [648, 411, 680, 433], [440, 340, 475, 364], [541, 410, 565, 426], [760, 487, 783, 501], [675, 417, 727, 455], [1018, 644, 1067, 673], [731, 466, 781, 501], [651, 406, 736, 464], [543, 412, 564, 426], [1006, 648, 1021, 658], [947, 601, 1016, 641]]\n",
      "right [[365, 609, 678, 421], [217, 685, 370, 596], [285, 645, 580, 475], [282, 661, 364, 611], [241, 686, 278, 665], [563, 495, 653, 432], [219, 685, 233, 677], [531, 504, 577, 477], [346, 621, 367, 609], [259, 675, 294, 655], [617, 461, 657, 431], [560, 495, 665, 429]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1048 0\n",
      "tempsfdvdvdfv 1839 1\n",
      "tempsfdvdvdfv 2912 2\n",
      "tempsfdvdvdfv 3978 3\n",
      "tempsfdvdvdfv 4773 4\n",
      "tempsfdvdvdfv 5493 5\n",
      "tempsfdvdvdfv 6259 6\n",
      "tempsfdvdvdfv 7313 7\n",
      "tempsfdvdvdfv 7993 8\n",
      "tempsfdvdvdfv 8782 9\n",
      "tempsfdvdvdfv 9461 10\n",
      "tempsfdvdvdfv 10125 11\n",
      "tempsfdvdvdfv 10754 12\n",
      "tempsfdvdvdfv 11358 13\n",
      "tempsfdvdvdfv 12150 14\n",
      "avg 15 12 770 810 500 526 453 570 556 484\n",
      "left [[984, 635, 1048, 676], [765, 493, 791, 508], [1009, 638, 1073, 678], [1006, 637, 1066, 674], [729, 466, 795, 506], [693, 426, 720, 445], [731, 468, 766, 490], [999, 644, 1054, 678], [653, 421, 680, 437], [777, 501, 789, 508], [654, 421, 679, 435], [638, 426, 664, 442], [586, 407, 629, 439], [554, 430, 604, 469], [775, 493, 792, 505]]\n",
      "right [[249, 686, 610, 461], [227, 685, 428, 565], [551, 501, 678, 422], [645, 435, 674, 418], [408, 578, 546, 496], [450, 562, 675, 422], [477, 538, 585, 474], [608, 467, 683, 421], [290, 646, 328, 624], [424, 578, 476, 545], [626, 458, 649, 444], [485, 540, 516, 520]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 68%|██████▊   | 170/251 [00:05<00:02, 30.32it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 800 0\n",
      "tempsfdvdvdfv 1605 1\n",
      "tempsfdvdvdfv 2275 2\n",
      "tempsfdvdvdfv 3011 3\n",
      "tempsfdvdvdfv 3740 4\n",
      "tempsfdvdvdfv 4544 5\n",
      "tempsfdvdvdfv 5324 6\n",
      "tempsfdvdvdfv 5826 7\n",
      "avg 8 22 673 728 475 510 394 457 537 497\n",
      "left [[770, 498, 800, 516], [730, 468, 805, 513], [645, 408, 670, 424], [650, 415, 736, 467], [667, 419, 729, 461], [770, 496, 804, 516], [680, 429, 780, 499], [477, 673, 502, 687]]\n",
      "right [[236, 685, 595, 470], [257, 686, 494, 538], [482, 544, 531, 514], [259, 686, 323, 646], [529, 514, 634, 451], [272, 663, 352, 614], [313, 448, 337, 432], [599, 473, 631, 453], [265, 667, 277, 659], [387, 604, 439, 572], [399, 442, 443, 411], [349, 616, 367, 606], [545, 510, 594, 471], [310, 448, 336, 433], [487, 342, 497, 334], [240, 545, 255, 535], [642, 427, 658, 415], [521, 519, 649, 445], [480, 546, 492, 539], [440, 571, 455, 562], [324, 436, 358, 416], [335, 445, 356, 431]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 818 0\n",
      "tempsfdvdvdfv 1631 1\n",
      "tempsfdvdvdfv 2442 2\n",
      "tempsfdvdvdfv 3257 3\n",
      "tempsfdvdvdfv 3924 4\n",
      "tempsfdvdvdfv 4733 5\n",
      "tempsfdvdvdfv 5409 6\n",
      "tempsfdvdvdfv 6082 7\n",
      "tempsfdvdvdfv 6811 8\n",
      "tempsfdvdvdfv 7527 9\n",
      "tempsfdvdvdfv 8058 10\n",
      "tempsfdvdvdfv 8784 11\n",
      "avg 12 15 670 732 429 470 440 520 571 519\n",
      "left [[731, 468, 818, 524], [731, 470, 813, 525], [665, 415, 811, 525], [754, 484, 815, 525], [653, 423, 667, 432], [733, 472, 809, 525], [645, 410, 676, 431], [653, 426, 673, 438], [656, 414, 729, 463], [677, 420, 716, 448], [505, 332, 531, 347], [647, 416, 726, 462]]\n",
      "right [[549, 505, 681, 420], [257, 678, 401, 589], [280, 679, 355, 629], [364, 613, 556, 494], [426, 585, 534, 513], [389, 609, 476, 551], [637, 439, 668, 420], [244, 685, 340, 626], [532, 517, 604, 467], [524, 521, 584, 478], [354, 630, 374, 618], [547, 501, 577, 482], [602, 473, 676, 420], [311, 659, 371, 619], [597, 476, 617, 460]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 811 0\n",
      "tempsfdvdvdfv 1645 1\n",
      "tempsfdvdvdfv 2174 2\n",
      "tempsfdvdvdfv 2899 3\n",
      "tempsfdvdvdfv 3726 4\n",
      "tempsfdvdvdfv 4446 5\n",
      "tempsfdvdvdfv 5235 6\n",
      "tempsfdvdvdfv 6066 7\n",
      "tempsfdvdvdfv 6797 8\n",
      "tempsfdvdvdfv 7400 9\n",
      "avg 10 25 669 740 433 481 429 489 543 503\n",
      "left [[657, 410, 811, 526], [757, 488, 834, 532], [503, 331, 529, 347], [674, 417, 725, 457], [786, 510, 827, 534], [657, 409, 720, 444], [733, 472, 789, 507], [719, 456, 831, 534], [674, 420, 731, 463], [532, 421, 603, 472]]\n",
      "right [[252, 685, 596, 471], [602, 473, 680, 423], [277, 685, 394, 607], [455, 566, 674, 424], [411, 597, 433, 581], [358, 447, 410, 405], [618, 443, 643, 424], [476, 545, 490, 535], [390, 611, 424, 587], [423, 589, 445, 573], [393, 445, 443, 413], [485, 341, 502, 331], [487, 538, 506, 525], [454, 567, 527, 523], [438, 579, 453, 568], [524, 515, 558, 493], [586, 482, 662, 421], [407, 441, 428, 424], [366, 627, 403, 601], [273, 686, 351, 637], [432, 345, 442, 337], [555, 500, 648, 446], [468, 550, 479, 542], [255, 683, 281, 666], [352, 636, 366, 626]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 852 0\n",
      "tempsfdvdvdfv 1694 1\n",
      "tempsfdvdvdfv 2419 2\n",
      "tempsfdvdvdfv 3255 3\n",
      "tempsfdvdvdfv 4107 4\n",
      "tempsfdvdvdfv 4708 5\n",
      "tempsfdvdvdfv 5696 6\n",
      "tempsfdvdvdfv 6217 7\n",
      "tempsfdvdvdfv 7196 8\n",
      "tempsfdvdvdfv 8045 9\n",
      "tempsfdvdvdfv 8866 10\n",
      "avg 11 7 730 806 474 523 355 522 581 471\n",
      "left [[736, 471, 852, 541], [662, 412, 842, 542], [650, 413, 725, 455], [735, 468, 836, 539], [735, 470, 852, 540], [531, 417, 601, 466], [971, 624, 988, 636], [511, 338, 521, 344], [968, 623, 979, 630], [736, 468, 849, 538], [798, 514, 821, 529]]\n",
      "right [[309, 650, 549, 495], [277, 685, 670, 420], [254, 685, 504, 523], [513, 519, 551, 494], [400, 442, 439, 412], [471, 553, 663, 428], [267, 539, 283, 527]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 69%|██████▉   | 174/251 [00:05<00:02, 30.29it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 874 0\n",
      "tempsfdvdvdfv 1554 1\n",
      "tempsfdvdvdfv 2429 2\n",
      "tempsfdvdvdfv 3293 3\n",
      "tempsfdvdvdfv 4101 4\n",
      "tempsfdvdvdfv 4968 5\n",
      "tempsfdvdvdfv 5702 6\n",
      "tempsfdvdvdfv 6423 7\n",
      "tempsfdvdvdfv 7098 8\n",
      "tempsfdvdvdfv 7932 9\n",
      "tempsfdvdvdfv 8744 10\n",
      "tempsfdvdvdfv 9617 11\n",
      "tempsfdvdvdfv 10083 12\n",
      "tempsfdvdvdfv 10853 13\n",
      "avg 14 11 713 775 457 497 450 595 565 465\n",
      "left [[640, 402, 874, 554], [648, 411, 680, 432], [847, 535, 875, 553], [818, 525, 864, 554], [739, 471, 808, 516], [807, 518, 867, 554], [651, 405, 734, 459], [675, 417, 721, 448], [662, 426, 675, 434], [806, 516, 834, 534], [751, 476, 812, 516], [821, 519, 873, 554], [456, 360, 466, 368], [674, 417, 770, 492]]\n",
      "right [[280, 685, 504, 529], [251, 686, 545, 496], [255, 685, 576, 477], [333, 649, 597, 465], [594, 472, 669, 418], [493, 543, 580, 475], [563, 491, 654, 428], [598, 470, 670, 418], [542, 505, 587, 471], [491, 541, 523, 517], [557, 495, 649, 429]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 850 0\n",
      "tempsfdvdvdfv 1729 1\n",
      "tempsfdvdvdfv 2623 2\n",
      "tempsfdvdvdfv 3528 3\n",
      "tempsfdvdvdfv 4366 4\n",
      "tempsfdvdvdfv 5145 5\n",
      "tempsfdvdvdfv 6004 6\n",
      "tempsfdvdvdfv 6786 7\n",
      "tempsfdvdvdfv 7519 8\n",
      "tempsfdvdvdfv 8353 9\n",
      "tempsfdvdvdfv 8980 10\n",
      "tempsfdvdvdfv 9416 11\n",
      "tempsfdvdvdfv 10307 12\n",
      "tempsfdvdvdfv 11174 13\n",
      "avg 14 28 752 798 490 520 449 505 556 519\n",
      "left [[829, 522, 850, 534], [825, 522, 879, 552], [827, 527, 894, 570], [846, 532, 905, 570], [821, 525, 838, 536], [716, 443, 779, 494], [825, 526, 859, 549], [739, 469, 782, 493], [721, 451, 733, 458], [781, 491, 834, 533], [583, 414, 627, 447], [419, 423, 436, 434], [880, 562, 891, 569], [724, 454, 867, 554]]\n",
      "right [[509, 525, 665, 416], [487, 532, 587, 468], [353, 632, 438, 574], [311, 648, 475, 538], [595, 469, 667, 423], [442, 570, 459, 559], [460, 557, 488, 539], [316, 658, 352, 634], [261, 681, 315, 644], [623, 453, 670, 422], [572, 483, 621, 449], [623, 432, 655, 409], [462, 548, 496, 525], [277, 685, 314, 661], [339, 642, 361, 628], [645, 442, 681, 420], [489, 538, 581, 472], [641, 429, 659, 417], [479, 537, 530, 503], [606, 458, 617, 451], [380, 614, 390, 608], [470, 550, 523, 515], [254, 685, 336, 630], [275, 685, 303, 668], [536, 505, 660, 424], [457, 551, 483, 533], [379, 435, 418, 405], [349, 635, 400, 601]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 71%|███████   | 178/251 [00:05<00:02, 31.61it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 929 0\n",
      "tempsfdvdvdfv 1873 1\n",
      "tempsfdvdvdfv 2664 2\n",
      "tempsfdvdvdfv 3454 3\n",
      "tempsfdvdvdfv 4137 4\n",
      "tempsfdvdvdfv 4928 5\n",
      "tempsfdvdvdfv 5794 6\n",
      "tempsfdvdvdfv 6370 7\n",
      "tempsfdvdvdfv 6930 8\n",
      "tempsfdvdvdfv 7714 9\n",
      "tempsfdvdvdfv 8257 10\n",
      "tempsfdvdvdfv 9158 11\n",
      "tempsfdvdvdfv 10102 12\n",
      "tempsfdvdvdfv 10840 13\n",
      "tempsfdvdvdfv 11623 14\n",
      "tempsfdvdvdfv 12164 15\n",
      "tempsfdvdvdfv 12626 16\n",
      "avg 17 18 689 742 474 509 436 500 572 530\n",
      "left [[838, 532, 929, 591], [845, 531, 944, 590], [744, 468, 791, 495], [742, 470, 790, 498], [648, 404, 683, 427], [743, 470, 791, 497], [838, 533, 866, 552], [536, 669, 576, 699], [542, 414, 560, 424], [687, 425, 784, 498], [512, 399, 543, 418], [839, 531, 901, 574], [851, 533, 944, 591], [722, 449, 738, 459], [689, 425, 783, 496], [516, 400, 541, 418], [423, 407, 462, 432]]\n",
      "right [[381, 599, 558, 484], [438, 571, 659, 422], [345, 637, 409, 593], [253, 684, 380, 601], [657, 436, 672, 427], [622, 452, 668, 421], [273, 684, 334, 646], [525, 506, 563, 481], [604, 462, 668, 414], [324, 652, 350, 635], [275, 684, 314, 660], [418, 585, 436, 574], [643, 441, 678, 419], [258, 684, 348, 621], [341, 640, 358, 629], [465, 553, 491, 536], [632, 446, 671, 420], [404, 595, 449, 569]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 997 0\n",
      "tempsfdvdvdfv 1962 1\n",
      "tempsfdvdvdfv 2934 2\n",
      "tempsfdvdvdfv 3734 3\n",
      "tempsfdvdvdfv 4530 4\n",
      "tempsfdvdvdfv 5207 5\n",
      "tempsfdvdvdfv 5885 6\n",
      "tempsfdvdvdfv 6812 7\n",
      "tempsfdvdvdfv 7611 8\n",
      "tempsfdvdvdfv 8409 9\n",
      "tempsfdvdvdfv 9305 10\n",
      "avg 11 23 787 845 495 534 414 466 583 551\n",
      "left [[869, 545, 997, 621], [859, 546, 965, 615], [930, 591, 972, 619], [735, 462, 800, 504], [719, 446, 796, 502], [646, 405, 677, 426], [647, 404, 678, 425], [914, 581, 927, 590], [747, 474, 799, 505], [724, 453, 798, 505], [872, 547, 896, 562]]\n",
      "right [[285, 682, 414, 589], [318, 642, 365, 612], [412, 579, 456, 552], [438, 572, 497, 533], [473, 548, 521, 516], [573, 480, 677, 420], [469, 542, 613, 452], [550, 495, 679, 420], [385, 597, 422, 574], [656, 437, 675, 426], [250, 685, 316, 645], [531, 508, 583, 479], [253, 685, 289, 663], [427, 580, 443, 570], [509, 523, 519, 517], [281, 684, 311, 662], [413, 590, 426, 582], [348, 622, 368, 610], [466, 544, 486, 532], [437, 573, 449, 566], [499, 522, 592, 464], [314, 645, 329, 636], [257, 684, 295, 659]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1066 0\n",
      "tempsfdvdvdfv 2154 1\n",
      "tempsfdvdvdfv 2964 2\n",
      "tempsfdvdvdfv 3706 3\n",
      "tempsfdvdvdfv 4519 4\n",
      "tempsfdvdvdfv 5588 5\n",
      "tempsfdvdvdfv 6679 6\n",
      "tempsfdvdvdfv 7355 7\n",
      "tempsfdvdvdfv 8161 8\n",
      "tempsfdvdvdfv 8972 9\n",
      "tempsfdvdvdfv 9785 10\n",
      "tempsfdvdvdfv 10593 11\n",
      "tempsfdvdvdfv 11634 12\n",
      "tempsfdvdvdfv 12682 13\n",
      "tempsfdvdvdfv 13660 14\n",
      "avg 15 18 840 910 528 571 423 495 573 523\n",
      "left [[885, 563, 1066, 676], [897, 561, 1088, 675], [750, 475, 810, 512], [728, 457, 742, 465], [751, 473, 813, 509], [1018, 632, 1069, 663], [1052, 652, 1091, 675], [642, 407, 676, 426], [763, 485, 806, 509], [738, 464, 811, 511], [724, 453, 813, 511], [750, 476, 808, 512], [993, 629, 1041, 661], [1014, 642, 1048, 664], [896, 561, 978, 610]]\n",
      "right [[420, 576, 541, 495], [281, 684, 654, 423], [648, 425, 664, 414], [278, 685, 608, 454], [355, 619, 392, 593], [260, 683, 305, 651], [328, 637, 369, 608], [400, 589, 454, 552], [626, 430, 661, 410], [602, 436, 652, 406], [283, 632, 304, 620], [262, 685, 311, 647], [394, 593, 416, 577], [316, 645, 326, 637], [538, 498, 566, 480], [656, 436, 666, 429], [343, 627, 378, 602], [641, 443, 657, 432]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1045 0\n",
      "tempsfdvdvdfv 2138 1\n",
      "tempsfdvdvdfv 3228 2\n",
      "tempsfdvdvdfv 4008 3\n",
      "tempsfdvdvdfv 5070 4\n",
      "tempsfdvdvdfv 5528 5\n",
      "tempsfdvdvdfv 6308 6\n",
      "tempsfdvdvdfv 7087 7\n",
      "tempsfdvdvdfv 8065 8\n",
      "tempsfdvdvdfv 8738 9\n",
      "tempsfdvdvdfv 9560 10\n",
      "tempsfdvdvdfv 10570 11\n",
      "tempsfdvdvdfv 11082 12\n",
      "tempsfdvdvdfv 12174 13\n",
      "tempsfdvdvdfv 12766 14\n",
      "tempsfdvdvdfv 13534 15\n",
      "tempsfdvdvdfv 13977 16\n",
      "avg 17 21 750 822 496 541 361 433 570 521\n",
      "left [[920, 585, 1045, 663], [933, 583, 1093, 675], [930, 583, 1090, 675], [726, 455, 780, 490], [1004, 636, 1062, 673], [406, 403, 458, 433], [756, 478, 780, 492], [742, 468, 779, 492], [920, 584, 978, 621], [636, 404, 673, 428], [681, 420, 822, 522], [991, 628, 1010, 641], [499, 332, 512, 340], [932, 583, 1092, 675], [514, 405, 592, 466], [756, 481, 768, 488], [412, 408, 443, 426]]\n",
      "right [[281, 685, 668, 414], [328, 637, 605, 457], [259, 684, 314, 648], [480, 537, 524, 507], [545, 501, 669, 414], [196, 683, 230, 664], [191, 682, 228, 661], [279, 670, 430, 571], [471, 543, 497, 525], [624, 452, 666, 422], [194, 683, 230, 663], [468, 545, 478, 537], [231, 544, 249, 530], [380, 434, 453, 379], [221, 546, 238, 534], [325, 441, 335, 433], [287, 682, 344, 642], [447, 558, 462, 549], [329, 441, 347, 431], [616, 456, 663, 423], [448, 569, 472, 550]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 73%|███████▎  | 182/251 [00:05<00:02, 30.72it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 661 0\n",
      "tempsfdvdvdfv 1754 1\n",
      "tempsfdvdvdfv 2417 2\n",
      "tempsfdvdvdfv 3201 3\n",
      "tempsfdvdvdfv 4275 4\n",
      "tempsfdvdvdfv 5366 5\n",
      "tempsfdvdvdfv 6345 6\n",
      "tempsfdvdvdfv 7025 7\n",
      "tempsfdvdvdfv 8054 8\n",
      "tempsfdvdvdfv 8842 9\n",
      "tempsfdvdvdfv 9523 10\n",
      "tempsfdvdvdfv 10206 11\n",
      "tempsfdvdvdfv 10988 12\n",
      "tempsfdvdvdfv 12025 13\n",
      "tempsfdvdvdfv 12552 14\n",
      "tempsfdvdvdfv 13548 15\n",
      "tempsfdvdvdfv 14223 16\n",
      "tempsfdvdvdfv 15004 17\n",
      "tempsfdvdvdfv 15614 18\n",
      "tempsfdvdvdfv 16243 19\n",
      "avg 20 22 764 812 490 520 438 507 537 490\n",
      "left [[625, 416, 661, 436], [983, 612, 1093, 675], [627, 410, 663, 432], [760, 483, 784, 498], [1022, 648, 1074, 678], [982, 612, 1091, 675], [966, 614, 979, 622], [642, 405, 680, 428], [994, 631, 1029, 651], [671, 415, 788, 497], [643, 403, 681, 428], [643, 401, 683, 428], [727, 456, 782, 493], [987, 625, 1037, 658], [505, 332, 527, 345], [971, 616, 996, 632], [653, 406, 675, 421], [760, 484, 781, 497], [552, 423, 610, 459], [575, 412, 629, 450]]\n",
      "right [[285, 684, 433, 580], [290, 665, 536, 500], [464, 556, 661, 423], [639, 428, 663, 412], [449, 567, 488, 541], [259, 685, 509, 517], [532, 503, 621, 449], [395, 606, 420, 589], [439, 574, 462, 559], [621, 454, 667, 422], [529, 506, 552, 490], [631, 449, 669, 422], [641, 444, 658, 433], [386, 612, 447, 570], [186, 558, 209, 541], [630, 431, 648, 418], [287, 682, 328, 653], [576, 475, 672, 421], [184, 558, 206, 542], [430, 581, 448, 569], [347, 440, 397, 404], [443, 358, 479, 334]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1074 0\n",
      "tempsfdvdvdfv 1871 1\n",
      "tempsfdvdvdfv 2665 2\n",
      "tempsfdvdvdfv 3463 3\n",
      "tempsfdvdvdfv 4554 4\n",
      "tempsfdvdvdfv 5227 5\n",
      "tempsfdvdvdfv 5980 6\n",
      "tempsfdvdvdfv 6771 7\n",
      "tempsfdvdvdfv 7449 8\n",
      "tempsfdvdvdfv 8495 9\n",
      "tempsfdvdvdfv 9287 10\n",
      "tempsfdvdvdfv 10037 11\n",
      "tempsfdvdvdfv 11089 12\n",
      "tempsfdvdvdfv 11873 13\n",
      "tempsfdvdvdfv 12668 14\n",
      "tempsfdvdvdfv 13743 15\n",
      "avg 16 14 822 858 517 540 408 513 567 495\n",
      "left [[1032, 651, 1074, 677], [766, 485, 797, 503], [766, 487, 794, 503], [719, 446, 798, 502], [1051, 650, 1091, 674], [632, 407, 673, 430], [732, 460, 753, 472], [776, 494, 791, 503], [641, 402, 678, 425], [989, 616, 1046, 650], [770, 490, 792, 503], [729, 457, 750, 469], [1033, 653, 1052, 665], [725, 449, 784, 493], [753, 469, 795, 499], [1049, 661, 1075, 677]]\n",
      "right [[374, 620, 668, 414], [520, 511, 579, 472], [259, 684, 500, 522], [285, 684, 379, 618], [512, 516, 543, 495], [282, 684, 353, 636], [353, 438, 447, 372], [261, 684, 530, 503], [377, 618, 394, 607], [374, 437, 441, 392], [632, 447, 673, 420], [660, 435, 675, 426], [349, 638, 387, 612], [482, 543, 621, 449]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 809 0\n",
      "tempsfdvdvdfv 1615 1\n",
      "tempsfdvdvdfv 2425 2\n",
      "tempsfdvdvdfv 3007 3\n",
      "tempsfdvdvdfv 3679 4\n",
      "tempsfdvdvdfv 4487 5\n",
      "tempsfdvdvdfv 5001 6\n",
      "tempsfdvdvdfv 5665 7\n",
      "tempsfdvdvdfv 6475 8\n",
      "tempsfdvdvdfv 7279 9\n",
      "tempsfdvdvdfv 8037 10\n",
      "tempsfdvdvdfv 8705 11\n",
      "avg 12 18 668 725 434 469 450 517 559 513\n",
      "left [[681, 420, 809, 510], [773, 492, 806, 511], [731, 460, 810, 508], [493, 421, 582, 477], [639, 408, 672, 428], [798, 501, 808, 508], [488, 329, 514, 344], [625, 409, 664, 431], [752, 474, 810, 509], [778, 496, 804, 511], [639, 399, 758, 473], [630, 407, 668, 429]]\n",
      "right [[262, 685, 538, 499], [480, 545, 661, 423], [638, 428, 662, 411], [626, 451, 671, 421], [287, 685, 479, 546], [512, 517, 574, 476], [319, 645, 378, 606], [631, 430, 656, 412], [424, 575, 479, 537], [382, 602, 397, 593], [354, 621, 373, 609], [424, 585, 478, 548], [366, 613, 390, 598], [482, 544, 495, 536], [619, 420, 641, 403], [511, 525, 564, 483], [386, 612, 449, 569], [406, 586, 421, 577]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 74%|███████▍  | 186/251 [00:05<00:02, 30.03it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 818 0\n",
      "tempsfdvdvdfv 1642 1\n",
      "tempsfdvdvdfv 2466 2\n",
      "tempsfdvdvdfv 3229 3\n",
      "tempsfdvdvdfv 3749 4\n",
      "tempsfdvdvdfv 4512 5\n",
      "tempsfdvdvdfv 5311 6\n",
      "tempsfdvdvdfv 5986 7\n",
      "tempsfdvdvdfv 6649 8\n",
      "tempsfdvdvdfv 7464 9\n",
      "tempsfdvdvdfv 8287 10\n",
      "avg 11 20 693 753 439 476 444 510 550 504\n",
      "left [[780, 496, 818, 519], [679, 420, 824, 517], [758, 478, 824, 518], [733, 461, 763, 478], [490, 326, 520, 343], [734, 459, 763, 477], [733, 460, 799, 500], [630, 403, 675, 429], [631, 412, 663, 430], [724, 448, 815, 519], [739, 466, 823, 515]]\n",
      "right [[332, 651, 657, 423], [260, 685, 496, 526], [636, 446, 675, 420], [285, 685, 319, 662], [544, 495, 605, 457], [498, 525, 540, 499], [284, 685, 343, 645], [437, 576, 557, 492], [344, 643, 362, 631], [618, 455, 664, 422], [488, 533, 516, 513], [335, 682, 348, 672], [338, 439, 389, 402], [354, 438, 402, 403], [612, 458, 659, 423], [629, 449, 668, 421], [610, 434, 648, 406], [602, 436, 637, 409], [325, 656, 345, 643], [355, 635, 376, 621]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 831 0\n",
      "tempsfdvdvdfv 1672 1\n",
      "tempsfdvdvdfv 2505 2\n",
      "tempsfdvdvdfv 3173 3\n",
      "tempsfdvdvdfv 4009 4\n",
      "tempsfdvdvdfv 4538 5\n",
      "tempsfdvdvdfv 4964 6\n",
      "tempsfdvdvdfv 5392 7\n",
      "tempsfdvdvdfv 5926 8\n",
      "tempsfdvdvdfv 6726 9\n",
      "tempsfdvdvdfv 7691 10\n",
      "tempsfdvdvdfv 8209 11\n",
      "tempsfdvdvdfv 8933 12\n",
      "tempsfdvdvdfv 9698 13\n",
      "tempsfdvdvdfv 10114 14\n",
      "tempsfdvdvdfv 11077 15\n",
      "tempsfdvdvdfv 11699 16\n",
      "tempsfdvdvdfv 12446 17\n",
      "avg 18 26 650 691 459 487 412 462 552 518\n",
      "left [[797, 508, 831, 529], [735, 463, 841, 527], [793, 505, 833, 529], [630, 410, 668, 432], [680, 420, 836, 529], [519, 512, 529, 520], [393, 408, 426, 434], [388, 402, 428, 434], [522, 511, 534, 520], [718, 443, 800, 509], [952, 601, 965, 609], [488, 326, 518, 343], [690, 425, 724, 446], [728, 455, 765, 479], [393, 409, 416, 427], [951, 601, 963, 609], [601, 416, 622, 432], [737, 463, 747, 469]]\n",
      "right [[385, 601, 455, 554], [294, 681, 500, 532], [542, 503, 666, 422], [524, 510, 595, 463], [268, 682, 316, 648], [289, 684, 331, 653], [495, 536, 521, 519], [428, 573, 482, 536], [336, 636, 358, 620], [337, 440, 393, 403], [324, 644, 340, 632], [343, 630, 399, 593], [505, 522, 539, 499], [263, 684, 273, 677], [617, 456, 644, 439], [318, 648, 331, 638], [471, 545, 500, 524], [523, 516, 637, 442], [344, 439, 397, 402], [396, 594, 470, 545], [561, 424, 584, 411], [492, 538, 508, 528], [351, 429, 392, 402], [333, 436, 380, 407], [425, 585, 441, 575], [548, 426, 570, 412]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 669 0\n",
      "tempsfdvdvdfv 1530 1\n",
      "tempsfdvdvdfv 2379 2\n",
      "tempsfdvdvdfv 2894 3\n",
      "tempsfdvdvdfv 3736 4\n",
      "tempsfdvdvdfv 4766 5\n",
      "tempsfdvdvdfv 5795 6\n",
      "tempsfdvdvdfv 6460 7\n",
      "tempsfdvdvdfv 7281 8\n",
      "tempsfdvdvdfv 8121 9\n",
      "tempsfdvdvdfv 8702 10\n",
      "tempsfdvdvdfv 9556 11\n",
      "tempsfdvdvdfv 10389 12\n",
      "avg 13 13 733 799 471 515 387 487 527 460\n",
      "left [[633, 410, 669, 432], [655, 408, 861, 541], [772, 483, 849, 541], [485, 326, 515, 343], [740, 467, 842, 526], [1019, 640, 1030, 647], [1010, 637, 1029, 649], [654, 408, 665, 415], [776, 484, 821, 516], [730, 458, 840, 535], [479, 416, 581, 477], [808, 508, 854, 542], [775, 486, 833, 531]]\n",
      "right [[552, 497, 667, 422], [264, 685, 581, 472], [290, 685, 510, 526], [494, 539, 540, 505], [334, 637, 481, 538], [350, 439, 438, 377], [335, 426, 375, 403], [431, 582, 491, 541], [339, 440, 394, 403], [322, 520, 358, 500], [487, 543, 503, 532], [356, 439, 437, 376], [481, 431, 562, 386]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 888 0\n",
      "tempsfdvdvdfv 1767 1\n",
      "tempsfdvdvdfv 2608 2\n",
      "tempsfdvdvdfv 3389 3\n",
      "tempsfdvdvdfv 4172 4\n",
      "tempsfdvdvdfv 5060 5\n",
      "tempsfdvdvdfv 5586 6\n",
      "tempsfdvdvdfv 6100 7\n",
      "tempsfdvdvdfv 6770 8\n",
      "tempsfdvdvdfv 7650 9\n",
      "tempsfdvdvdfv 8318 10\n",
      "tempsfdvdvdfv 9073 11\n",
      "avg 12 18 706 756 458 489 431 501 549 500\n",
      "left [[821, 515, 888, 554], [826, 526, 879, 557], [823, 524, 841, 534], [745, 470, 781, 490], [732, 458, 783, 488], [744, 469, 888, 556], [483, 427, 526, 456], [490, 328, 514, 342], [640, 413, 670, 431], [820, 521, 880, 557], [625, 408, 668, 432], [725, 448, 755, 471]]\n",
      "right [[265, 684, 582, 471], [449, 570, 658, 423], [350, 641, 486, 545], [615, 457, 666, 422], [288, 684, 352, 641], [340, 439, 435, 377], [413, 623, 424, 615], [296, 681, 314, 669], [605, 463, 659, 423], [600, 466, 666, 415], [346, 439, 391, 404], [561, 486, 589, 467], [502, 429, 551, 397], [638, 445, 667, 422], [516, 424, 553, 401], [366, 630, 388, 615], [270, 682, 280, 676], [346, 644, 362, 634]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 680 0\n",
      "tempsfdvdvdfv 1591 1\n",
      "tempsfdvdvdfv 2511 2\n",
      "tempsfdvdvdfv 3297 3\n",
      "tempsfdvdvdfv 4218 4\n",
      "tempsfdvdvdfv 4735 5\n",
      "tempsfdvdvdfv 5654 6\n",
      "tempsfdvdvdfv 6070 7\n",
      "tempsfdvdvdfv 6587 8\n",
      "tempsfdvdvdfv 7496 9\n",
      "tempsfdvdvdfv 8363 10\n",
      "tempsfdvdvdfv 9144 11\n",
      "tempsfdvdvdfv 9994 12\n",
      "tempsfdvdvdfv 10748 13\n",
      "tempsfdvdvdfv 11530 14\n",
      "tempsfdvdvdfv 12196 15\n",
      "tempsfdvdvdfv 12871 16\n",
      "avg 17 18 706 757 458 491 432 506 556 505\n",
      "left [[631, 398, 680, 430], [829, 529, 911, 578], [841, 527, 920, 578], [718, 444, 786, 497], [862, 539, 921, 578], [487, 326, 517, 344], [885, 553, 919, 578], [362, 408, 416, 438], [487, 325, 517, 343], [841, 537, 909, 578], [842, 528, 867, 545], [692, 427, 781, 497], [836, 526, 850, 535], [724, 453, 754, 477], [720, 447, 782, 497], [624, 410, 666, 435], [637, 409, 675, 431]]\n",
      "right [[301, 682, 668, 416], [275, 683, 370, 617], [378, 613, 512, 520], [567, 483, 626, 449], [402, 596, 450, 562], [535, 506, 561, 487], [498, 531, 543, 499], [331, 660, 393, 614], [359, 626, 386, 606], [320, 443, 432, 378], [601, 468, 670, 416], [274, 683, 327, 646], [382, 623, 456, 568], [481, 551, 510, 529], [628, 452, 673, 416], [485, 339, 499, 329], [344, 636, 366, 620], [632, 447, 677, 422]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 675 0\n",
      "tempsfdvdvdfv 1629 1\n",
      "tempsfdvdvdfv 2596 2\n",
      "tempsfdvdvdfv 3397 3\n",
      "tempsfdvdvdfv 4195 4\n",
      "tempsfdvdvdfv 4710 5\n",
      "tempsfdvdvdfv 5568 6\n",
      "tempsfdvdvdfv 6530 7\n",
      "tempsfdvdvdfv 7482 8\n",
      "tempsfdvdvdfv 8276 9\n",
      "tempsfdvdvdfv 9236 10\n",
      "tempsfdvdvdfv 9890 11\n",
      "tempsfdvdvdfv 10567 12\n",
      "tempsfdvdvdfv 11465 13\n",
      "tempsfdvdvdfv 12266 14\n",
      "tempsfdvdvdfv 13233 15\n",
      "tempsfdvdvdfv 13807 16\n",
      "tempsfdvdvdfv 14730 17\n",
      "avg 18 23 756 818 482 519 348 407 572 530\n",
      "left [[632, 404, 675, 431], [847, 540, 954, 604], [857, 538, 967, 601], [656, 409, 801, 503], [750, 475, 798, 503], [485, 327, 515, 344], [848, 540, 858, 546], [922, 573, 962, 597], [859, 548, 952, 604], [735, 464, 794, 500], [865, 542, 960, 595], [610, 412, 654, 440], [630, 399, 677, 428], [858, 539, 898, 563], [727, 456, 801, 501], [937, 585, 967, 602], [533, 393, 574, 423], [860, 539, 923, 574]]\n",
      "right [[385, 622, 668, 416], [289, 677, 553, 493], [298, 685, 355, 646], [343, 653, 382, 626], [368, 438, 394, 419], [280, 683, 340, 640], [365, 637, 383, 625], [342, 443, 426, 380], [202, 558, 240, 536], [300, 685, 321, 671], [494, 535, 578, 477], [380, 626, 402, 611], [373, 584, 389, 575], [357, 442, 375, 429], [344, 443, 383, 413], [395, 615, 447, 578], [373, 618, 403, 596], [327, 444, 383, 408], [296, 685, 329, 665], [198, 558, 224, 541], [314, 445, 365, 405], [648, 443, 673, 423], [346, 637, 356, 629]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1029 0\n",
      "tempsfdvdvdfv 1692 1\n",
      "tempsfdvdvdfv 2207 2\n",
      "tempsfdvdvdfv 3142 3\n",
      "tempsfdvdvdfv 4126 4\n",
      "tempsfdvdvdfv 5083 5\n",
      "tempsfdvdvdfv 5763 6\n",
      "tempsfdvdvdfv 6286 7\n",
      "tempsfdvdvdfv 6798 8\n",
      "tempsfdvdvdfv 7706 9\n",
      "tempsfdvdvdfv 8632 10\n",
      "tempsfdvdvdfv 9317 11\n",
      "tempsfdvdvdfv 10269 12\n",
      "tempsfdvdvdfv 10892 13\n",
      "tempsfdvdvdfv 11625 14\n",
      "tempsfdvdvdfv 12634 15\n",
      "tempsfdvdvdfv 13662 16\n",
      "tempsfdvdvdfv 14548 17\n",
      "tempsfdvdvdfv 15556 18\n",
      "tempsfdvdvdfv 16083 19\n",
      "tempsfdvdvdfv 16527 20\n",
      "tempsfdvdvdfv 17485 21\n",
      "tempsfdvdvdfv 18006 22\n",
      "avg 23 29 731 782 493 525 452 520 542 495\n",
      "left [[890, 554, 1029, 637], [620, 411, 663, 436], [502, 332, 515, 340], [870, 552, 935, 594], [946, 599, 984, 623], [883, 552, 957, 596], [633, 401, 680, 430], [489, 405, 523, 424], [482, 326, 512, 343], [892, 558, 908, 568], [874, 552, 926, 588], [633, 397, 685, 428], [937, 594, 952, 604], [542, 395, 623, 454], [643, 402, 733, 456], [961, 608, 1009, 638], [963, 596, 1028, 636], [873, 555, 886, 564], [889, 566, 1008, 638], [504, 414, 527, 428], [421, 585, 444, 600], [925, 574, 958, 596], [463, 419, 521, 458]]\n",
      "right [[344, 653, 670, 416], [278, 684, 516, 518], [576, 479, 595, 466], [304, 684, 337, 660], [504, 528, 538, 503], [561, 493, 681, 421], [508, 532, 538, 511], [415, 590, 580, 475], [304, 683, 392, 619], [197, 557, 220, 541], [582, 483, 671, 416], [495, 533, 586, 482], [327, 609, 347, 597], [332, 443, 427, 377], [462, 557, 525, 512], [637, 448, 670, 423], [665, 435, 675, 428], [528, 467, 620, 403], [427, 609, 442, 598], [547, 503, 671, 423], [456, 561, 482, 542], [327, 608, 341, 600], [539, 509, 584, 481], [445, 568, 457, 560], [641, 446, 656, 435], [549, 427, 571, 413], [318, 441, 372, 407], [351, 648, 407, 608], [497, 540, 509, 532]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 76%|███████▌  | 190/251 [00:05<00:02, 28.74it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1075 0\n",
      "tempsfdvdvdfv 2168 1\n",
      "tempsfdvdvdfv 3266 2\n",
      "tempsfdvdvdfv 4048 3\n",
      "tempsfdvdvdfv 4669 4\n",
      "tempsfdvdvdfv 5337 5\n",
      "tempsfdvdvdfv 6007 6\n",
      "tempsfdvdvdfv 6530 7\n",
      "tempsfdvdvdfv 7516 8\n",
      "tempsfdvdvdfv 8330 9\n",
      "tempsfdvdvdfv 9149 10\n",
      "tempsfdvdvdfv 9930 11\n",
      "tempsfdvdvdfv 10877 12\n",
      "avg 13 16 754 836 485 535 368 476 566 488\n",
      "left [[901, 572, 1075, 676], [913, 569, 1093, 672], [920, 572, 1098, 674], [729, 457, 782, 488], [522, 389, 621, 455], [631, 401, 668, 423], [646, 409, 670, 423], [508, 417, 523, 428], [928, 578, 986, 612], [720, 445, 814, 516], [742, 466, 819, 514], [728, 456, 781, 489], [926, 577, 947, 590]]\n",
      "right [[304, 685, 464, 565], [281, 684, 580, 475], [319, 675, 608, 458], [581, 443, 635, 408], [346, 442, 375, 419], [283, 682, 566, 484], [266, 648, 289, 632], [363, 668, 395, 643], [309, 682, 596, 466], [491, 336, 501, 330], [340, 435, 374, 408], [336, 437, 374, 410], [521, 468, 601, 416], [268, 643, 285, 632], [364, 672, 382, 658], [521, 466, 595, 416]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1098 0\n",
      "tempsfdvdvdfv 2176 1\n",
      "tempsfdvdvdfv 3194 2\n",
      "tempsfdvdvdfv 3696 3\n",
      "tempsfdvdvdfv 4689 4\n",
      "tempsfdvdvdfv 5418 5\n",
      "tempsfdvdvdfv 6202 6\n",
      "tempsfdvdvdfv 7297 7\n",
      "tempsfdvdvdfv 7868 8\n",
      "tempsfdvdvdfv 8699 9\n",
      "tempsfdvdvdfv 9120 10\n",
      "tempsfdvdvdfv 9503 11\n",
      "tempsfdvdvdfv 10336 12\n",
      "tempsfdvdvdfv 10843 13\n",
      "tempsfdvdvdfv 11626 14\n",
      "avg 15 21 718 775 477 514 422 504 506 448\n",
      "left [[1021, 628, 1098, 672], [940, 593, 1078, 676], [955, 591, 1018, 628], [477, 325, 502, 339], [952, 590, 993, 614], [718, 440, 729, 447], [770, 485, 784, 493], [1015, 625, 1095, 674], [547, 406, 571, 423], [720, 443, 831, 524], [368, 402, 421, 434], [351, 412, 383, 434], [720, 442, 833, 524], [488, 327, 507, 339], [730, 455, 783, 493]]\n",
      "right [[306, 684, 665, 414], [279, 684, 587, 469], [282, 684, 356, 632], [585, 476, 667, 414], [571, 489, 660, 422], [325, 442, 370, 410], [337, 427, 370, 406], [333, 440, 370, 412], [581, 474, 605, 458], [521, 513, 574, 477], [337, 441, 367, 417], [281, 684, 405, 597], [480, 542, 593, 465], [501, 428, 518, 418], [498, 428, 544, 401], [327, 438, 370, 408], [569, 489, 658, 422], [327, 442, 367, 419], [325, 438, 366, 410], [563, 491, 611, 455], [534, 511, 575, 487]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 77%|███████▋  | 193/251 [00:06<00:02, 28.78it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 662 0\n",
      "tempsfdvdvdfv 1761 1\n",
      "tempsfdvdvdfv 2814 2\n",
      "tempsfdvdvdfv 3487 3\n",
      "tempsfdvdvdfv 4163 4\n",
      "tempsfdvdvdfv 4961 5\n",
      "tempsfdvdvdfv 5760 6\n",
      "tempsfdvdvdfv 6553 7\n",
      "tempsfdvdvdfv 7628 8\n",
      "tempsfdvdvdfv 8427 9\n",
      "tempsfdvdvdfv 9224 10\n",
      "tempsfdvdvdfv 9717 11\n",
      "tempsfdvdvdfv 10513 12\n",
      "tempsfdvdvdfv 11612 13\n",
      "avg 14 21 773 829 487 521 401 478 503 448\n",
      "left [[623, 409, 662, 431], [1010, 623, 1099, 674], [994, 624, 1053, 662], [626, 403, 673, 430], [624, 397, 676, 429], [731, 457, 798, 499], [690, 425, 799, 498], [768, 484, 793, 499], [994, 623, 1075, 675], [688, 425, 799, 499], [749, 470, 797, 499], [477, 328, 493, 337], [769, 484, 796, 499], [1087, 666, 1099, 673]]\n",
      "right [[306, 684, 665, 414], [356, 633, 543, 498], [637, 427, 661, 410], [284, 684, 482, 541], [555, 490, 676, 420], [309, 683, 356, 648], [321, 442, 365, 410], [331, 438, 366, 412], [637, 446, 671, 421], [524, 512, 585, 477], [358, 440, 376, 428], [342, 437, 363, 420], [339, 438, 364, 418], [336, 438, 365, 415], [357, 440, 374, 428], [308, 684, 517, 526], [353, 437, 370, 425], [322, 439, 362, 410], [506, 472, 543, 450], [360, 436, 377, 424], [586, 475, 672, 421]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 809 0\n",
      "tempsfdvdvdfv 1613 1\n",
      "tempsfdvdvdfv 2278 2\n",
      "tempsfdvdvdfv 3088 3\n",
      "tempsfdvdvdfv 3827 4\n",
      "tempsfdvdvdfv 4922 5\n",
      "tempsfdvdvdfv 5727 6\n",
      "tempsfdvdvdfv 6458 7\n",
      "tempsfdvdvdfv 7268 8\n",
      "tempsfdvdvdfv 7931 9\n",
      "tempsfdvdvdfv 9030 10\n",
      "tempsfdvdvdfv 9528 11\n",
      "tempsfdvdvdfv 10196 12\n",
      "tempsfdvdvdfv 11297 13\n",
      "tempsfdvdvdfv 11799 14\n",
      "avg 15 8 741 786 514 541 390 530 587 487\n",
      "left [[689, 425, 809, 506], [779, 491, 804, 506], [607, 400, 665, 433], [734, 459, 810, 505], [721, 445, 739, 457], [1068, 659, 1095, 675], [774, 487, 805, 506], [721, 444, 731, 450], [733, 457, 810, 503], [609, 403, 663, 433], [1068, 657, 1099, 675], [476, 673, 498, 687], [593, 388, 668, 431], [1070, 657, 1101, 675], [479, 673, 502, 687]]\n",
      "right [[286, 684, 540, 500], [309, 684, 437, 587], [400, 614, 665, 414], [580, 474, 679, 419], [285, 684, 507, 523], [591, 467, 675, 420], [340, 425, 361, 410], [334, 666, 383, 627]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 823 0\n",
      "tempsfdvdvdfv 1639 1\n",
      "tempsfdvdvdfv 2310 2\n",
      "tempsfdvdvdfv 3221 3\n",
      "tempsfdvdvdfv 4018 4\n",
      "tempsfdvdvdfv 4830 5\n",
      "tempsfdvdvdfv 5653 6\n",
      "tempsfdvdvdfv 6335 7\n",
      "tempsfdvdvdfv 7067 8\n",
      "tempsfdvdvdfv 7882 9\n",
      "avg 10 11 722 788 449 492 426 526 554 483\n",
      "left [[735, 459, 823, 512], [722, 445, 816, 513], [649, 406, 671, 420], [901, 561, 911, 567], [722, 446, 797, 502], [717, 438, 812, 512], [736, 460, 823, 513], [623, 392, 682, 426], [661, 410, 732, 451], [758, 475, 815, 513]]\n",
      "right [[521, 520, 668, 421], [285, 684, 535, 503], [321, 676, 523, 519], [531, 506, 632, 443], [336, 664, 394, 618], [440, 584, 589, 468], [305, 684, 343, 658], [491, 339, 502, 331], [582, 477, 679, 419], [379, 437, 399, 421], [499, 528, 524, 512]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 78%|███████▊  | 196/251 [00:06<00:01, 27.55it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 838 0\n",
      "tempsfdvdvdfv 1675 1\n",
      "tempsfdvdvdfv 2481 2\n",
      "tempsfdvdvdfv 3091 3\n",
      "tempsfdvdvdfv 3930 4\n",
      "tempsfdvdvdfv 4762 5\n",
      "avg 6 11 733 793 468 509 394 466 607 554\n",
      "left [[729, 454, 838, 522], [800, 497, 837, 522], [741, 463, 806, 508], [533, 398, 610, 460], [810, 503, 839, 521], [790, 498, 832, 522]]\n",
      "right [[461, 567, 604, 459], [284, 685, 524, 511], [308, 685, 440, 585], [422, 597, 476, 557], [312, 683, 363, 644], [347, 654, 409, 608], [289, 682, 308, 669], [391, 621, 413, 605], [564, 486, 586, 470], [544, 421, 562, 411], [413, 604, 449, 578]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1004 0\n",
      "tempsfdvdvdfv 1850 1\n",
      "tempsfdvdvdfv 2855 2\n",
      "tempsfdvdvdfv 3713 3\n",
      "tempsfdvdvdfv 4542 4\n",
      "tempsfdvdvdfv 5294 5\n",
      "tempsfdvdvdfv 5681 6\n",
      "tempsfdvdvdfv 6539 7\n",
      "tempsfdvdvdfv 7351 8\n",
      "tempsfdvdvdfv 8199 9\n",
      "tempsfdvdvdfv 8934 10\n",
      "tempsfdvdvdfv 9342 11\n",
      "tempsfdvdvdfv 9992 12\n",
      "tempsfdvdvdfv 10721 13\n",
      "tempsfdvdvdfv 11386 14\n",
      "tempsfdvdvdfv 12012 15\n",
      "tempsfdvdvdfv 12684 16\n",
      "tempsfdvdvdfv 13311 17\n",
      "tempsfdvdvdfv 13974 18\n",
      "avg 19 14 683 735 449 482 412 494 556 499\n",
      "left [[985, 610, 1004, 621], [716, 438, 846, 532], [985, 609, 1005, 621], [740, 462, 858, 530], [731, 453, 829, 521], [719, 441, 752, 466], [363, 421, 387, 435], [745, 466, 858, 532], [800, 502, 812, 509], [806, 501, 848, 532], [663, 411, 735, 454], [390, 418, 408, 432], [582, 383, 650, 438], [717, 438, 729, 446], [593, 391, 665, 431], [582, 382, 626, 407], [620, 397, 672, 428], [604, 403, 627, 416], [653, 414, 663, 420]]\n",
      "right [[355, 649, 590, 466], [284, 683, 515, 516], [521, 512, 672, 425], [534, 503, 666, 427], [316, 679, 372, 634], [507, 522, 567, 488], [338, 662, 388, 622], [252, 536, 270, 524], [611, 431, 635, 415], [630, 416, 647, 405], [374, 634, 438, 583], [243, 539, 260, 527], [384, 435, 408, 418], [429, 591, 493, 540]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 882 0\n",
      "tempsfdvdvdfv 1965 1\n",
      "tempsfdvdvdfv 2839 2\n",
      "tempsfdvdvdfv 3936 3\n",
      "tempsfdvdvdfv 4753 4\n",
      "tempsfdvdvdfv 5837 5\n",
      "tempsfdvdvdfv 6613 6\n",
      "tempsfdvdvdfv 7360 7\n",
      "tempsfdvdvdfv 8028 8\n",
      "tempsfdvdvdfv 8900 9\n",
      "tempsfdvdvdfv 9981 10\n",
      "tempsfdvdvdfv 10809 11\n",
      "tempsfdvdvdfv 11404 12\n",
      "avg 13 12 824 877 518 551 423 507 515 453\n",
      "left [[733, 457, 882, 546], [1059, 657, 1083, 671], [811, 511, 874, 547], [1055, 649, 1097, 674], [742, 464, 817, 509], [1056, 653, 1084, 670], [717, 440, 776, 487], [651, 405, 747, 463], [634, 412, 668, 431], [837, 527, 872, 547], [1055, 650, 1081, 665], [812, 510, 828, 520], [560, 410, 595, 436]]\n",
      "right [[311, 683, 509, 529], [284, 684, 512, 519], [518, 515, 595, 470], [639, 426, 659, 410], [536, 511, 592, 466], [287, 683, 534, 504], [566, 484, 590, 467], [482, 551, 573, 478], [480, 338, 490, 331], [322, 439, 343, 422], [320, 439, 343, 421], [335, 435, 349, 424]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 79%|███████▉  | 199/251 [00:06<00:01, 27.20it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 851 0\n",
      "tempsfdvdvdfv 1751 1\n",
      "tempsfdvdvdfv 2617 2\n",
      "tempsfdvdvdfv 3291 3\n",
      "tempsfdvdvdfv 4074 4\n",
      "tempsfdvdvdfv 4829 5\n",
      "tempsfdvdvdfv 5568 6\n",
      "tempsfdvdvdfv 6200 7\n",
      "tempsfdvdvdfv 6985 8\n",
      "tempsfdvdvdfv 7645 9\n",
      "tempsfdvdvdfv 8534 10\n",
      "tempsfdvdvdfv 9295 11\n",
      "tempsfdvdvdfv 9926 12\n",
      "avg 13 16 698 763 441 486 432 508 587 531\n",
      "left [[669, 414, 851, 536], [864, 544, 900, 564], [787, 490, 866, 545], [620, 394, 674, 426], [716, 440, 783, 493], [724, 450, 755, 475], [689, 424, 739, 457], [586, 417, 632, 448], [716, 441, 785, 493], [578, 385, 660, 431], [828, 518, 889, 559], [717, 439, 761, 474], [580, 388, 631, 417]]\n",
      "right [[529, 510, 594, 465], [290, 682, 402, 598], [388, 623, 608, 457], [400, 600, 577, 476], [642, 443, 674, 420], [309, 684, 413, 605], [315, 682, 332, 669], [311, 684, 365, 643], [609, 462, 639, 440], [542, 506, 643, 438], [451, 574, 462, 566], [617, 457, 671, 421], [508, 531, 533, 514], [288, 683, 341, 643], [412, 592, 445, 567], [308, 684, 436, 587]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 951 0\n",
      "tempsfdvdvdfv 1889 1\n",
      "tempsfdvdvdfv 2687 2\n",
      "tempsfdvdvdfv 3369 3\n",
      "tempsfdvdvdfv 4165 4\n",
      "tempsfdvdvdfv 5101 5\n",
      "tempsfdvdvdfv 5892 6\n",
      "tempsfdvdvdfv 6686 7\n",
      "tempsfdvdvdfv 7484 8\n",
      "tempsfdvdvdfv 8157 9\n",
      "tempsfdvdvdfv 9097 10\n",
      "tempsfdvdvdfv 10047 11\n",
      "tempsfdvdvdfv 10777 12\n",
      "tempsfdvdvdfv 11348 13\n",
      "avg 14 18 740 810 471 514 437 507 567 516\n",
      "left [[854, 530, 951, 586], [842, 530, 938, 587], [651, 405, 798, 496], [648, 406, 682, 427], [749, 470, 796, 498], [842, 531, 936, 587], [717, 442, 791, 498], [748, 470, 794, 498], [727, 453, 798, 497], [616, 397, 673, 430], [909, 560, 940, 579], [913, 565, 950, 586], [668, 414, 730, 451], [489, 424, 571, 486]]\n",
      "right [[561, 492, 676, 420], [309, 684, 403, 611], [286, 684, 508, 523], [565, 485, 580, 474], [314, 682, 384, 626], [307, 684, 608, 457], [303, 671, 468, 551], [503, 528, 523, 513], [513, 521, 547, 496], [377, 632, 391, 622], [401, 568, 414, 560], [405, 611, 463, 565], [574, 442, 619, 408], [403, 569, 415, 562], [639, 426, 658, 411], [528, 511, 557, 489], [398, 496, 415, 485], [497, 532, 514, 519]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 987 0\n",
      "tempsfdvdvdfv 1983 1\n",
      "tempsfdvdvdfv 2790 2\n",
      "tempsfdvdvdfv 3593 3\n",
      "tempsfdvdvdfv 4267 4\n",
      "tempsfdvdvdfv 5253 5\n",
      "tempsfdvdvdfv 6163 6\n",
      "tempsfdvdvdfv 7165 7\n",
      "tempsfdvdvdfv 7819 8\n",
      "tempsfdvdvdfv 8501 9\n",
      "tempsfdvdvdfv 9303 10\n",
      "tempsfdvdvdfv 10110 11\n",
      "tempsfdvdvdfv 10993 12\n",
      "avg 13 14 789 845 493 529 348 406 590 547\n",
      "left [[863, 544, 987, 618], [946, 582, 996, 618], [654, 407, 807, 506], [680, 420, 803, 503], [652, 407, 674, 421], [942, 592, 986, 618], [863, 543, 910, 573], [981, 605, 1002, 617], [644, 410, 654, 416], [648, 406, 682, 428], [752, 475, 802, 506], [773, 482, 807, 505], [864, 545, 883, 557]]\n",
      "right [[397, 617, 608, 458], [382, 614, 582, 474], [379, 631, 433, 591], [347, 656, 376, 635], [338, 646, 380, 617], [309, 685, 354, 652], [377, 633, 390, 624], [190, 567, 225, 539], [350, 439, 364, 428], [307, 669, 340, 646], [349, 439, 370, 422], [408, 507, 454, 474], [330, 652, 368, 626], [409, 506, 447, 476]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 80%|████████  | 202/251 [00:06<00:01, 27.52it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 677 0\n",
      "tempsfdvdvdfv 1761 1\n",
      "tempsfdvdvdfv 2864 2\n",
      "tempsfdvdvdfv 3788 3\n",
      "tempsfdvdvdfv 4608 4\n",
      "tempsfdvdvdfv 5281 5\n",
      "tempsfdvdvdfv 6241 6\n",
      "tempsfdvdvdfv 6923 7\n",
      "tempsfdvdvdfv 7693 8\n",
      "tempsfdvdvdfv 8772 9\n",
      "tempsfdvdvdfv 9590 10\n",
      "tempsfdvdvdfv 10645 11\n",
      "tempsfdvdvdfv 11406 12\n",
      "tempsfdvdvdfv 12331 13\n",
      "tempsfdvdvdfv 13299 14\n",
      "tempsfdvdvdfv 14074 15\n",
      "tempsfdvdvdfv 14671 16\n",
      "tempsfdvdvdfv 15486 17\n",
      "tempsfdvdvdfv 16459 18\n",
      "tempsfdvdvdfv 17454 19\n",
      "avg 20 12 813 872 510 548 373 478 611 534\n",
      "left [[639, 406, 677, 428], [977, 611, 1084, 677], [906, 561, 1103, 674], [889, 559, 924, 581], [728, 455, 820, 510], [633, 406, 673, 429], [926, 582, 960, 601], [651, 405, 682, 426], [720, 447, 770, 487], [1062, 647, 1079, 657], [755, 476, 818, 512], [986, 605, 1055, 646], [715, 439, 761, 476], [900, 558, 925, 573], [892, 558, 968, 607], [716, 442, 775, 488], [523, 408, 597, 464], [755, 474, 815, 509], [923, 571, 973, 610], [970, 607, 995, 623]]\n",
      "right [[308, 684, 667, 414], [286, 684, 524, 512], [483, 543, 572, 479], [403, 612, 665, 414], [311, 684, 356, 650], [339, 682, 425, 617], [575, 477, 598, 464], [309, 624, 330, 611], [310, 625, 331, 612], [336, 664, 383, 629], [355, 508, 368, 498], [470, 552, 520, 515]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1061 0\n",
      "tempsfdvdvdfv 1846 1\n",
      "tempsfdvdvdfv 2847 2\n",
      "tempsfdvdvdfv 3626 3\n",
      "tempsfdvdvdfv 4455 4\n",
      "tempsfdvdvdfv 5542 5\n",
      "tempsfdvdvdfv 6328 6\n",
      "tempsfdvdvdfv 6983 7\n",
      "tempsfdvdvdfv 8071 8\n",
      "tempsfdvdvdfv 8733 9\n",
      "tempsfdvdvdfv 9390 10\n",
      "tempsfdvdvdfv 9863 11\n",
      "tempsfdvdvdfv 10537 12\n",
      "avg 13 24 751 810 484 520 437 505 563 517\n",
      "left [[923, 579, 1061, 661], [668, 414, 785, 490], [923, 580, 1001, 626], [759, 479, 779, 492], [727, 455, 829, 521], [1036, 645, 1087, 676], [759, 477, 786, 492], [610, 397, 655, 423], [1065, 662, 1088, 676], [608, 399, 662, 429], [607, 400, 657, 435], [448, 402, 473, 419], [636, 407, 674, 429]]\n",
      "right [[593, 467, 669, 414], [285, 684, 458, 559], [384, 628, 443, 581], [461, 557, 494, 535], [539, 501, 665, 428], [513, 521, 532, 506], [466, 565, 519, 523], [495, 533, 567, 489], [595, 436, 644, 404], [209, 684, 272, 649], [392, 608, 454, 562], [348, 654, 666, 414], [232, 670, 253, 654], [576, 476, 678, 419], [482, 542, 580, 485], [547, 452, 607, 410], [239, 667, 262, 653], [205, 684, 260, 651], [648, 439, 671, 426], [457, 560, 470, 552], [500, 529, 512, 521], [540, 507, 576, 481], [215, 685, 254, 657], [586, 476, 625, 446]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1090 0\n",
      "tempsfdvdvdfv 1880 1\n",
      "tempsfdvdvdfv 2938 2\n",
      "tempsfdvdvdfv 3731 3\n",
      "tempsfdvdvdfv 4793 4\n",
      "tempsfdvdvdfv 5400 5\n",
      "tempsfdvdvdfv 6171 6\n",
      "tempsfdvdvdfv 6745 7\n",
      "tempsfdvdvdfv 7416 8\n",
      "tempsfdvdvdfv 8086 9\n",
      "tempsfdvdvdfv 8870 10\n",
      "tempsfdvdvdfv 9516 11\n",
      "tempsfdvdvdfv 10310 12\n",
      "tempsfdvdvdfv 11414 13\n",
      "tempsfdvdvdfv 12071 14\n",
      "tempsfdvdvdfv 13134 15\n",
      "avg 16 10 762 820 489 525 426 534 553 476\n",
      "left [[969, 606, 1090, 676], [763, 482, 790, 497], [986, 605, 1058, 646], [687, 424, 793, 495], [999, 611, 1062, 648], [500, 392, 607, 461], [731, 458, 771, 481], [480, 429, 574, 492], [647, 406, 671, 420], [629, 406, 670, 430], [717, 446, 784, 495], [616, 407, 646, 424], [745, 467, 794, 495], [1044, 637, 1104, 674], [638, 412, 657, 423], [1053, 642, 1063, 648]]\n",
      "right [[312, 684, 529, 515], [287, 684, 562, 485], [476, 558, 587, 469], [604, 458, 672, 420], [439, 586, 492, 544], [485, 429, 522, 404], [331, 531, 405, 485], [328, 529, 404, 485], [539, 508, 647, 435], [459, 571, 524, 519]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 82%|████████▏ | 205/251 [00:06<00:01, 28.03it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 798 0\n",
      "tempsfdvdvdfv 1463 1\n",
      "tempsfdvdvdfv 2265 2\n",
      "tempsfdvdvdfv 3356 3\n",
      "tempsfdvdvdfv 4157 4\n",
      "tempsfdvdvdfv 4952 5\n",
      "tempsfdvdvdfv 5756 6\n",
      "tempsfdvdvdfv 6407 7\n",
      "tempsfdvdvdfv 7202 8\n",
      "tempsfdvdvdfv 7871 9\n",
      "tempsfdvdvdfv 8539 10\n",
      "tempsfdvdvdfv 9204 11\n",
      "tempsfdvdvdfv 9496 12\n",
      "tempsfdvdvdfv 10553 13\n",
      "tempsfdvdvdfv 11216 14\n",
      "avg 15 13 689 747 460 497 436 517 512 454\n",
      "left [[770, 486, 798, 502], [641, 406, 665, 420], [729, 456, 802, 502], [1030, 640, 1091, 675], [651, 405, 801, 502], [778, 485, 795, 497], [684, 424, 804, 502], [569, 388, 651, 436], [718, 442, 795, 502], [608, 394, 669, 429], [629, 407, 668, 430], [604, 397, 665, 431], [266, 526, 292, 541], [1032, 642, 1057, 657], [626, 407, 663, 431]]\n",
      "right [[313, 683, 540, 506], [287, 684, 567, 481], [483, 540, 497, 531], [538, 509, 598, 461], [564, 490, 663, 413], [561, 495, 653, 423], [349, 508, 371, 493], [497, 530, 552, 491], [480, 424, 513, 403], [475, 429, 515, 404], [390, 434, 443, 404], [385, 434, 439, 402], [355, 505, 370, 493]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 798 0\n",
      "tempsfdvdvdfv 1614 1\n",
      "tempsfdvdvdfv 2424 2\n",
      "tempsfdvdvdfv 2994 3\n",
      "tempsfdvdvdfv 3806 4\n",
      "tempsfdvdvdfv 4459 5\n",
      "tempsfdvdvdfv 5124 6\n",
      "tempsfdvdvdfv 5929 7\n",
      "tempsfdvdvdfv 6607 8\n",
      "tempsfdvdvdfv 7083 9\n",
      "tempsfdvdvdfv 7644 10\n",
      "avg 11 13 630 694 429 472 467 568 558 483\n",
      "left [[678, 419, 798, 506], [679, 419, 816, 511], [780, 489, 810, 511], [520, 456, 570, 487], [784, 491, 812, 511], [602, 403, 653, 433], [608, 389, 665, 422], [758, 473, 805, 511], [606, 387, 678, 428], [434, 404, 476, 430], [491, 389, 561, 445]]\n",
      "right [[542, 506, 662, 422], [549, 496, 579, 475], [314, 684, 600, 461], [346, 644, 489, 537], [615, 431, 648, 406], [608, 460, 668, 421], [315, 684, 663, 412], [307, 672, 327, 656], [476, 548, 500, 529], [343, 646, 385, 614], [597, 468, 677, 420], [494, 535, 528, 509], [569, 483, 659, 423]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 746 0\n",
      "tempsfdvdvdfv 1567 1\n",
      "tempsfdvdvdfv 2397 2\n",
      "tempsfdvdvdfv 3075 3\n",
      "tempsfdvdvdfv 3839 4\n",
      "tempsfdvdvdfv 4485 5\n",
      "tempsfdvdvdfv 4946 6\n",
      "tempsfdvdvdfv 5771 7\n",
      "tempsfdvdvdfv 6591 8\n",
      "tempsfdvdvdfv 7128 9\n",
      "tempsfdvdvdfv 7504 10\n",
      "tempsfdvdvdfv 8333 11\n",
      "tempsfdvdvdfv 9587 12\n",
      "avg 13 21 686 737 472 503 446 505 543 501\n",
      "left [[659, 411, 746, 465], [784, 497, 821, 520], [733, 461, 830, 517], [653, 412, 678, 427], [718, 449, 764, 477], [630, 407, 646, 417], [451, 327, 461, 333], [736, 464, 825, 520], [791, 502, 820, 520], [488, 391, 537, 423], [322, 662, 376, 697], [727, 456, 829, 519], [1231, 701, 1254, 715]]\n",
      "right [[351, 658, 495, 542], [290, 684, 376, 623], [556, 496, 673, 420], [428, 582, 606, 457], [371, 625, 417, 592], [423, 586, 445, 571], [488, 538, 555, 491], [492, 545, 502, 538], [540, 508, 555, 498], [445, 581, 465, 567], [412, 594, 426, 585], [484, 541, 498, 532], [506, 535, 581, 475], [432, 433, 532, 371], [501, 529, 564, 492], [403, 435, 444, 406], [545, 509, 666, 414], [429, 433, 448, 421], [518, 518, 544, 499], [344, 645, 370, 627], [419, 434, 447, 416]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 83%|████████▎ | 208/251 [00:06<00:01, 27.44it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 668 0\n",
      "tempsfdvdvdfv 1514 1\n",
      "tempsfdvdvdfv 2350 2\n",
      "tempsfdvdvdfv 3192 3\n",
      "tempsfdvdvdfv 3821 4\n",
      "tempsfdvdvdfv 4618 5\n",
      "tempsfdvdvdfv 5239 6\n",
      "tempsfdvdvdfv 5697 7\n",
      "tempsfdvdvdfv 6510 8\n",
      "tempsfdvdvdfv 7305 9\n",
      "tempsfdvdvdfv 8148 10\n",
      "tempsfdvdvdfv 8620 11\n",
      "tempsfdvdvdfv 9161 12\n",
      "avg 13 21 637 704 427 472 406 455 589 554\n",
      "left [[628, 408, 668, 431], [664, 412, 846, 530], [763, 483, 836, 530], [805, 504, 842, 530], [579, 413, 629, 449], [717, 449, 797, 501], [529, 375, 621, 449], [443, 407, 458, 417], [713, 441, 813, 516], [762, 481, 795, 501], [735, 464, 843, 526], [462, 328, 472, 335], [489, 392, 541, 426]]\n",
      "right [[383, 616, 544, 499], [317, 684, 405, 615], [288, 685, 372, 626], [408, 611, 472, 562], [479, 555, 671, 415], [293, 684, 319, 666], [370, 626, 385, 616], [596, 464, 675, 420], [381, 633, 397, 621], [468, 564, 491, 547], [447, 580, 461, 570], [313, 669, 325, 661], [318, 684, 337, 670], [391, 625, 406, 614], [601, 435, 640, 407], [516, 356, 532, 347], [375, 622, 424, 587], [443, 422, 485, 390], [475, 558, 511, 532], [354, 638, 373, 625], [321, 663, 340, 650]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 867 0\n",
      "tempsfdvdvdfv 1643 1\n",
      "tempsfdvdvdfv 2497 2\n",
      "tempsfdvdvdfv 3173 3\n",
      "tempsfdvdvdfv 3705 4\n",
      "tempsfdvdvdfv 4235 5\n",
      "tempsfdvdvdfv 5052 6\n",
      "tempsfdvdvdfv 5920 7\n",
      "tempsfdvdvdfv 6452 8\n",
      "tempsfdvdvdfv 7015 9\n",
      "tempsfdvdvdfv 7641 10\n",
      "tempsfdvdvdfv 8457 11\n",
      "tempsfdvdvdfv 9058 12\n",
      "tempsfdvdvdfv 9658 13\n",
      "avg 14 19 624 689 411 454 436 499 540 494\n",
      "left [[769, 486, 867, 543], [653, 408, 776, 485], [718, 451, 854, 542], [639, 408, 676, 429], [513, 338, 532, 349], [514, 337, 530, 346], [680, 420, 817, 519], [737, 465, 868, 541], [514, 341, 532, 351], [482, 390, 563, 445], [582, 415, 626, 446], [773, 485, 816, 518], [587, 411, 601, 421], [584, 411, 600, 421]]\n",
      "right [[290, 685, 563, 487], [315, 684, 536, 512], [631, 448, 657, 432], [641, 443, 679, 420], [473, 550, 490, 539], [563, 494, 652, 425], [291, 685, 387, 615], [430, 388, 447, 376], [513, 531, 598, 463], [468, 555, 505, 527], [373, 437, 427, 404], [370, 642, 422, 602], [397, 606, 453, 566], [610, 433, 650, 405], [208, 552, 232, 534], [519, 518, 529, 510], [357, 438, 374, 425], [509, 525, 523, 514], [344, 663, 369, 644]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 878 0\n",
      "tempsfdvdvdfv 1772 1\n",
      "tempsfdvdvdfv 2662 2\n",
      "tempsfdvdvdfv 3551 3\n",
      "tempsfdvdvdfv 4329 4\n",
      "tempsfdvdvdfv 4975 5\n",
      "tempsfdvdvdfv 5846 6\n",
      "tempsfdvdvdfv 6195 7\n",
      "tempsfdvdvdfv 7083 8\n",
      "tempsfdvdvdfv 7908 9\n",
      "tempsfdvdvdfv 8422 10\n",
      "tempsfdvdvdfv 9316 11\n",
      "tempsfdvdvdfv 10138 12\n",
      "tempsfdvdvdfv 10807 13\n",
      "tempsfdvdvdfv 11159 14\n",
      "avg 15 19 677 743 476 519 404 469 567 519\n",
      "left [[730, 460, 878, 556], [866, 539, 894, 556], [719, 450, 890, 557], [829, 518, 889, 557], [722, 454, 778, 489], [560, 391, 646, 439], [782, 489, 871, 551], [334, 430, 349, 439], [847, 528, 888, 557], [689, 425, 825, 523], [497, 533, 514, 543], [867, 540, 894, 557], [721, 453, 822, 516], [658, 415, 669, 422], [334, 515, 352, 526]]\n",
      "right [[317, 684, 557, 497], [340, 649, 567, 484], [559, 497, 664, 415], [292, 684, 402, 604], [323, 680, 355, 656], [438, 576, 655, 424], [427, 597, 438, 589], [322, 663, 339, 651], [296, 683, 306, 676], [402, 493, 419, 482], [307, 674, 321, 665], [494, 426, 510, 415], [483, 431, 503, 416], [481, 431, 501, 416], [456, 575, 520, 524], [479, 381, 514, 354], [398, 493, 411, 484], [581, 481, 629, 444], [295, 683, 311, 672]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 84%|████████▍ | 212/251 [00:06<00:01, 28.58it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 929 0\n",
      "tempsfdvdvdfv 1844 1\n",
      "tempsfdvdvdfv 2633 2\n",
      "tempsfdvdvdfv 3294 3\n",
      "tempsfdvdvdfv 4206 4\n",
      "tempsfdvdvdfv 4883 5\n",
      "tempsfdvdvdfv 5619 6\n",
      "tempsfdvdvdfv 6545 7\n",
      "tempsfdvdvdfv 7301 8\n",
      "tempsfdvdvdfv 7815 9\n",
      "tempsfdvdvdfv 8607 10\n",
      "avg 11 16 721 782 456 494 431 510 586 528\n",
      "left [[842, 526, 929, 576], [833, 526, 915, 577], [746, 472, 789, 497], [643, 413, 661, 423], [833, 527, 912, 576], [642, 407, 677, 428], [645, 404, 736, 459], [839, 525, 926, 577], [720, 451, 756, 477], [474, 327, 514, 352], [717, 447, 792, 496]]\n",
      "right [[320, 684, 390, 629], [294, 684, 412, 598], [366, 647, 554, 500], [446, 571, 668, 415], [430, 583, 466, 558], [592, 471, 671, 415], [596, 470, 663, 416], [376, 623, 436, 580], [295, 684, 341, 651], [480, 546, 610, 455], [421, 558, 431, 552], [561, 495, 578, 483], [319, 684, 462, 572], [415, 594, 444, 574], [460, 572, 485, 553], [529, 520, 556, 499]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 956 0\n",
      "tempsfdvdvdfv 1929 1\n",
      "tempsfdvdvdfv 2825 2\n",
      "tempsfdvdvdfv 3627 3\n",
      "tempsfdvdvdfv 4429 4\n",
      "tempsfdvdvdfv 5190 5\n",
      "tempsfdvdvdfv 6139 6\n",
      "tempsfdvdvdfv 6936 7\n",
      "tempsfdvdvdfv 7736 8\n",
      "avg 9 27 786 859 494 539 452 511 531 488\n",
      "left [[852, 537, 956, 602], [869, 540, 973, 602], [852, 538, 896, 566], [660, 413, 802, 502], [722, 453, 802, 503], [724, 456, 761, 482], [924, 581, 949, 597], [747, 472, 797, 500], [725, 456, 800, 503]]\n",
      "right [[509, 528, 664, 416], [489, 550, 668, 415], [296, 685, 480, 547], [588, 479, 662, 423], [406, 616, 434, 595], [621, 455, 665, 423], [633, 429, 654, 413], [347, 440, 358, 432], [299, 682, 423, 589], [442, 587, 670, 415], [421, 388, 437, 376], [381, 636, 409, 615], [641, 443, 667, 422], [368, 439, 417, 405], [650, 439, 660, 431], [391, 581, 403, 574], [485, 545, 539, 505], [362, 439, 412, 406], [388, 579, 402, 571], [338, 683, 372, 663], [344, 679, 369, 663], [575, 479, 659, 424], [500, 348, 513, 339], [472, 432, 496, 417], [335, 683, 370, 660], [429, 586, 471, 554], [517, 522, 534, 509]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 662 0\n",
      "tempsfdvdvdfv 1474 1\n",
      "tempsfdvdvdfv 2490 2\n",
      "tempsfdvdvdfv 3255 3\n",
      "tempsfdvdvdfv 3764 4\n",
      "tempsfdvdvdfv 4716 5\n",
      "tempsfdvdvdfv 5383 6\n",
      "tempsfdvdvdfv 6190 7\n",
      "tempsfdvdvdfv 7226 8\n",
      "tempsfdvdvdfv 8245 9\n",
      "tempsfdvdvdfv 9135 10\n",
      "tempsfdvdvdfv 9747 11\n",
      "tempsfdvdvdfv 10387 12\n",
      "tempsfdvdvdfv 11047 13\n",
      "tempsfdvdvdfv 11699 14\n",
      "tempsfdvdvdfv 12505 15\n",
      "tempsfdvdvdfv 13315 16\n",
      "avg 17 17 723 783 463 500 437 511 536 480\n",
      "left [[637, 406, 662, 421], [641, 400, 812, 507], [876, 549, 1016, 633], [715, 442, 765, 477], [496, 340, 509, 349], [893, 560, 952, 596], [595, 386, 667, 426], [761, 479, 807, 507], [1020, 621, 1036, 630], [979, 610, 1019, 634], [876, 550, 890, 559], [550, 416, 612, 456], [595, 408, 640, 441], [594, 394, 660, 432], [604, 401, 652, 432], [719, 442, 806, 507], [752, 473, 810, 507]]\n",
      "right [[318, 683, 664, 413], [407, 599, 597, 461], [536, 514, 666, 413], [336, 670, 388, 630], [321, 665, 391, 611], [544, 501, 602, 458], [586, 480, 658, 422], [330, 675, 350, 661], [596, 468, 652, 423], [297, 682, 339, 650], [445, 583, 474, 561], [653, 435, 677, 418], [319, 440, 353, 421], [495, 343, 509, 335], [349, 438, 372, 420], [404, 603, 494, 536], [495, 342, 509, 334]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1018 0\n",
      "tempsfdvdvdfv 2000 1\n",
      "tempsfdvdvdfv 3090 2\n",
      "tempsfdvdvdfv 3913 3\n",
      "tempsfdvdvdfv 4964 4\n",
      "tempsfdvdvdfv 5898 5\n",
      "tempsfdvdvdfv 6724 6\n",
      "tempsfdvdvdfv 7643 7\n",
      "tempsfdvdvdfv 8227 8\n",
      "tempsfdvdvdfv 8998 9\n",
      "tempsfdvdvdfv 9954 10\n",
      "avg 11 22 838 904 531 574 423 496 553 500\n",
      "left [[970, 605, 1018, 634], [907, 567, 982, 613], [1033, 641, 1090, 676], [687, 424, 823, 515], [1022, 635, 1051, 653], [909, 569, 934, 585], [725, 455, 826, 515], [907, 568, 919, 576], [484, 398, 584, 476], [675, 419, 771, 481], [908, 566, 956, 598]]\n",
      "right [[368, 646, 666, 413], [298, 684, 502, 531], [323, 683, 387, 633], [529, 513, 581, 473], [591, 466, 672, 419], [637, 443, 668, 420], [297, 684, 454, 566], [504, 531, 527, 513], [284, 645, 306, 628], [380, 637, 416, 609], [366, 648, 394, 627], [325, 437, 342, 427], [283, 645, 310, 630], [493, 342, 507, 334], [374, 437, 452, 387], [414, 609, 620, 448], [559, 489, 668, 426], [494, 346, 510, 335], [482, 547, 497, 535], [489, 542, 510, 525], [316, 685, 361, 653], [519, 520, 566, 484]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 1093 0\n",
      "tempsfdvdvdfv 2202 1\n",
      "tempsfdvdvdfv 2991 2\n",
      "tempsfdvdvdfv 3777 3\n",
      "tempsfdvdvdfv 4887 4\n",
      "tempsfdvdvdfv 5677 5\n",
      "tempsfdvdvdfv 6462 6\n",
      "tempsfdvdvdfv 7187 7\n",
      "tempsfdvdvdfv 7978 8\n",
      "tempsfdvdvdfv 8575 9\n",
      "tempsfdvdvdfv 9155 10\n",
      "tempsfdvdvdfv 9945 11\n",
      "tempsfdvdvdfv 10955 12\n",
      "avg 13 16 767 842 490 536 406 487 543 482\n",
      "left [[947, 591, 1093, 675], [973, 595, 1109, 673], [675, 418, 789, 492], [743, 467, 786, 492], [1034, 628, 1110, 672], [726, 453, 790, 490], [762, 479, 785, 492], [676, 418, 725, 447], [726, 454, 791, 492], [560, 443, 597, 466], [467, 386, 580, 474], [726, 455, 790, 492], [962, 589, 1010, 617]]\n",
      "right [[371, 644, 666, 413], [297, 684, 433, 582], [438, 580, 593, 464], [365, 649, 417, 609], [558, 496, 651, 423], [322, 684, 393, 628], [407, 603, 440, 577], [423, 591, 467, 557], [477, 365, 508, 340], [362, 438, 416, 408], [329, 432, 343, 424], [318, 684, 344, 668], [491, 341, 505, 333], [565, 484, 662, 428], [458, 575, 624, 445], [318, 441, 341, 428]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1088 0\n",
      "tempsfdvdvdfv 1888 1\n",
      "tempsfdvdvdfv 2683 2\n",
      "tempsfdvdvdfv 3482 3\n",
      "tempsfdvdvdfv 4208 4\n",
      "tempsfdvdvdfv 4934 5\n",
      "tempsfdvdvdfv 6027 6\n",
      "tempsfdvdvdfv 6765 7\n",
      "tempsfdvdvdfv 7808 8\n",
      "tempsfdvdvdfv 8605 9\n",
      "tempsfdvdvdfv 9620 10\n",
      "tempsfdvdvdfv 10418 11\n",
      "tempsfdvdvdfv 11430 12\n",
      "avg 13 13 831 879 516 544 464 563 534 459\n",
      "left [[1001, 620, 1088, 672], [730, 458, 800, 497], [768, 483, 795, 498], [636, 398, 799, 496], [683, 424, 726, 450], [687, 423, 726, 448], [1061, 655, 1093, 674], [725, 450, 738, 458], [1008, 625, 1043, 646], [728, 455, 797, 498], [1001, 621, 1015, 630], [788, 489, 798, 495], [998, 611, 1012, 619]]\n",
      "right [[321, 684, 657, 422], [301, 683, 587, 468], [652, 435, 675, 418], [324, 683, 431, 599], [469, 567, 571, 490], [446, 575, 601, 459], [568, 488, 655, 422], [516, 530, 541, 511], [602, 418, 636, 399], [343, 651, 394, 612], [612, 458, 664, 421], [399, 432, 417, 418], [489, 339, 502, 331]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 86%|████████▌ | 215/251 [00:06<00:01, 28.09it/s]\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 87%|████████▋ | 219/251 [00:06<00:01, 30.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 811 0\n",
      "tempsfdvdvdfv 1329 1\n",
      "tempsfdvdvdfv 1845 2\n",
      "tempsfdvdvdfv 2639 3\n",
      "tempsfdvdvdfv 3424 4\n",
      "tempsfdvdvdfv 4231 5\n",
      "tempsfdvdvdfv 5334 6\n",
      "tempsfdvdvdfv 6008 7\n",
      "tempsfdvdvdfv 6792 8\n",
      "tempsfdvdvdfv 7425 9\n",
      "tempsfdvdvdfv 7776 10\n",
      "tempsfdvdvdfv 8553 11\n",
      "tempsfdvdvdfv 9358 12\n",
      "tempsfdvdvdfv 10166 13\n",
      "avg 14 16 669 726 437 475 436 514 517 459\n",
      "left [[729, 458, 811, 504], [495, 328, 518, 341], [502, 338, 516, 346], [716, 441, 794, 500], [718, 445, 785, 495], [751, 474, 807, 506], [1084, 664, 1103, 675], [643, 411, 674, 429], [688, 425, 784, 494], [609, 412, 633, 428], [333, 428, 351, 440], [668, 414, 777, 490], [778, 486, 805, 506], [655, 407, 808, 506]]\n",
      "right [[327, 684, 660, 415], [304, 683, 597, 463], [560, 499, 664, 415], [501, 544, 562, 498], [569, 483, 668, 428], [494, 353, 509, 344], [616, 431, 645, 408], [331, 442, 356, 427], [329, 442, 355, 423], [321, 439, 340, 428], [317, 673, 349, 648], [489, 554, 499, 547], [553, 502, 627, 446], [320, 439, 337, 428], [628, 429, 654, 409], [327, 683, 407, 619]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 817 0\n",
      "tempsfdvdvdfv 1493 1\n",
      "tempsfdvdvdfv 2318 2\n",
      "tempsfdvdvdfv 3142 3\n",
      "tempsfdvdvdfv 3954 4\n",
      "tempsfdvdvdfv 4774 5\n",
      "tempsfdvdvdfv 5595 6\n",
      "tempsfdvdvdfv 6102 7\n",
      "tempsfdvdvdfv 6831 8\n",
      "avg 9 11 695 759 439 476 436 549 595 507\n",
      "left [[782, 491, 817, 511], [640, 407, 676, 427], [724, 452, 825, 510], [731, 459, 824, 511], [782, 492, 812, 509], [731, 458, 820, 511], [725, 451, 821, 511], [489, 338, 507, 348], [652, 407, 729, 452]]\n",
      "right [[301, 684, 596, 462], [326, 684, 661, 413], [641, 440, 668, 419], [340, 682, 452, 594], [413, 599, 587, 468], [341, 682, 446, 600], [371, 657, 462, 584], [615, 456, 657, 422], [428, 612, 451, 594], [413, 627, 425, 618], [610, 431, 634, 413]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 841 0\n",
      "tempsfdvdvdfv 1511 1\n",
      "tempsfdvdvdfv 2241 2\n",
      "tempsfdvdvdfv 2896 3\n",
      "tempsfdvdvdfv 3555 4\n",
      "tempsfdvdvdfv 4298 5\n",
      "tempsfdvdvdfv 5018 6\n",
      "avg 7 16 657 716 417 451 432 504 493 441\n",
      "left [[726, 454, 841, 520], [638, 412, 670, 430], [632, 397, 730, 454], [615, 410, 655, 435], [632, 400, 659, 415], [726, 453, 743, 463], [631, 395, 720, 446]]\n",
      "right [[391, 619, 543, 501], [326, 685, 660, 415], [565, 485, 662, 429], [328, 667, 381, 625], [580, 474, 675, 419], [320, 439, 345, 425], [557, 491, 666, 428], [353, 648, 389, 619], [418, 599, 554, 493], [329, 441, 345, 429], [352, 440, 363, 433], [480, 343, 498, 333], [482, 345, 503, 333], [395, 397, 413, 387], [394, 396, 412, 386], [650, 425, 669, 414]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 814 0\n",
      "tempsfdvdvdfv 1645 1\n",
      "tempsfdvdvdfv 2081 2\n",
      "tempsfdvdvdfv 2490 3\n",
      "tempsfdvdvdfv 3293 4\n",
      "tempsfdvdvdfv 3772 5\n",
      "avg 6 20 564 628 424 470 427 465 468 440\n",
      "left [[684, 424, 814, 511], [772, 480, 831, 521], [384, 391, 436, 431], [393, 378, 409, 389], [770, 480, 803, 505], [384, 392, 479, 466]]\n",
      "right [[329, 667, 558, 489], [568, 483, 589, 467], [539, 511, 655, 423], [341, 440, 362, 424], [545, 500, 573, 478], [481, 346, 501, 334], [612, 458, 639, 437], [318, 442, 345, 426], [309, 682, 357, 644], [322, 438, 343, 426], [353, 439, 372, 425], [346, 440, 359, 431], [321, 438, 340, 425], [541, 503, 583, 471], [552, 424, 578, 406], [440, 594, 453, 584], [339, 440, 362, 423], [480, 345, 501, 333], [336, 440, 350, 429], [479, 344, 497, 331]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 869 0\n",
      "tempsfdvdvdfv 1742 1\n",
      "tempsfdvdvdfv 2469 2\n",
      "tempsfdvdvdfv 3123 3\n",
      "tempsfdvdvdfv 3971 4\n",
      "avg 5 10 702 794 444 500 461 519 478 436\n",
      "left [[739, 466, 869, 544], [648, 405, 873, 545], [677, 418, 727, 449], [615, 410, 654, 435], [834, 522, 848, 531]]\n",
      "right [[309, 683, 559, 488], [448, 367, 497, 328], [361, 439, 388, 418], [611, 453, 672, 419], [532, 508, 573, 485], [362, 439, 385, 421], [630, 428, 657, 412], [450, 368, 497, 335], [600, 420, 621, 408], [308, 683, 347, 652]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 675 0\n",
      "tempsfdvdvdfv 1588 1\n",
      "tempsfdvdvdfv 2375 2\n",
      "tempsfdvdvdfv 3284 3\n",
      "tempsfdvdvdfv 4160 4\n",
      "tempsfdvdvdfv 5060 5\n",
      "tempsfdvdvdfv 5842 6\n",
      "tempsfdvdvdfv 6699 7\n",
      "tempsfdvdvdfv 7486 8\n",
      "tempsfdvdvdfv 8399 9\n",
      "tempsfdvdvdfv 9296 10\n",
      "tempsfdvdvdfv 9806 11\n",
      "tempsfdvdvdfv 10297 12\n",
      "tempsfdvdvdfv 11081 13\n",
      "tempsfdvdvdfv 11582 14\n",
      "tempsfdvdvdfv 12202 15\n",
      "avg 16 10 713 762 468 499 399 449 496 459\n",
      "left [[627, 402, 675, 429], [869, 537, 913, 562], [722, 452, 787, 491], [842, 522, 909, 563], [855, 536, 876, 549], [880, 550, 900, 563], [690, 425, 782, 494], [829, 518, 857, 538], [731, 460, 787, 492], [835, 519, 913, 563], [826, 521, 897, 562], [468, 431, 510, 459], [472, 343, 491, 356], [744, 471, 784, 494], [467, 407, 501, 426], [563, 409, 620, 453]]\n",
      "right [[308, 684, 552, 494], [343, 441, 372, 421], [345, 441, 373, 422], [602, 460, 665, 422], [603, 465, 665, 415], [376, 390, 391, 380], [415, 616, 425, 608], [339, 441, 360, 427], [217, 547, 231, 536], [447, 479, 457, 473]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 788 0\n",
      "tempsfdvdvdfv 1551 1\n",
      "tempsfdvdvdfv 2343 2\n",
      "tempsfdvdvdfv 3011 3\n",
      "tempsfdvdvdfv 3949 4\n",
      "tempsfdvdvdfv 4436 5\n",
      "tempsfdvdvdfv 4929 6\n",
      "tempsfdvdvdfv 5821 7\n",
      "avg 8 11 671 727 425 462 453 523 503 452\n",
      "left [[661, 410, 788, 496], [689, 424, 763, 478], [687, 425, 792, 498], [625, 393, 668, 421], [908, 566, 938, 584], [477, 327, 487, 333], [481, 327, 493, 334], [844, 530, 892, 557]]\n",
      "right [[635, 428, 657, 411], [308, 683, 557, 489], [631, 429, 655, 411], [306, 683, 517, 519], [522, 517, 573, 478], [576, 476, 678, 419], [584, 437, 632, 401], [410, 567, 420, 561], [217, 545, 231, 534], [326, 434, 346, 422], [475, 342, 493, 331]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      " 89%|████████▉ | 223/251 [00:07<00:00, 31.02it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 989 0\n",
      "tempsfdvdvdfv 1789 1\n",
      "tempsfdvdvdfv 2275 2\n",
      "tempsfdvdvdfv 3076 3\n",
      "tempsfdvdvdfv 4025 4\n",
      "avg 5 7 733 805 464 512 398 462 515 470\n",
      "left [[865, 543, 989, 615], [688, 425, 800, 506], [466, 337, 486, 353], [716, 444, 801, 506], [930, 572, 949, 583]]\n",
      "right [[306, 684, 540, 502], [371, 589, 383, 582], [209, 548, 224, 536], [343, 441, 373, 419], [564, 485, 658, 431], [520, 518, 567, 489], [473, 341, 490, 331]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1094 0\n",
      "tempsfdvdvdfv 1836 1\n",
      "tempsfdvdvdfv 2578 2\n",
      "tempsfdvdvdfv 3076 3\n",
      "tempsfdvdvdfv 3895 4\n",
      "tempsfdvdvdfv 4882 5\n",
      "tempsfdvdvdfv 5696 6\n",
      "tempsfdvdvdfv 6709 7\n",
      "tempsfdvdvdfv 7208 8\n",
      "tempsfdvdvdfv 7884 9\n",
      "avg 10 23 728 788 462 497 458 500 540 510\n",
      "left [[891, 559, 1094, 676], [726, 456, 742, 465], [728, 458, 742, 466], [474, 328, 498, 342], [738, 466, 819, 512], [891, 560, 987, 615], [753, 475, 814, 513], [990, 605, 1013, 618], [475, 328, 499, 342], [620, 393, 676, 428]]\n",
      "right [[414, 598, 566, 483], [303, 684, 396, 614], [567, 483, 664, 429], [583, 472, 673, 420], [318, 622, 339, 609], [394, 614, 417, 597], [632, 446, 665, 421], [655, 436, 677, 419], [327, 620, 339, 611], [366, 654, 397, 629], [515, 529, 526, 521], [481, 557, 499, 543], [542, 507, 631, 442], [353, 646, 429, 588], [500, 464, 516, 455], [317, 442, 339, 425], [323, 618, 333, 611], [597, 462, 635, 440], [426, 589, 443, 577], [497, 544, 515, 530], [438, 367, 482, 335], [572, 479, 592, 467], [417, 596, 434, 584]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1093 0\n",
      "tempsfdvdvdfv 1764 1\n",
      "tempsfdvdvdfv 2547 2\n",
      "tempsfdvdvdfv 3640 3\n",
      "tempsfdvdvdfv 4412 4\n",
      "tempsfdvdvdfv 4893 5\n",
      "tempsfdvdvdfv 5671 6\n",
      "tempsfdvdvdfv 6194 7\n",
      "tempsfdvdvdfv 6975 8\n",
      "tempsfdvdvdfv 7720 9\n",
      "tempsfdvdvdfv 8815 10\n",
      "tempsfdvdvdfv 9799 11\n",
      "tempsfdvdvdfv 10327 12\n",
      "tempsfdvdvdfv 11106 13\n",
      "tempsfdvdvdfv 11587 14\n",
      "tempsfdvdvdfv 12107 15\n",
      "tempsfdvdvdfv 13196 16\n",
      "tempsfdvdvdfv 13732 17\n",
      "tempsfdvdvdfv 14465 18\n",
      "tempsfdvdvdfv 14950 19\n",
      "tempsfdvdvdfv 15939 20\n",
      "avg 21 23 700 759 471 507 433 486 546 511\n",
      "left [[925, 578, 1093, 675], [620, 400, 671, 429], [725, 455, 783, 491], [993, 616, 1093, 673], [756, 480, 772, 489], [430, 388, 481, 419], [759, 482, 778, 493], [429, 389, 523, 452], [739, 467, 781, 492], [725, 453, 745, 465], [1070, 659, 1095, 674], [927, 580, 984, 614], [465, 417, 528, 454], [689, 424, 779, 492], [460, 334, 481, 351], [461, 421, 520, 456], [1003, 622, 1089, 675], [433, 383, 536, 452], [717, 444, 733, 456], [460, 333, 485, 347], [929, 577, 989, 616]]\n",
      "right [[301, 683, 427, 588], [421, 591, 479, 548], [504, 527, 523, 514], [532, 506, 677, 419], [545, 497, 674, 419], [586, 469, 673, 419], [242, 667, 273, 649], [467, 556, 497, 534], [598, 460, 663, 421], [499, 531, 575, 485], [651, 436, 664, 428], [224, 685, 274, 650], [436, 366, 486, 336], [628, 446, 665, 420], [537, 510, 574, 482], [424, 589, 441, 577], [224, 541, 245, 528], [412, 598, 424, 590], [305, 682, 354, 645], [254, 659, 266, 652], [528, 509, 579, 480], [221, 685, 267, 654], [433, 365, 484, 331]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1090 0\n",
      "tempsfdvdvdfv 2183 1\n",
      "tempsfdvdvdfv 2846 2\n",
      "tempsfdvdvdfv 3560 3\n",
      "tempsfdvdvdfv 4131 4\n",
      "tempsfdvdvdfv 4919 5\n",
      "tempsfdvdvdfv 5396 6\n",
      "tempsfdvdvdfv 5968 7\n",
      "tempsfdvdvdfv 6716 8\n",
      "tempsfdvdvdfv 7380 9\n",
      "tempsfdvdvdfv 8376 10\n",
      "tempsfdvdvdfv 9384 11\n",
      "tempsfdvdvdfv 10388 12\n",
      "tempsfdvdvdfv 11116 13\n",
      "tempsfdvdvdfv 12226 14\n",
      "tempsfdvdvdfv 12838 15\n",
      "tempsfdvdvdfv 13452 16\n",
      "tempsfdvdvdfv 14240 17\n",
      "tempsfdvdvdfv 14808 18\n",
      "avg 19 12 722 779 479 517 432 511 556 498\n",
      "left [[974, 606, 1090, 676], [1066, 659, 1093, 675], [616, 395, 663, 423], [680, 420, 714, 440], [426, 389, 571, 494], [728, 460, 788, 496], [456, 336, 477, 353], [427, 387, 572, 492], [727, 458, 748, 470], [619, 404, 664, 430], [973, 607, 996, 622], [993, 619, 1008, 628], [988, 606, 1004, 615], [631, 396, 728, 456], [1085, 657, 1110, 672], [548, 410, 612, 458], [549, 409, 614, 456], [761, 485, 788, 500], [480, 413, 568, 484]]\n",
      "right [[306, 684, 524, 514], [442, 590, 487, 554], [539, 503, 676, 421], [527, 512, 591, 473], [647, 436, 665, 422], [326, 684, 371, 651], [305, 684, 501, 531], [325, 684, 390, 635], [430, 367, 481, 334], [428, 364, 479, 328], [330, 683, 348, 670], [579, 482, 628, 444]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1087 0\n",
      "tempsfdvdvdfv 1570 1\n",
      "tempsfdvdvdfv 2650 2\n",
      "tempsfdvdvdfv 3446 3\n",
      "tempsfdvdvdfv 4184 4\n",
      "tempsfdvdvdfv 5232 5\n",
      "tempsfdvdvdfv 6317 6\n",
      "tempsfdvdvdfv 7408 7\n",
      "tempsfdvdvdfv 8209 8\n",
      "tempsfdvdvdfv 8881 9\n",
      "tempsfdvdvdfv 9538 10\n",
      "tempsfdvdvdfv 10012 11\n",
      "tempsfdvdvdfv 10675 12\n",
      "tempsfdvdvdfv 11340 13\n",
      "tempsfdvdvdfv 12139 14\n",
      "tempsfdvdvdfv 12931 15\n",
      "tempsfdvdvdfv 13569 16\n",
      "avg 17 10 754 798 482 509 473 537 541 494\n",
      "left [[1025, 639, 1087, 676], [469, 327, 483, 335], [1026, 638, 1080, 670], [773, 494, 796, 507], [722, 453, 738, 463], [1032, 634, 1048, 643], [1024, 641, 1085, 676], [1037, 641, 1091, 676], [746, 474, 801, 506], [599, 389, 672, 431], [623, 414, 657, 433], [454, 339, 474, 355], [624, 411, 663, 433], [650, 407, 665, 416], [680, 421, 799, 507], [728, 460, 792, 499], [614, 421, 638, 440]]\n",
      "right [[565, 493, 664, 416], [307, 684, 533, 508], [556, 493, 574, 479], [309, 682, 355, 645], [531, 510, 585, 477], [562, 489, 585, 471], [489, 541, 512, 525], [619, 454, 657, 424], [436, 434, 481, 408], [363, 639, 432, 587]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 90%|█████████ | 227/251 [00:07<00:00, 30.69it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 807 0\n",
      "tempsfdvdvdfv 1620 1\n",
      "tempsfdvdvdfv 2432 2\n",
      "tempsfdvdvdfv 3095 3\n",
      "tempsfdvdvdfv 3908 4\n",
      "tempsfdvdvdfv 4630 5\n",
      "tempsfdvdvdfv 5295 6\n",
      "tempsfdvdvdfv 5963 7\n",
      "tempsfdvdvdfv 6744 8\n",
      "tempsfdvdvdfv 7500 9\n",
      "tempsfdvdvdfv 8111 10\n",
      "tempsfdvdvdfv 8771 11\n",
      "tempsfdvdvdfv 9350 12\n",
      "avg 13 15 652 719 426 471 467 533 488 439\n",
      "left [[779, 498, 807, 514], [655, 407, 813, 514], [750, 477, 812, 514], [613, 393, 663, 423], [670, 416, 813, 513], [691, 425, 722, 448], [615, 405, 665, 433], [615, 402, 668, 432], [723, 455, 781, 499], [689, 425, 756, 476], [556, 414, 611, 454], [617, 407, 660, 431], [507, 426, 579, 482]]\n",
      "right [[463, 572, 666, 413], [307, 683, 511, 524], [515, 521, 665, 416], [621, 453, 669, 416], [438, 593, 455, 580], [324, 443, 349, 424], [492, 548, 552, 501], [433, 367, 475, 338], [641, 443, 671, 422], [442, 348, 474, 325], [451, 582, 483, 557], [325, 435, 344, 422], [509, 526, 545, 501], [436, 368, 478, 337], [621, 452, 667, 416]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 762 0\n",
      "tempsfdvdvdfv 1581 1\n",
      "tempsfdvdvdfv 2409 2\n",
      "tempsfdvdvdfv 3132 3\n",
      "tempsfdvdvdfv 3860 4\n",
      "tempsfdvdvdfv 4504 5\n",
      "tempsfdvdvdfv 5290 6\n",
      "tempsfdvdvdfv 6118 7\n",
      "tempsfdvdvdfv 6939 8\n",
      "avg 9 17 699 771 439 487 521 584 498 452\n",
      "left [[652, 407, 762, 478], [754, 480, 819, 522], [736, 466, 828, 522], [681, 420, 723, 448], [679, 420, 728, 453], [595, 388, 644, 418], [725, 456, 786, 502], [788, 497, 828, 520], [688, 425, 821, 522]]\n",
      "right [[384, 621, 567, 483], [525, 521, 671, 415], [587, 470, 609, 454], [622, 452, 664, 422], [645, 440, 673, 421], [533, 509, 585, 470], [636, 445, 671, 421], [499, 542, 534, 516], [604, 461, 667, 415], [431, 367, 472, 340], [567, 489, 668, 415], [738, 693, 780, 669], [351, 439, 372, 427], [557, 492, 601, 459], [306, 683, 498, 533], [547, 425, 564, 415], [331, 429, 344, 421]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 92%|█████████▏| 231/251 [00:07<00:00, 31.09it/s]\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 845 0\n",
      "tempsfdvdvdfv 1508 1\n",
      "tempsfdvdvdfv 2345 2\n",
      "tempsfdvdvdfv 2946 3\n",
      "tempsfdvdvdfv 3746 4\n",
      "tempsfdvdvdfv 4241 5\n",
      "tempsfdvdvdfv 5217 6\n",
      "tempsfdvdvdfv 5677 7\n",
      "tempsfdvdvdfv 6401 8\n",
      "tempsfdvdvdfv 7375 9\n",
      "tempsfdvdvdfv 7994 10\n",
      "tempsfdvdvdfv 8627 11\n",
      "tempsfdvdvdfv 9279 12\n",
      "tempsfdvdvdfv 10119 13\n",
      "tempsfdvdvdfv 10951 14\n",
      "tempsfdvdvdfv 11796 15\n",
      "tempsfdvdvdfv 12313 16\n",
      "tempsfdvdvdfv 12773 17\n",
      "tempsfdvdvdfv 13267 18\n",
      "tempsfdvdvdfv 14034 19\n",
      "tempsfdvdvdfv 14505 20\n",
      "tempsfdvdvdfv 14890 21\n",
      "tempsfdvdvdfv 15384 22\n",
      "tempsfdvdvdfv 15851 23\n",
      "tempsfdvdvdfv 16645 24\n",
      "avg 25 27 614 665 421 454 470 506 550 525\n",
      "left [[737, 466, 845, 529], [611, 402, 663, 432], [760, 483, 837, 531], [544, 417, 601, 459], [736, 465, 800, 502], [436, 346, 495, 381], [963, 604, 976, 612], [446, 331, 460, 339], [651, 406, 724, 449], [960, 604, 974, 613], [570, 414, 619, 452], [587, 418, 633, 444], [604, 388, 652, 416], [715, 443, 840, 531], [808, 515, 832, 529], [761, 483, 845, 530], [451, 326, 517, 369], [447, 333, 460, 343], [436, 347, 494, 382], [735, 464, 767, 482], [444, 331, 471, 346], [368, 420, 385, 432], [444, 353, 494, 383], [435, 342, 467, 360], [718, 447, 794, 506]]\n",
      "right [[529, 511, 599, 459], [301, 684, 326, 666], [558, 495, 669, 414], [630, 447, 669, 420], [344, 650, 374, 628], [527, 519, 550, 503], [362, 636, 413, 598], [490, 548, 538, 519], [500, 540, 534, 518], [414, 596, 426, 588], [454, 565, 476, 550], [424, 588, 435, 581], [495, 534, 515, 521], [462, 571, 473, 563], [547, 504, 570, 487], [436, 579, 493, 547], [479, 546, 667, 414], [474, 550, 484, 544], [401, 606, 418, 594], [292, 684, 333, 660], [628, 418, 641, 409], [526, 520, 538, 512], [337, 656, 351, 646], [543, 424, 559, 415], [446, 571, 456, 565], [566, 484, 602, 457], [536, 425, 561, 411]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1081 0\n",
      "tempsfdvdvdfv 1948 1\n",
      "tempsfdvdvdfv 2811 2\n",
      "tempsfdvdvdfv 3854 3\n",
      "tempsfdvdvdfv 4627 4\n",
      "tempsfdvdvdfv 5148 5\n",
      "tempsfdvdvdfv 5765 6\n",
      "tempsfdvdvdfv 6400 7\n",
      "tempsfdvdvdfv 7058 8\n",
      "tempsfdvdvdfv 7578 9\n",
      "tempsfdvdvdfv 8242 10\n",
      "tempsfdvdvdfv 8876 11\n",
      "tempsfdvdvdfv 9506 12\n",
      "tempsfdvdvdfv 9879 13\n",
      "tempsfdvdvdfv 10560 14\n",
      "tempsfdvdvdfv 11405 15\n",
      "tempsfdvdvdfv 11915 16\n",
      "tempsfdvdvdfv 12717 17\n",
      "tempsfdvdvdfv 13361 18\n",
      "tempsfdvdvdfv 14404 19\n",
      "avg 20 19 664 720 460 496 419 494 564 508\n",
      "left [[1022, 640, 1081, 677], [766, 485, 867, 541], [738, 466, 863, 538], [1027, 640, 1043, 649], [663, 411, 773, 485], [503, 368, 521, 378], [565, 411, 617, 452], [582, 410, 635, 443], [613, 408, 658, 433], [502, 370, 520, 382], [610, 401, 664, 431], [581, 411, 634, 443], [580, 411, 630, 445], [322, 666, 373, 698], [651, 405, 681, 425], [722, 447, 845, 536], [465, 334, 510, 369], [766, 486, 802, 508], [596, 409, 644, 438], [1022, 639, 1043, 652]]\n",
      "right [[302, 683, 486, 540], [437, 590, 662, 414], [537, 503, 664, 414], [605, 460, 654, 422], [421, 591, 500, 530], [436, 591, 450, 581], [511, 522, 668, 420], [300, 684, 354, 641], [603, 457, 658, 414], [474, 560, 660, 414], [418, 606, 439, 590], [194, 550, 209, 538], [488, 540, 503, 528], [321, 685, 377, 641], [321, 668, 377, 623], [421, 603, 469, 566], [205, 548, 227, 533], [517, 519, 540, 501], [467, 369, 504, 344]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 672 0\n",
      "tempsfdvdvdfv 1514 1\n",
      "tempsfdvdvdfv 2036 2\n",
      "tempsfdvdvdfv 2712 3\n",
      "tempsfdvdvdfv 3539 4\n",
      "tempsfdvdvdfv 4292 5\n",
      "tempsfdvdvdfv 5154 6\n",
      "tempsfdvdvdfv 6001 7\n",
      "tempsfdvdvdfv 6775 8\n",
      "tempsfdvdvdfv 7436 9\n",
      "tempsfdvdvdfv 8191 10\n",
      "tempsfdvdvdfv 8671 11\n",
      "avg 12 20 664 722 423 464 470 545 518 461\n",
      "left [[637, 405, 672, 427], [715, 442, 842, 534], [504, 339, 522, 349], [641, 405, 676, 426], [729, 456, 827, 525], [740, 466, 753, 474], [779, 486, 862, 546], [713, 440, 847, 537], [719, 447, 774, 489], [650, 406, 661, 413], [719, 448, 755, 472], [429, 345, 480, 379]]\n",
      "right [[322, 684, 657, 413], [340, 650, 507, 524], [554, 489, 677, 418], [318, 685, 492, 545], [559, 487, 596, 459], [502, 529, 553, 490], [611, 455, 664, 413], [334, 438, 358, 419], [551, 499, 659, 420], [486, 382, 535, 347], [326, 438, 340, 427], [592, 466, 665, 413], [352, 641, 388, 615], [580, 470, 595, 461], [343, 648, 368, 630], [512, 531, 615, 448], [622, 449, 637, 437], [548, 495, 576, 473], [479, 546, 502, 528], [476, 384, 529, 344]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 916 0\n",
      "tempsfdvdvdfv 1845 1\n",
      "tempsfdvdvdfv 2345 2\n",
      "tempsfdvdvdfv 3189 3\n",
      "tempsfdvdvdfv 3800 4\n",
      "tempsfdvdvdfv 4422 5\n",
      "tempsfdvdvdfv 5032 6\n",
      "tempsfdvdvdfv 5890 7\n",
      "tempsfdvdvdfv 6674 8\n",
      "tempsfdvdvdfv 7463 9\n",
      "tempsfdvdvdfv 8392 10\n",
      "tempsfdvdvdfv 9175 11\n",
      "tempsfdvdvdfv 9935 12\n",
      "tempsfdvdvdfv 10717 13\n",
      "tempsfdvdvdfv 11583 14\n",
      "tempsfdvdvdfv 12369 15\n",
      "avg 16 20 709 773 458 500 421 496 528 471\n",
      "left [[847, 536, 916, 576], [834, 522, 929, 575], [444, 331, 500, 370], [830, 524, 844, 534], [545, 408, 611, 454], [570, 411, 622, 447], [458, 331, 610, 454], [830, 523, 858, 542], [716, 442, 784, 493], [743, 466, 789, 492], [842, 524, 929, 574], [731, 457, 783, 490], [672, 417, 760, 474], [746, 469, 782, 493], [829, 525, 866, 546], [720, 447, 786, 490]]\n",
      "right [[294, 683, 560, 483], [597, 458, 658, 409], [410, 609, 662, 412], [295, 683, 589, 462], [317, 683, 417, 605], [329, 675, 357, 654], [434, 351, 460, 330], [533, 511, 652, 421], [629, 444, 663, 418], [418, 603, 434, 591], [437, 359, 468, 337], [331, 437, 354, 420], [329, 437, 354, 419], [549, 498, 659, 412], [633, 442, 665, 418], [473, 382, 505, 362], [367, 645, 384, 632], [415, 556, 425, 550], [324, 437, 337, 427], [320, 682, 332, 674]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 962 0\n",
      "tempsfdvdvdfv 1757 1\n",
      "tempsfdvdvdfv 2626 2\n",
      "tempsfdvdvdfv 3417 3\n",
      "tempsfdvdvdfv 4138 4\n",
      "tempsfdvdvdfv 4595 5\n",
      "tempsfdvdvdfv 5389 6\n",
      "tempsfdvdvdfv 6154 7\n",
      "tempsfdvdvdfv 6573 8\n",
      "tempsfdvdvdfv 7003 9\n",
      "tempsfdvdvdfv 7796 10\n",
      "tempsfdvdvdfv 8284 11\n",
      "tempsfdvdvdfv 8835 12\n",
      "tempsfdvdvdfv 9590 13\n",
      "tempsfdvdvdfv 10200 14\n",
      "avg 15 12 634 680 459 490 427 501 585 528\n",
      "left [[860, 545, 962, 604], [713, 440, 795, 500], [849, 537, 869, 549], [735, 461, 791, 501], [667, 413, 721, 443], [441, 334, 457, 346], [725, 452, 794, 500], [717, 445, 765, 479], [409, 597, 419, 604], [390, 572, 430, 595], [764, 480, 793, 501], [476, 375, 488, 384], [540, 411, 551, 419], [723, 451, 755, 476], [513, 379, 610, 452]]\n",
      "right [[321, 684, 655, 414], [438, 577, 593, 461], [370, 628, 440, 574], [607, 432, 641, 405], [563, 482, 662, 427], [298, 683, 343, 647], [630, 427, 645, 415], [431, 582, 491, 536], [380, 579, 394, 571], [400, 619, 413, 609], [369, 644, 390, 628], [317, 685, 355, 656]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "\r",
      " 94%|█████████▎| 235/251 [00:07<00:00, 31.78it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1025 0\n",
      "tempsfdvdvdfv 1832 1\n",
      "tempsfdvdvdfv 2635 2\n",
      "tempsfdvdvdfv 3439 3\n",
      "tempsfdvdvdfv 4250 4\n",
      "tempsfdvdvdfv 5051 5\n",
      "tempsfdvdvdfv 5706 6\n",
      "tempsfdvdvdfv 6302 7\n",
      "tempsfdvdvdfv 7059 8\n",
      "tempsfdvdvdfv 7454 9\n",
      "avg 10 17 671 745 459 508 430 504 583 528\n",
      "left [[874, 552, 1025, 639], [751, 473, 807, 506], [713, 436, 803, 506], [683, 422, 804, 506], [736, 461, 811, 503], [714, 438, 801, 506], [592, 394, 655, 429], [586, 388, 596, 394], [714, 440, 757, 472], [351, 595, 395, 622]]\n",
      "right [[565, 485, 665, 412], [294, 684, 588, 463], [319, 683, 431, 595], [294, 683, 576, 471], [393, 623, 461, 571], [599, 433, 645, 403], [337, 607, 356, 596], [366, 645, 386, 630], [478, 556, 546, 502], [377, 636, 400, 619], [444, 583, 468, 565], [335, 607, 350, 595], [581, 479, 656, 420], [321, 682, 355, 656], [408, 612, 419, 604], [552, 496, 597, 462], [657, 431, 675, 417]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1087 0\n",
      "tempsfdvdvdfv 2193 1\n",
      "tempsfdvdvdfv 3219 2\n",
      "tempsfdvdvdfv 3950 3\n",
      "tempsfdvdvdfv 4576 4\n",
      "tempsfdvdvdfv 5397 5\n",
      "tempsfdvdvdfv 6177 6\n",
      "tempsfdvdvdfv 6769 7\n",
      "tempsfdvdvdfv 7357 8\n",
      "tempsfdvdvdfv 8101 9\n",
      "tempsfdvdvdfv 8715 10\n",
      "tempsfdvdvdfv 9782 11\n",
      "tempsfdvdvdfv 10828 12\n",
      "tempsfdvdvdfv 11491 13\n",
      "tempsfdvdvdfv 12456 14\n",
      "tempsfdvdvdfv 13055 15\n",
      "tempsfdvdvdfv 14133 16\n",
      "tempsfdvdvdfv 14803 17\n",
      "tempsfdvdvdfv 15626 18\n",
      "tempsfdvdvdfv 16710 19\n",
      "tempsfdvdvdfv 17328 20\n",
      "tempsfdvdvdfv 18385 21\n",
      "tempsfdvdvdfv 19052 22\n",
      "tempsfdvdvdfv 19997 23\n",
      "tempsfdvdvdfv 20657 24\n",
      "avg 25 15 753 826 486 532 378 453 588 530\n",
      "left [[904, 570, 1087, 676], [1031, 630, 1106, 672], [925, 571, 1026, 629], [677, 418, 731, 452], [449, 331, 626, 446], [755, 476, 821, 514], [724, 452, 780, 486], [530, 420, 592, 467], [527, 420, 588, 469], [724, 450, 744, 462], [451, 329, 614, 452], [1035, 631, 1067, 651], [973, 597, 1046, 640], [602, 395, 663, 430], [927, 571, 965, 595], [495, 386, 599, 462], [1060, 659, 1078, 670], [643, 404, 670, 419], [755, 475, 823, 514], [1044, 650, 1084, 675], [452, 338, 618, 446], [1030, 630, 1057, 646], [642, 404, 667, 419], [908, 572, 945, 593], [585, 389, 660, 431]]\n",
      "right [[350, 660, 659, 410], [633, 426, 655, 409], [469, 553, 553, 488], [319, 683, 368, 644], [296, 684, 408, 597], [296, 682, 348, 642], [272, 646, 296, 632], [323, 681, 604, 454], [457, 562, 506, 523], [394, 609, 423, 586], [270, 646, 295, 632], [340, 437, 361, 423], [550, 492, 578, 470], [504, 525, 527, 509], [207, 542, 219, 534]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 95%|█████████▌| 239/251 [00:07<00:00, 31.90it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 982 0\n",
      "tempsfdvdvdfv 1766 1\n",
      "tempsfdvdvdfv 2554 2\n",
      "tempsfdvdvdfv 3678 3\n",
      "tempsfdvdvdfv 4701 4\n",
      "tempsfdvdvdfv 5783 5\n",
      "tempsfdvdvdfv 6759 6\n",
      "tempsfdvdvdfv 7531 7\n",
      "tempsfdvdvdfv 8646 8\n",
      "tempsfdvdvdfv 9657 9\n",
      "tempsfdvdvdfv 10167 10\n",
      "tempsfdvdvdfv 11172 11\n",
      "tempsfdvdvdfv 12237 12\n",
      "tempsfdvdvdfv 13022 13\n",
      "tempsfdvdvdfv 13943 14\n",
      "tempsfdvdvdfv 14706 15\n",
      "tempsfdvdvdfv 15208 16\n",
      "avg 17 11 846 894 562 593 461 542 550 491\n",
      "left [[945, 594, 982, 617], [763, 482, 784, 494], [726, 454, 788, 492], [1069, 666, 1124, 700], [991, 621, 1023, 641], [1050, 655, 1082, 675], [952, 598, 976, 613], [715, 442, 772, 488], [1022, 639, 1115, 701], [947, 593, 1011, 634], [448, 361, 510, 397], [961, 593, 1005, 619], [1043, 651, 1065, 665], [685, 424, 785, 494], [882, 672, 921, 702], [716, 441, 763, 478], [477, 673, 502, 687]]\n",
      "right [[297, 683, 584, 467], [444, 571, 562, 482], [568, 488, 660, 414], [616, 453, 667, 413], [335, 673, 417, 608], [666, 427, 677, 419], [424, 601, 445, 585], [294, 684, 328, 658], [462, 382, 526, 344], [419, 605, 429, 598], [549, 492, 675, 419]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 794 0\n",
      "tempsfdvdvdfv 1456 1\n",
      "tempsfdvdvdfv 2248 2\n",
      "tempsfdvdvdfv 2986 3\n",
      "tempsfdvdvdfv 4054 4\n",
      "tempsfdvdvdfv 5137 5\n",
      "tempsfdvdvdfv 5935 6\n",
      "tempsfdvdvdfv 7040 7\n",
      "tempsfdvdvdfv 7642 8\n",
      "tempsfdvdvdfv 8310 9\n",
      "tempsfdvdvdfv 8989 10\n",
      "tempsfdvdvdfv 9655 11\n",
      "tempsfdvdvdfv 10194 12\n",
      "avg 13 7 709 784 457 504 441 560 539 451\n",
      "left [[766, 483, 794, 499], [598, 394, 662, 431], [728, 454, 792, 494], [686, 423, 738, 457], [1002, 626, 1068, 665], [1002, 627, 1083, 675], [676, 418, 798, 497], [1036, 632, 1105, 673], [441, 352, 602, 461], [604, 392, 668, 429], [650, 406, 679, 425], [601, 392, 666, 429], [438, 343, 539, 419]]\n",
      "right [[295, 683, 580, 469], [369, 627, 572, 474], [562, 492, 649, 422], [562, 487, 665, 420], [462, 380, 523, 342], [515, 424, 538, 406], [325, 680, 395, 625]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 806 0\n",
      "tempsfdvdvdfv 1479 1\n",
      "tempsfdvdvdfv 2287 2\n",
      "tempsfdvdvdfv 2956 3\n",
      "tempsfdvdvdfv 3603 4\n",
      "tempsfdvdvdfv 4410 5\n",
      "tempsfdvdvdfv 4916 6\n",
      "avg 7 20 637 702 410 451 450 510 564 519\n",
      "left [[774, 490, 806, 508], [634, 407, 673, 429], [678, 419, 808, 507], [592, 387, 669, 430], [578, 387, 647, 438], [730, 458, 807, 503], [477, 325, 506, 347]]\n",
      "right [[322, 684, 658, 412], [406, 600, 560, 484], [296, 684, 352, 643], [341, 650, 377, 624], [525, 518, 541, 506], [492, 545, 509, 532], [363, 633, 399, 607], [515, 526, 558, 497], [575, 474, 666, 421], [469, 382, 521, 342], [396, 608, 408, 600], [611, 460, 673, 420], [546, 501, 658, 422], [339, 671, 384, 635], [467, 565, 488, 549], [388, 614, 400, 606], [471, 552, 527, 509], [635, 444, 655, 431], [433, 580, 447, 570], [421, 589, 437, 578]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 823 0\n",
      "tempsfdvdvdfv 1468 1\n",
      "tempsfdvdvdfv 2283 2\n",
      "tempsfdvdvdfv 2954 3\n",
      "tempsfdvdvdfv 3545 4\n",
      "tempsfdvdvdfv 4216 5\n",
      "tempsfdvdvdfv 5127 6\n",
      "tempsfdvdvdfv 5669 7\n",
      "tempsfdvdvdfv 6391 8\n",
      "tempsfdvdvdfv 7152 9\n",
      "tempsfdvdvdfv 7976 10\n",
      "tempsfdvdvdfv 8560 11\n",
      "tempsfdvdvdfv 9354 12\n",
      "avg 13 14 654 719 427 471 444 505 515 467\n",
      "left [[732, 459, 823, 514], [576, 387, 645, 439], [717, 445, 815, 516], [633, 408, 671, 430], [430, 344, 591, 470], [638, 407, 671, 427], [900, 564, 911, 571], [499, 329, 542, 353], [679, 420, 722, 447], [743, 465, 761, 476], [732, 460, 824, 516], [513, 423, 584, 469], [718, 448, 794, 503]]\n",
      "right [[322, 684, 653, 416], [427, 584, 548, 493], [578, 474, 595, 462], [373, 627, 426, 585], [234, 537, 248, 528], [438, 576, 478, 547], [300, 683, 340, 651], [454, 383, 485, 362], [440, 576, 523, 512], [435, 353, 474, 325], [626, 445, 660, 423], [519, 516, 552, 490], [437, 348, 449, 339], [636, 427, 650, 416]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 840 0\n",
      "tempsfdvdvdfv 1673 1\n",
      "tempsfdvdvdfv 2396 2\n",
      "tempsfdvdvdfv 2870 3\n",
      "tempsfdvdvdfv 3710 4\n",
      "tempsfdvdvdfv 4183 5\n",
      "tempsfdvdvdfv 4677 6\n",
      "tempsfdvdvdfv 5333 7\n",
      "tempsfdvdvdfv 5986 8\n",
      "tempsfdvdvdfv 6825 9\n",
      "tempsfdvdvdfv 7430 10\n",
      "tempsfdvdvdfv 8105 11\n",
      "tempsfdvdvdfv 8605 12\n",
      "tempsfdvdvdfv 9395 13\n",
      "tempsfdvdvdfv 10162 14\n",
      "tempsfdvdvdfv 10954 15\n",
      "tempsfdvdvdfv 11445 16\n",
      "tempsfdvdvdfv 12191 17\n",
      "tempsfdvdvdfv 12849 18\n",
      "avg 19 9 623 676 413 446 449 528 491 434\n",
      "left [[652, 407, 840, 525], [790, 500, 833, 526], [680, 420, 723, 448], [436, 361, 474, 386], [830, 517, 840, 523], [435, 363, 473, 387], [458, 329, 494, 355], [592, 390, 656, 435], [592, 389, 653, 424], [726, 455, 839, 525], [529, 410, 605, 460], [639, 408, 675, 428], [464, 326, 500, 346], [737, 463, 790, 501], [727, 455, 767, 478], [739, 466, 792, 498], [456, 330, 491, 352], [726, 453, 746, 465], [644, 407, 658, 415]]\n",
      "right [[297, 683, 568, 479], [572, 482, 668, 422], [376, 622, 542, 497], [647, 439, 671, 421], [458, 427, 468, 421], [450, 383, 510, 344], [432, 354, 462, 331], [325, 682, 355, 659], [490, 351, 509, 340]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 97%|█████████▋| 243/251 [00:07<00:00, 32.36it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 861 0\n",
      "tempsfdvdvdfv 1714 1\n",
      "tempsfdvdvdfv 2388 2\n",
      "tempsfdvdvdfv 3247 3\n",
      "tempsfdvdvdfv 4017 4\n",
      "tempsfdvdvdfv 4764 5\n",
      "tempsfdvdvdfv 5772 6\n",
      "tempsfdvdvdfv 6414 7\n",
      "tempsfdvdvdfv 7050 8\n",
      "tempsfdvdvdfv 7819 9\n",
      "tempsfdvdvdfv 8460 10\n",
      "tempsfdvdvdfv 8995 11\n",
      "tempsfdvdvdfv 9641 12\n",
      "tempsfdvdvdfv 10447 13\n",
      "tempsfdvdvdfv 10972 14\n",
      "tempsfdvdvdfv 11610 15\n",
      "avg 16 20 678 725 438 469 455 516 563 521\n",
      "left [[721, 453, 861, 537], [800, 508, 853, 540], [638, 410, 674, 430], [809, 507, 859, 539], [713, 440, 770, 486], [737, 465, 747, 472], [985, 620, 1008, 634], [615, 422, 642, 438], [593, 401, 636, 434], [713, 441, 769, 486], [591, 404, 641, 443], [512, 343, 535, 358], [618, 411, 646, 427], [718, 450, 806, 507], [493, 328, 525, 350], [593, 407, 638, 434]]\n",
      "right [[420, 604, 588, 468], [376, 625, 482, 543], [523, 512, 671, 423], [604, 469, 664, 424], [391, 628, 416, 609], [651, 439, 682, 421], [541, 499, 645, 434], [502, 528, 555, 497], [341, 650, 368, 631], [376, 498, 401, 484], [514, 519, 657, 433], [325, 662, 347, 647], [366, 631, 378, 623], [459, 562, 498, 531], [298, 684, 310, 675], [311, 673, 323, 665], [557, 488, 658, 425], [648, 440, 658, 433], [481, 555, 574, 482], [429, 597, 451, 580]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 886 0\n",
      "tempsfdvdvdfv 1554 1\n",
      "tempsfdvdvdfv 2398 2\n",
      "tempsfdvdvdfv 3214 3\n",
      "tempsfdvdvdfv 4089 4\n",
      "tempsfdvdvdfv 4917 5\n",
      "tempsfdvdvdfv 5599 6\n",
      "tempsfdvdvdfv 6484 7\n",
      "tempsfdvdvdfv 6955 8\n",
      "tempsfdvdvdfv 7556 9\n",
      "tempsfdvdvdfv 8328 10\n",
      "tempsfdvdvdfv 9192 11\n",
      "tempsfdvdvdfv 9946 12\n",
      "tempsfdvdvdfv 10832 13\n",
      "tempsfdvdvdfv 11566 14\n",
      "tempsfdvdvdfv 12228 15\n",
      "avg 16 16 700 764 450 491 474 544 526 476\n",
      "left [[821, 513, 886, 550], [630, 409, 668, 431], [679, 420, 844, 535], [773, 488, 816, 513], [863, 545, 875, 553], [678, 420, 828, 525], [653, 406, 682, 426], [729, 458, 885, 552], [436, 348, 471, 374], [522, 415, 601, 464], [740, 466, 772, 489], [776, 486, 864, 547], [726, 452, 754, 471], [871, 542, 886, 551], [681, 420, 734, 456], [631, 415, 662, 433]]\n",
      "right [[369, 626, 412, 595], [320, 683, 590, 465], [579, 477, 667, 422], [521, 521, 595, 462], [398, 604, 478, 545], [646, 425, 662, 414], [501, 526, 667, 414], [594, 464, 669, 414], [457, 382, 516, 339], [427, 362, 491, 326], [567, 485, 659, 423], [347, 643, 367, 629], [561, 490, 578, 479], [475, 546, 490, 536], [371, 625, 391, 611], [459, 558, 475, 547]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      " 98%|█████████▊| 247/251 [00:07<00:00, 33.44it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tempsfdvdvdfv 908 0\n",
      "tempsfdvdvdfv 1690 1\n",
      "tempsfdvdvdfv 2426 2\n",
      "tempsfdvdvdfv 3206 3\n",
      "tempsfdvdvdfv 3933 4\n",
      "tempsfdvdvdfv 4720 5\n",
      "tempsfdvdvdfv 5203 6\n",
      "tempsfdvdvdfv 5732 7\n",
      "tempsfdvdvdfv 6253 8\n",
      "tempsfdvdvdfv 6839 9\n",
      "avg 10 15 621 683 414 454 412 492 522 465\n",
      "left [[827, 525, 908, 573], [742, 469, 782, 492], [651, 407, 736, 460], [713, 440, 780, 492], [716, 445, 727, 452], [731, 460, 787, 492], [448, 327, 483, 351], [490, 326, 529, 349], [421, 352, 521, 419], [480, 398, 586, 469]]\n",
      "right [[291, 684, 517, 514], [319, 683, 584, 469], [540, 498, 674, 421], [459, 349, 488, 330], [345, 644, 418, 590], [422, 363, 465, 330], [421, 367, 490, 327], [320, 439, 341, 423], [425, 359, 469, 325], [337, 650, 349, 642], [410, 595, 443, 571], [596, 463, 649, 425], [438, 586, 498, 547], [325, 659, 365, 630], [540, 505, 636, 440]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 535 0\n",
      "tempsfdvdvdfv 1196 1\n",
      "tempsfdvdvdfv 1728 2\n",
      "tempsfdvdvdfv 2521 3\n",
      "tempsfdvdvdfv 3386 4\n",
      "tempsfdvdvdfv 3914 5\n",
      "tempsfdvdvdfv 4864 6\n",
      "tempsfdvdvdfv 5541 7\n",
      "tempsfdvdvdfv 6073 8\n",
      "tempsfdvdvdfv 6601 9\n",
      "tempsfdvdvdfv 7339 10\n",
      "tempsfdvdvdfv 8076 11\n",
      "tempsfdvdvdfv 8840 12\n",
      "tempsfdvdvdfv 9632 13\n",
      "avg 14 33 645 688 414 440 450 511 540 496\n",
      "left [[505, 332, 535, 350], [626, 410, 661, 430], [488, 326, 532, 351], [688, 425, 793, 501], [846, 535, 865, 549], [484, 325, 528, 350], [857, 535, 950, 587], [645, 410, 677, 428], [500, 337, 532, 362], [480, 331, 528, 358], [721, 452, 738, 462], [721, 453, 737, 462], [716, 447, 764, 479], [758, 481, 792, 501]]\n",
      "right [[290, 684, 510, 519], [521, 511, 655, 424], [589, 475, 661, 423], [463, 565, 661, 415], [411, 607, 455, 573], [656, 436, 678, 420], [313, 684, 353, 656], [384, 629, 413, 607], [361, 648, 381, 633], [327, 657, 350, 641], [417, 367, 488, 325], [479, 552, 664, 412], [593, 473, 666, 414], [513, 517, 535, 503], [546, 495, 674, 421], [371, 640, 383, 631], [353, 654, 365, 646], [293, 683, 526, 508], [587, 439, 629, 411], [449, 381, 515, 337], [362, 499, 376, 489], [379, 633, 398, 619], [448, 577, 471, 560], [274, 528, 308, 506], [592, 470, 663, 415], [544, 422, 554, 414], [580, 478, 619, 448], [640, 442, 668, 422], [312, 684, 336, 669], [541, 425, 556, 414], [417, 433, 433, 422], [315, 684, 328, 676], [558, 449, 610, 410]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1004 0\n",
      "tempsfdvdvdfv 2024 1\n",
      "tempsfdvdvdfv 2831 2\n",
      "tempsfdvdvdfv 3730 3\n",
      "tempsfdvdvdfv 4662 4\n",
      "tempsfdvdvdfv 5341 5\n",
      "tempsfdvdvdfv 6281 6\n",
      "tempsfdvdvdfv 7293 7\n",
      "tempsfdvdvdfv 7819 8\n",
      "tempsfdvdvdfv 8835 9\n",
      "tempsfdvdvdfv 9631 10\n",
      "tempsfdvdvdfv 10430 11\n",
      "avg 12 22 807 869 508 546 479 541 536 492\n",
      "left [[897, 569, 1004, 631], [880, 549, 1020, 629], [737, 465, 807, 507], [868, 550, 899, 570], [879, 549, 932, 580], [645, 409, 679, 428], [884, 561, 940, 593], [953, 589, 1012, 624], [481, 325, 526, 351], [989, 610, 1016, 626], [712, 439, 796, 507], [767, 485, 799, 506]]\n",
      "right [[317, 683, 508, 529], [295, 682, 397, 603], [512, 526, 541, 506], [529, 506, 561, 486], [577, 479, 667, 423], [455, 559, 494, 532], [539, 499, 659, 424], [556, 494, 575, 482], [374, 622, 422, 584], [510, 519, 588, 473], [439, 571, 457, 559], [321, 681, 514, 525], [495, 530, 590, 477], [654, 437, 675, 421], [601, 459, 665, 423], [292, 683, 322, 660], [538, 507, 548, 501], [451, 344, 478, 329], [657, 436, 677, 421], [495, 464, 562, 412], [638, 443, 664, 423], [293, 683, 351, 638]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 1068 0\n",
      "tempsfdvdvdfv 1887 1\n",
      "tempsfdvdvdfv 2413 2\n",
      "tempsfdvdvdfv 2895 3\n",
      "tempsfdvdvdfv 3715 4\n",
      "tempsfdvdvdfv 4346 5\n",
      "tempsfdvdvdfv 4991 6\n",
      "tempsfdvdvdfv 5653 7\n",
      "tempsfdvdvdfv 6318 8\n",
      "tempsfdvdvdfv 7254 9\n",
      "tempsfdvdvdfv 7996 10\n",
      "tempsfdvdvdfv 9075 11\n",
      "tempsfdvdvdfv 9887 12\n",
      "tempsfdvdvdfv 10557 13\n",
      "tempsfdvdvdfv 11534 14\n",
      "avg 15 25 703 768 453 495 410 466 540 502\n",
      "left [[898, 569, 1068, 671], [753, 479, 819, 516], [487, 325, 526, 347], [452, 336, 482, 353], [723, 455, 820, 515], [483, 328, 631, 443], [573, 389, 645, 441], [630, 416, 662, 434], [642, 410, 665, 424], [904, 573, 936, 593], [657, 413, 742, 466], [1034, 650, 1079, 675], [760, 484, 812, 516], [638, 409, 670, 428], [913, 568, 977, 606]]\n",
      "right [[289, 685, 485, 538], [406, 611, 531, 513], [519, 514, 670, 416], [574, 482, 667, 424], [562, 491, 576, 482], [487, 537, 584, 481], [400, 616, 425, 597], [305, 626, 323, 615], [285, 685, 314, 668], [390, 436, 416, 421], [299, 627, 322, 613], [594, 470, 653, 426], [301, 629, 324, 615], [334, 670, 359, 651], [546, 427, 583, 400], [200, 546, 231, 528], [443, 387, 511, 339], [404, 435, 422, 425], [550, 493, 610, 454], [479, 544, 505, 524], [371, 437, 415, 410], [283, 685, 322, 662], [555, 422, 585, 401], [299, 626, 319, 614], [384, 436, 511, 340]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 512 0\n",
      "tempsfdvdvdfv 1592 1\n",
      "tempsfdvdvdfv 2580 2\n",
      "tempsfdvdvdfv 3109 3\n",
      "tempsfdvdvdfv 3552 4\n",
      "tempsfdvdvdfv 4589 5\n",
      "tempsfdvdvdfv 5228 6\n",
      "tempsfdvdvdfv 5909 7\n",
      "tempsfdvdvdfv 6433 8\n",
      "tempsfdvdvdfv 7070 9\n",
      "tempsfdvdvdfv 8028 10\n",
      "tempsfdvdvdfv 8745 11\n",
      "tempsfdvdvdfv 9486 12\n",
      "tempsfdvdvdfv 10561 13\n",
      "tempsfdvdvdfv 11209 14\n",
      "tempsfdvdvdfv 11733 15\n",
      "tempsfdvdvdfv 12517 16\n",
      "tempsfdvdvdfv 13232 17\n",
      "tempsfdvdvdfv 13732 18\n",
      "tempsfdvdvdfv 14791 19\n",
      "tempsfdvdvdfv 15318 20\n",
      "tempsfdvdvdfv 16064 21\n",
      "tempsfdvdvdfv 17070 22\n",
      "avg 23 14 687 742 446 480 369 455 598 538\n",
      "left [[476, 326, 512, 347], [1024, 643, 1080, 676], [954, 603, 988, 622], [497, 330, 529, 348], [433, 341, 443, 349], [935, 589, 1037, 652], [472, 326, 639, 443], [644, 407, 681, 428], [481, 326, 524, 350], [473, 329, 637, 444], [935, 591, 958, 605], [653, 407, 717, 447], [724, 456, 741, 467], [1032, 648, 1075, 674], [571, 388, 648, 436], [485, 326, 524, 348], [733, 461, 784, 494], [651, 407, 715, 447], [470, 330, 500, 347], [1027, 645, 1059, 665], [472, 329, 527, 360], [732, 459, 746, 467], [938, 592, 1006, 634]]\n",
      "right [[316, 684, 482, 550], [353, 636, 558, 487], [288, 684, 343, 645], [560, 486, 677, 421], [387, 610, 522, 512], [466, 563, 517, 525], [223, 671, 251, 655], [286, 684, 356, 635], [444, 348, 475, 325], [486, 547, 666, 416], [569, 480, 671, 416], [220, 678, 251, 659], [356, 634, 372, 623], [218, 676, 229, 668]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "100%|██████████| 251/251 [00:07<00:00, 33.94it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 533 0\n",
      "tempsfdvdvdfv 1613 1\n",
      "tempsfdvdvdfv 2401 2\n",
      "tempsfdvdvdfv 2930 3\n",
      "tempsfdvdvdfv 3937 4\n",
      "tempsfdvdvdfv 4727 5\n",
      "tempsfdvdvdfv 5450 6\n",
      "tempsfdvdvdfv 6020 7\n",
      "tempsfdvdvdfv 6541 8\n",
      "tempsfdvdvdfv 7531 9\n",
      "tempsfdvdvdfv 8520 10\n",
      "tempsfdvdvdfv 9010 11\n",
      "tempsfdvdvdfv 9531 12\n",
      "tempsfdvdvdfv 10094 13\n",
      "tempsfdvdvdfv 10621 14\n",
      "tempsfdvdvdfv 11414 15\n",
      "tempsfdvdvdfv 12048 16\n",
      "avg 17 29 668 708 438 462 478 518 550 521\n",
      "left [[513, 336, 533, 348], [980, 618, 1080, 676], [769, 490, 788, 501], [469, 326, 529, 360], [975, 614, 1007, 633], [763, 485, 790, 501], [659, 412, 723, 452], [473, 332, 570, 386], [480, 325, 521, 348], [976, 611, 990, 619], [974, 611, 989, 620], [465, 331, 490, 348], [484, 329, 521, 350], [533, 409, 563, 426], [511, 339, 527, 348], [770, 484, 793, 500], [568, 401, 634, 445]]\n",
      "right [[638, 428, 659, 413], [460, 567, 668, 416], [438, 572, 568, 481], [343, 644, 380, 615], [385, 626, 421, 599], [598, 467, 616, 454], [570, 481, 601, 459], [312, 683, 381, 631], [651, 439, 678, 421], [363, 629, 403, 598], [560, 492, 672, 416], [451, 574, 477, 556], [433, 588, 453, 574], [422, 584, 440, 572], [427, 593, 440, 584], [620, 453, 670, 416], [290, 682, 303, 674], [374, 635, 402, 614], [305, 671, 320, 661], [463, 555, 478, 545], [600, 461, 651, 426], [386, 612, 407, 595], [652, 434, 669, 423], [525, 518, 544, 505], [636, 428, 656, 412], [457, 571, 502, 535], [552, 493, 589, 467], [419, 587, 437, 573], [540, 507, 555, 497]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 798 0\n",
      "tempsfdvdvdfv 1603 1\n",
      "tempsfdvdvdfv 2686 2\n",
      "tempsfdvdvdfv 3424 3\n",
      "tempsfdvdvdfv 4226 4\n",
      "tempsfdvdvdfv 5025 5\n",
      "tempsfdvdvdfv 5655 6\n",
      "tempsfdvdvdfv 6460 7\n",
      "tempsfdvdvdfv 7062 8\n",
      "tempsfdvdvdfv 7845 9\n",
      "tempsfdvdvdfv 8907 10\n",
      "tempsfdvdvdfv 9473 11\n",
      "tempsfdvdvdfv 10087 12\n",
      "tempsfdvdvdfv 10892 13\n",
      "avg 14 34 712 778 466 508 417 474 518 478\n",
      "left [[770, 491, 798, 508], [645, 407, 805, 506], [1041, 653, 1083, 677], [722, 454, 738, 463], [730, 463, 802, 508], [727, 460, 799, 508], [567, 389, 630, 430], [665, 417, 805, 507], [524, 400, 602, 459], [769, 490, 783, 498], [1048, 658, 1062, 667], [521, 393, 566, 422], [521, 394, 614, 456], [728, 461, 805, 505]]\n",
      "right [[399, 601, 661, 417], [309, 684, 410, 608], [475, 556, 667, 416], [615, 456, 669, 416], [203, 562, 253, 523], [296, 679, 357, 632], [387, 610, 398, 603], [388, 624, 428, 594], [435, 382, 496, 333], [311, 684, 386, 627], [423, 352, 471, 325], [364, 627, 378, 618], [380, 615, 393, 607], [431, 590, 470, 562], [360, 630, 370, 624], [377, 434, 391, 423], [373, 438, 393, 425], [492, 346, 504, 338], [352, 436, 371, 425], [287, 684, 386, 612], [628, 445, 673, 416], [491, 345, 503, 336], [402, 370, 466, 329], [486, 539, 516, 517], [437, 387, 448, 380], [426, 594, 660, 417], [316, 681, 328, 673], [522, 513, 671, 416], [321, 677, 334, 668], [432, 381, 451, 370], [589, 472, 661, 425], [432, 388, 446, 379], [435, 391, 451, 382], [632, 447, 664, 424]]\n",
      "This image is: <class 'numpy.ndarray'> with dimesions: (720, 1280, 3)\n",
      "tempsfdvdvdfv 669 0\n",
      "tempsfdvdvdfv 1486 1\n",
      "tempsfdvdvdfv 2218 2\n",
      "tempsfdvdvdfv 3011 3\n",
      "tempsfdvdvdfv 3621 4\n",
      "tempsfdvdvdfv 4261 5\n",
      "tempsfdvdvdfv 4848 6\n",
      "tempsfdvdvdfv 5364 7\n",
      "tempsfdvdvdfv 6083 8\n",
      "avg 9 16 606 675 403 448 397 489 556 489\n",
      "left [[643, 406, 669, 422], [730, 462, 817, 511], [640, 407, 732, 458], [670, 415, 793, 504], [519, 394, 610, 453], [597, 411, 640, 442], [521, 398, 587, 439], [479, 330, 516, 359], [657, 408, 719, 447]]\n",
      "right [[395, 617, 661, 416], [284, 684, 541, 498], [620, 441, 639, 427], [583, 476, 665, 415], [313, 682, 373, 634], [287, 683, 556, 488], [200, 546, 219, 531], [199, 546, 218, 531], [568, 480, 674, 421], [333, 439, 348, 427], [375, 633, 426, 595], [554, 491, 584, 469], [573, 478, 591, 464], [346, 655, 364, 643], [315, 680, 499, 537], [420, 368, 467, 330]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[A\u001b[A\u001b[A\n",
      "\n",
      "\n",
      "\u001b[A\u001b[A\u001b[A"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[MoviePy] Done.\n",
      "[MoviePy] >>>> Video ready: extra.mp4 \n",
      "\n",
      "CPU times: user 6.28 s, sys: 1.45 s, total: 7.72 s\n",
      "Wall time: 8.66 s\n"
     ]
    }
   ],
   "source": [
    "challenge_output = 'extra.mp4'\n",
    "clip2 = VideoFileClip('challenge.mp4')\n",
    "challenge_clip = clip2.fl_image(process_image)\n",
    "%time challenge_clip.write_videofile(challenge_output, audio=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<video width=\"960\" height=\"540\" controls>\n",
       "  <source src=\"extra.mp4\">\n",
       "</video>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HTML(\"\"\"\n",
    "<video width=\"960\" height=\"540\" controls>\n",
    "  <source src=\"{0}\">\n",
    "</video>\n",
    "\"\"\".format(challenge_output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
